#!/usr/bin/perl -wT

##############################################################################
# PURPOSE: calipsoserver - Serve CALIPSO data, subsetted by date/time range,
#          variable, and longitude-latitude box, in ASCII, XDR and NetCDF
#          and original formats for use by other programs (e.g., via wget).
#
# NOTES:   Server is WCS-compliant:
#          https://www.opengeospatial.org/standards/wcs
#          https://datafed.net/xs/OpenGIS/wcs/1.0.0/
#          and modeled after a similar webserver application:
#          https://webapps.datafed.net/ogc_EPA.wsfl
#
#          Uses wget through http port 80 to cain.larc.nasa.gov
#          and which streams the data back on STDOUT.
#
#          Example usage:
#
#          wget -q -T 0 -O - \
#            'https://cain.larc.nasa.gov/cgi-bin/calipsoserver?\
#            SERVICE=wcs&\
#            VERSION=1.0.0&\
#            REQUEST=GetCoverage&\
#            COVERAGE=temperature&\
#            TIME=2006-07-04T23:00:00Z/2006-07-05T00:00:00Z&\
#            BBOX=47,56,48,57,2000,3000&\
#            FORMAT=ascii'
#
#          NASA Langley contacts for servers cain and calapps:
#            daniel.c.mangosing@nasa.gov 757-951-1628
#            rt@sdhelp.larc.nasa.gov
#          NASA login account:
#            https://urs.earthdata.nasa.gov login rsig password Rsig4444
#          CALIPSO file list:
#            https://asdc.larc.nasa.gov/data/CALIPSO
#
## HISTORY: 2010/03/02, plessel.todd@epa.gov, 1-919-541-5500
#
# STATUS:  reviewed, tested.
##############################################################################


use strict;
package main;
$| = 1; # Turn off output buffering so messages appear in correct order.
alarm( 3600 ); # Kill process after 1 hour. Legitimate usage could be an hour!
# Restrict PATH and ENV. (But before popen, ENV is cleared!)
delete @ENV{ 'PATH', 'IFS', 'CDPATH', 'ENV', 'BASH_ENV' };


############################## TUNABLE CONSTANTS #############################


my $debugging = 0; # 1 = print debug messages to STDERR logs/error_log.

# Internal server to forward to via wget command:

my $server_path  = 'https://cain.larc.nasa.gov/cgi-bin/calipsoserver?';
my $bindir       = '/rsig/current/code/bin/Linux.x86_64';
#my $wget_command = "$bindir/wget -q -t 1 -T 0 -O - ";
my $wget_command = '/usr/bin/curl -k --silent --max-time 3600 --retry 0 -L --tcp-nodelay ';

# Webserver content types for each output format:

my %content_types = (
  'ascii'         => 'text/plain',
  'xdr'           => 'application/octet-stream',
  'netcdf-coards' => 'application/netcdf',
  'netcdf-ioapi'  => 'application/netcdf',
  'original'      => 'application/octet-stream'
);

# Query string parsing routine dispatch table:

my %parsers = (
  'service'             => \&parse_service_option,
  'version'             => \&parse_version_option,
  'request'             => \&parse_request_option,
  'coverage'            => \&parse_coverage_option,
  'time'                => \&parse_time_option,
  'bbox'                => \&parse_bbox_option,
  'format'              => \&parse_format_option,
  'compress'            => \&parse_compress_option,
  'minimum_cad'         => \&parse_minimum_cad_option,
  'maximum_uncertainty' => \&parse_maximum_uncertainty_option,
  'regrid'              => \&parse_regrid_option,
  'regrid_aggregate'    => \&parse_regrid_aggregate_option,
  'lambert'             => \&parse_lambert_option,
  'stereographic'       => \&parse_stereographic_option,
  'mercator'            => \&parse_mercator_option,
  'lonlat'              => \&parse_lonlat_option,
  'ellipsoid'           => \&parse_ellipsoid_option,
  'grid'                => \&parse_grid_option,
  'levels'              => \&parse_levels_option,
  'data_version'        => \&parse_data_version_option
);

# Variable and units lists:

my @_l1_variables = (
  'profile_time',
##'profile_utc_time',
  'profile_id',
  'land_water_mask',
  'igbp_surface_type',
  'nsidc_surface_type',
  'day_night_flag',
  'frame_number',
  'lidar_mode',
  'lidar_submode',
  'surface_elevation',
  'laser_energy_532',
  'perpendicular_amplifier_gain_532',
  'parallel_amplifier_gain_532',
  'perpendicular_background_monitor_532',
  'parallel_background_monitor_532',
  'depolarization_gain_ratio_532',
  'depolarization_gain_ratio_uncertainty_532',
  'calibration_constant_532',
  'calibration_constant_uncertainty_532',
  'total_attenuated_backscatter_532',
  'perpendicular_attenuated_backscatter_532',
  'perpendicular_rms_baseline_532',
  'parallel_rms_baseline_532',
  'laser_energy_1064',
  'amplifier_gain_1064',
  'calibration_constant_1064',
  'calibration_constant_uncertainty_1064',
  'attenuated_backscatter_1064',
  'rms_baseline_1064',
  'molecular_number_density',
  'ozone_number_density',
  'temperature',
  'pressure',
  'noise_scale_factor_532_perpendicular',
  'noise_scale_factor_532_parallel',
  'noise_scale_factor_1064',
  'qc_flag',
  'qc_flag_2',
##'latitude',
##'longitude',
  'off_nadir_angle',
  'viewing_zenith_angle',
  'viewing_azimuth_angle',
  'solar_zenith_angle',
  'solar_azimuth_angle',
  'scattering_angle',
  'spacecraft_altitude',
  'spacecraft_position',
  'spacecraft_velocity',
  'spacecraft_attitude',
  'spacecraft_attitude_rate',
  'subsatellite_latitude',
  'subsatellite_longitude',
  'earth-sun_distance',
  'subsolar_latitude',
  'subsolar_longitude'
);

my @_l2_01kmclay_variables = (
  'profile_id',
##'latitude',
##'longitude',
  'profile_time',
##'profile_utc_time',
  'day_night_flag',
  'off_nadir_angle',
  'solar_zenith_angle',
  'solar_azimuth_angle',
  'scattering_angle',
  'spacecraft_position',
  'parallel_column_reflectance_532',
  'parallel_column_reflectance_uncertainty_532',
  'perpendicular_column_reflectance_532',
  'perpendicular_column_reflectance_uncertainty_532',
  'column_integrated_attenuated_backscatter_532',
  'column_iab_cumulative_probability',
  'tropopause_height',
  'tropopause_temperature',
  'igbp_surface_type',
  'nsidc_surface_type',
  'lidar_surface_elevation',
  'dem_surface_elevation',
  'number_layers_found',
  'layer_top_altitude',
  'layer_base_altitude',
  'layer_top_pressure',
  'midlayer_pressure',
  'layer_base_pressure',
  'layer_top_temperature',
  'midlayer_temperature',
  'layer_base_temperature',
  'attenuated_backscatter_statistics_532',
  'integrated_attenuated_backscatter_532',
  'integrated_attenuated_backscatter_uncertainty_532',
  'attenuated_backscatter_statistics_1064',
  'integrated_attenuated_backscatter_1064',
  'integrated_attenuated_backscatter_uncertainty_1064',
  'volume_depolarization_ratio_statistics',
  'integrated_volume_depolarization_ratio',
  'integrated_volume_depolarization_ratio_uncertainty',
  'attenuated_total_color_ratio_statistics',
  'integrated_attenuated_total_color_ratio',
  'integrated_attenuated_total_color_ratio_uncertainty',
  'overlying_integrated_attenuated_backscatter_532',
  'layer_iab_qa_factor',
  'cad_score',
  'feature_classification_flags'
);

my @_l2_05kmalay_variables = (
  'profile_id',
##'latitude',
##'longitude',
  'profile_time',
##'profile_utc_time',
  'day_night_flag',
  'off_nadir_angle',
  'solar_zenith_angle',
  'solar_azimuth_angle',
  'scattering_angle',
  'parallel_column_reflectance_532',
  'parallel_column_reflectance_uncertainty_532',
  'parallel_column_reflectance_rms_variation_532',
  'perpendicular_column_reflectance_532',
  'perpendicular_column_reflectance_uncertainty_532',
  'perpendicular_column_reflectance_rms_variation_532',
  'column_integrated_attenuated_backscatter_532',
  'column_iab_cumulative_probability',
  'column_optical_depth_cloud_532',
  'column_optical_depth_cloud_uncertainty_532',
  'column_optical_depth_aerosols_532',
  'column_optical_depth_aerosols_uncertainty_532',
  'column_optical_depth_stratospheric_532',
  'column_optical_depth_stratospheric_uncertainty_532',
  'column_optical_depth_aerosols_1064',
  'column_optical_depth_aerosols_uncertainty_1064',
  'column_optical_depth_stratospheric_1064',
  'column_optical_depth_stratospheric_uncertainty_1064',
  'column_feature_fraction',
  'tropopause_height',
  'tropopause_temperature',
  'igbp_surface_type',
  'nsidc_surface_type',
  'lidar_surface_elevation',
  'dem_surface_elevation',
  'surface_elevation_detection_frequency',
  'normalization_constant_uncertainty',
  'calibration_altitude_532',
  'featurefinderqc',
  'number_layers_found',
  'surface_wind_speed',
  'layer_top_altitude',
  'layer_base_altitude',
  'layer_base_extended',
  'layer_top_pressure',
  'midlayer_pressure',
  'layer_base_pressure',
  'layer_top_temperature',
  'midlayer_temperature',
  'layer_base_temperature',
  'opacity_flag',
  'horizontal_averaging',
  'attenuated_backscatter_statistics_532',
  'integrated_attenuated_backscatter_532',
  'integrated_attenuated_backscatter_uncertainty_532',
  'attenuated_backscatter_statistics_1064',
  'integrated_attenuated_backscatter_1064',
  'integrated_attenuated_backscatter_uncertainty_1064',
  'volume_depolarization_ratio_statistics',
  'integrated_volume_depolarization_ratio',
  'integrated_volume_depolarization_ratio_uncertainty',
  'attenuated_total_color_ratio_statistics',
  'integrated_attenuated_total_color_ratio',
  'integrated_attenuated_total_color_ratio_uncertainty',
  'overlying_integrated_attenuated_backscatter_532',
  'layer_iab_qa_factor',
  'feature_classification_flags',
  'extinctionqc_532',
  'extinctionqc_1064',
  'cad_score',
  'measured_two_way_transmittance_532',
  'measured_two_way_transmittance_uncertainty_532',
  'two_way_transmittance_measurement_region',
  'feature_optical_depth_532',
  'feature_optical_depth_uncertainty_532',
  'initial_532_lidar_ratio',
  'final_532_lidar_ratio',
  'lidar_ratio_532_selection_method',
  'layer_effective_532_multiple_scattering_factor',
  'integrated_particulate_depolarization_ratio',
  'integrated_particulate_depolarization_ratio_uncertainty',
  'particulate_depolarization_ratio_statistics',
  'feature_optical_depth_1064',
  'feature_optical_depth_uncertainty_1064',
  'initial_1064_lidar_ratio',
  'final_1064_lidar_ratio',
  'lidar_ratio_1064_selection_method',
  'layer_effective_1064_multiple_scattering_factor',
  'integrated_particulate_color_ratio',
  'integrated_particulate_color_ratio_uncertainty',
  'particulate_color_ratio_statistics',
  'relative_humidity',
  'single_shot_cloud_cleared_fraction'
);

my @_l2_05kmapro_variables = (
##'latitude',
##'longitude',
  'profile_time',
##'profile_utc_time',
  'day_night_flag',
  'column_optical_depth_cloud_532',
  'column_optical_depth_cloud_uncertainty_532',
  'column_optical_depth_aerosols_532',
  'column_optical_depth_aerosols_uncertainty_532',
  'column_optical_depth_stratospheric_532',
  'column_optical_depth_stratospheric_uncertainty_532',
  'column_optical_depth_aerosols_1064',
  'column_optical_depth_aerosols_uncertainty_1064',
  'column_optical_depth_stratospheric_1064',
  'column_optical_depth_stratospheric_uncertainty_1064',
  'column_feature_fraction',
  'column_integrated_attenuated_backscatter_532',
  'column_iab_cumulative_probability',
  'tropopause_height',
  'tropopause_temperature',
  'temperature',
  'pressure',
  'molecular_number_density',
  'relative_humidity',
  'surface_elevation_statistics',
  'surface_winds',
  'samples_averaged',
  'aerosol_layer_fraction',
  'cloud_layer_fraction',
  'atmospheric_volume_description',
  'total_backscatter_coefficient_532',
  'total_backscatter_coefficient_uncertainty_532',
  'perpendicular_backscatter_coefficient_532',
  'perpendicular_backscatter_coefficient_uncertainty_532',
  'particulate_depolarization_ratio_profile_532',
  'particulate_depolarization_ratio_uncertainty_532',
  'extinction_coefficient_532',
  'extinction_coefficient_uncertainty_532',
  'aerosol_multiple_scattering_profile_532',
  'backscatter_coefficient_1064',
  'backscatter_coefficient_uncertainty_1064',
  'extinction_coefficient_1064',
  'extinction_coefficient_uncertainty_1064',
  'aerosol_multiple_scattering_profile_1064'
);

my @_l2_05kmcpro_variables = (
##'latitude',
##'longitude',
  'profile_time',
##'profile_utc_time',
  'day_night_flag',
  'column_optical_depth_cloud_532',
  'column_optical_depth_cloud_uncertainty_532',
  'column_optical_depth_aerosols_532',
  'column_optical_depth_aerosols_uncertainty_532',
  'column_optical_depth_stratospheric_532',
  'column_optical_depth_stratospheric_uncertainty_532',
  'column_optical_depth_aerosols_1064',
  'column_optical_depth_aerosols_uncertainty_1064',
  'column_optical_depth_stratospheric_1064',
  'column_optical_depth_stratospheric_uncertainty_1064',
  'column_feature_fraction',
  'column_integrated_attenuated_backscatter_532',
  'column_iab_cumulative_probability',
  'tropopause_height',
  'tropopause_temperature',
  'temperature',
  'pressure',
  'molecular_number_density',
  'relative_humidity',
  'surface_elevation_statistics',
  'surface_winds',
  'samples_averaged',
  'aerosol_layer_fraction',
  'cloud_layer_fraction',
  'atmopsheric_volume_description',
  'total_backscatter_coefficient_532',
  'total_backscatter_coefficient_uncertainty_532',
  'perpendicular_backscatter_coefficient_532',
  'perpendicular_backscatter_coefficient_uncertainty_532',
  'particulate_depolarization_ratio_profile_532',
  'particulate_depolarization_ratio_uncertainty_532',
  'extinction_coefficient_532',
  'extinction_coefficient_uncertainty_532',
  'cloud_multiple_scattering_profile_532',
  'ice_water_content_profile',
  'ice_water_content_profile_uncertainty',
);

my @_l2_05kmclay_variables = (
  'profile_id',
##'latitude',
##'longitude',
  'profile_time',
##'profile_utc_time',
  'day_night_flag',
  'off_nadir_angle',
  'solar_zenith_angle',
  'solar_azimuth_angle',
  'scattering_angle',
  'parallel_column_reflectance_532',
  'parallel_column_reflectance_uncertainty_532',
  'parallel_column_reflectance_rms_variation_532',
  'perpendicular_column_reflectance_532',
  'perpendicular_column_reflectance_uncertainty_532',
  'perpendicular_column_reflectance_rms_variation_532',
  'column_integrated_attenuated_backscatter_532',
  'column_iab_cumulative_probability',
  'column_optical_depth_cloud_532',
  'column_optical_depth_cloud_uncertainty_532',
  'column_optical_depth_aerosols_532',
  'column_optical_depth_aerosols_uncertainty_532',
  'column_optical_depth_stratospheric_532',
  'column_optical_depth_stratospheric_uncertainty_532',
  'column_optical_depth_aerosols_1064',
  'column_optical_depth_aerosols_uncertainty_1064',
  'column_optical_depth_stratospheric_1064',
  'column_optical_depth_stratospheric_uncertainty_1064',
  'column_feature_fraction',
  'tropopause_height',
  'tropopause_temperature',
  'igbp_surface_type',
  'nsidc_surface_type',
  'lidar_surface_elevation',
  'dem_surface_elevation',
  'surface_elevation_detection_frequency',
  'normalization_constant_uncertainty',
  'featurefinderqc',
  'calibration_altitude_532',
  'number_layers_found',
  'layer_top_altitude',
  'layer_base_altitude',
  'layer_base_extended',
  'layer_top_pressure',
  'midlayer_pressure',
  'layer_base_pressure',
  'layer_top_temperature',
  'midlayer_temperature',
  'layer_base_temperature',
  'opacity_flag',
  'horizontal_averaging',
  'single_shot_cloud_cleared_fraction',
  'attenuated_backscatter_statistics_532',
  'integrated_attenuated_backscatter_532',
  'integrated_attenuated_backscatter_uncertainty_532',
  'attenuated_backscatter_statistics_1064',
  'integrated_attenuated_backscatter_1064',
  'integrated_attenuated_backscatter_uncertainty_1064',
  'volume_depolarization_ratio_statistics',
  'integrated_volume_depolarization_ratio',
  'integrated_volume_depolarization_ratio_uncertainty',
  'attenuated_total_color_ratio_statistics',
  'integrated_attenuated_total_color_ratio',
  'integrated_attenuated_total_color_ratio_uncertainty',
  'overlying_integrated_attenuated_backscatter_532',
  'layer_iab_qa_factor',
  'feature_classification_flags',
  'extinctionqc_532',
  'cad_score',
  'measured_two_way_transmittance_532',
  'measured_two_way_transmittance_uncertainty_532',
  'two_way_transmittance_measurement_region',
  'feature_optical_depth_532',
  'feature_optical_depth_uncertainty_532',
  'initial_532_lidar_ratio',
  'final_532_lidar_ratio',
  'lidar_ratio_532_selection_method',
  'layer_effective_532_multiple_scattering_factor',
  'integrated_particulate_depolarization_ratio',
  'integrated_particulate_depolarization_ratio_uncertainty',
  'particulate_depolarization_ratio_statistics',
  'cirrus_shape_parameter',
  'cirrus_shape_parameter_uncertainty',
  'cirrus_shape_parameter_invalid_points',
  'ice_water_path',
  'ice_water_path_uncertainty'
);

my @_l2_333mclay_variables = (
  'profile_id',
##'latitude',
##'longitude',
  'profile_time',
##'profile_utc_time',
  'day_night_flag',
  'off_nadir_angle',
  'solar_zenith_angle',
  'solar_azimuth_angle',
  'scattering_angle',
  'spacecraft_position',
  'parallel_column_reflectance_532',
  'parallel_column_reflectance_uncertainty_532',
  'perpendicular_column_reflectance_532',
  'perpendicular_column_reflectance_uncertainty_532',
  'column_integrated_attenuated_backscatter_532',
  'column_iab_cumulative_probability',
  'tropopause_height',
  'tropopause_temperature',
  'igbp_surface_type',
  'nsidc_surface_type',
  'lidar_surface_elevation',
  'dem_surface_elevation',
  'number_layers_found',
  'layer_top_altitude',
  'layer_base_altitude',
  'layer_top_pressure',
  'midlayer_pressure',
  'layer_base_pressure',
  'layer_top_temperature',
  'midlayer_temperature',
  'layer_base_temperature',
  'attenuated_backscatter_statistics_532',
  'integrated_attenuated_backscatter_532',
  'integrated_attenuated_backscatter_uncertainty_532',
  'attenuated_backscatter_statistics_1064',
  'integrated_attenuated_backscatter_1064',
  'integrated_attenuated_backscatter_uncertainty_1064',
  'volume_depolarization_ratio_statistics',
  'integrated_volume_depolarization_ratio',
  'integrated_volume_depolarization_ratio_uncertainty',
  'attenuated_total_color_ratio_statistics',
  'integrated_attenuated_total_color_ratio',
  'integrated_attenuated_total_color_ratio_uncertainty',
  'overlying_integrated_attenuated_backscatter_532',
  'layer_iab_qa_factor',
  'feature_classification_flags'
);

my @_l2_vfm_variables = (
##'latitude',
##'longitude',
  'profile_time',
##'profile_utc_time',
  'day_night_flag',
  'land_water_mask',
  'spacecraft_position',
  'feature_classification_flags'
);

my @sources = (
  'l1',
  'l2_05kmapro',
  'l2_05kmcpro',
  'l2_01kmclay',
  'l2_05kmalay',
  'l2_05kmclay',
  'l2_333mclay',
  'l2_vfm'
);

my %metadata = (
  'l1' => {
    'variables'    => \@_l1_variables
  },
  'l2_05kmapro' => {
    'variables'    => \@_l2_05kmapro_variables
  },
  'l2_05kmcpro' => {
    'variables'    => \@_l2_05kmcpro_variables
  },
  'l2_01kmclay' => {
    'variables'    => \@_l2_01kmclay_variables
  },
  'l2_05kmalay' => {
    'variables'    => \@_l2_05kmalay_variables
  },
  'l2_05kmclay' => {
    'variables'    => \@_l2_05kmclay_variables
  },
  'l2_333mclay' => {
    'variables'    => \@_l2_333mclay_variables
  },
  'l2_vfm' => {
    'variables'    => \@_l2_vfm_variables
  }
);


# Parsed from the URL query string:

my $query_string  = ''; # The entire parsed query string to forward.
my $service       = ''; # wcs.
my $version       = ''; # 1.0.0.
my $request       = ''; # getcapabilities or describecoverage or getcoverage.
my $source        = ''; # E.g, 'l1'.
my $variable      = ''; # total_attenuated_backscatter_532, ...
my $format        = ''; # xdr, ascii, netcdf, original.
my $compress      = ''; # 1 = | gzip -c otherwise don't compress (default).
my $time          = ''; # E.g., 2006-07-05t00:00:00z/2006-07-09t23:59:59z.
my $bbox          = ''; # E.g., -125,25,-65,50,0,0.
my $minimum_cad   = ''; # Minimum accepted CAD score. E.g., 30.
my $maximum_uncertainty = ''; # Maximum accepted abs uncertainty. E.g., 99.
my $regrid        = ''; # E.g., nearest, mean, weighted.
my $regrid_aggregate = ''; # E.g., none, all, daily.
my $lambert       = ''; # E.g., 33,45,-97,40.
my $stereographic = ''; # E.g., -98,90,45.
my $mercator      = ''; # E.g., -98.
my $lonlat        = '';
my $ellipsoid     = ''; # E.g., 6370997,6370997.
my $grid          = ''; # E.g., 268,259,-420000,-1716000,12000,12000.
my $levels        = ''; # E.g,22,2,10000,1.0,...,0.0,9.81,287.04,50,290,100000.
my $data_product  = ''; # E.g, 'CAL_LID_L1'.
my $data_version  = ''; # E.g, '3.00'.


################################## ROUTINES ##################################


main();


sub main {

  my $result = 0;

  if ( parse_url() ) {
    my $command = "$wget_command '$server_path$query_string'";
    $result = execute_command( $command );
  }

  $result = 1 - $result; # UNIX: zero is success, non-zero is failure.
  debug( "exit result = $result" );
  exit $result;
}


# Parse URL parameters into variables.

sub parse_url {
  use CGI qw/ untaint /;     # Load Safe untainting CGI routines.
  $CGI::DISABLE_UPLOADS = 1; # Disable uploads.
  $CGI::POST_MAX = 1024;     # Limit posts to 1024 bytes.
  my $query = new CGI;       # Parse QUERY_STRING.
  %ENV = ();                 # Unset all environment variables.
  my @names = $query->param; # Extract names of parameters.
  my $count = @names;
  my $result = 0;
  debug( "@names\n$count" );

  for ( my $parameter = 0; $parameter < $count; ++$parameter) {
    $_ = $names[ $parameter ];                # $_ is tainted.
    s/[^A-Za-z]/_/go;                         # Untaint $_.
    my $option = $_;                          # $option is untainted.
    $_ = $query->param( $option );            # $_ is tainted.
    s/[^\w\-.,:\/]/_/go;                      # Untaint $_.
    my $value = $_;                           # $value is untainted.
    my $lowercase_option = lc( $option );
    my $lowercase_value  = lc( $value );
    debug( "$lowercase_option $lowercase_value" );

    if ( $parsers{ $lowercase_option } ) {
      $result = $parsers{ $lowercase_option }->( $lowercase_value );
    } else {
      print STDERR "\nInvalid option #$parameter\n";
      $result = 0;
    }

    if ( ! $result ) {
      $parameter = $count; # Finish looping.
    } else {

      # Must print a header for httpd to strip-off:

      if ( $lowercase_option eq 'format' ) {
        my $type = $lowercase_value;
        print "Content-type: $content_types{$type}; charset=iso-8859-1\n\n";
      }

if ( lc( $option ) ne 'maximum_uncertainty' ) { # TEMP HACK
      $query_string .= '&' . $option . '=' . $value;
}
    }
  }

  # Must print a header for httpd to strip-off:

  if ( $format eq '' ) {
    print "Content-type: text/plain; charset=iso-8859-1\n\n";
  }

  $result = $result && required_options_specified();
  return $result;
}



# Parse service option.

sub parse_service_option {
  my $value = shift;
  my $result =
    parse_option( $service, $value, 'SERVICE', 'wcs kill killall sleep' );
  return $result;
}



# Parse version option.

sub parse_version_option {
  my $value = shift;
  my $result = parse_option( $version, $value, 'VERSION', '1.0.0' );
  return $result;
}



# Parse request option.

sub parse_request_option {
  my $value = shift;
  my $result =
    parse_option( $request, $value, 'REQUEST',
                  'getcoverage getcapabilities describecoverage getmetadata' );
  return $result;
}



# Parse format option:

sub parse_format_option {
  my $value = shift;
  my $result = parse_option($format, $value, 'FORMAT',
               'xdr ascii netcdf-coards netcdf-ioapi original' );
  return $result;
}



# Parse coverage option.

sub parse_coverage_option {
  my $value = shift;
  my $result = 0;
  my $found = 0;

  if ( $variable ne '' ) {
    print STDERR "\nRedundant COVERAGE option\n";
  } else {
    my @parts = split( /\./, $value );
    my $part_count = @parts;

    if ( $part_count == 1 ) {
      $source = 'l1';
      $variable = $value;
    } else {
      $source   = $parts[ 0 ];
      $variable = $parts[ 1 ];
    }

    my $source_metadata = $metadata{ $source };

    if ( $source_metadata ) {
      my $variables = $source_metadata->{ variables };
      $found = grep { /^$variable$/ } @$variables;
    }
  }

  if ( $found == 0 || ! parse_data_product( $source ) ) {
    print STDERR "\nInvalid COVERAGE option\n";
  } else {
    $result = 1;
  }

  return $result;
}



# Parse time option.

sub parse_time_option {
  my $value = shift;
  my $result = 0;

  if ( $time ne '' ) {
    print STDERR "\nRedundant TIME option\n";
  } else {
    $time = $value;
    my $is_valid = is_valid_time( $time );

    if ( ! $is_valid ) {
      print STDERR "\nInvalid TIME option\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse bbox option.

sub parse_bbox_option {
  my $value = shift;
  my $result = 0;

  if ( $bbox ne '' ) {
    print STDERR "\nRedundant BBOX option\n";
  } else {
    $bbox = $value;
    my @bounds = split( /,/, $bbox );
    my $bounds_count = @bounds;

    if ( $bounds_count != 4 && $bounds_count != 6 ) {
      print STDERR "\nInvalid BBOX option (requires 4 or 6 numbers).\n";
    } elsif ( ! in_range( $bounds[ 0 ], -180.0, 180.0 ) ) {
      print STDERR "\nInvalid BBOX option (1st number)\n";
    } elsif ( ! in_range( $bounds[ 1 ], -90.0, 90.0 ) ) {
      print STDERR "\nInvalid BBOX option (2nd number)\n";
    } elsif ( ! in_range( $bounds[ 2 ], $bounds[ 0 ], 180.0 ) ) {
      print STDERR "\nInvalid BBOX option (3rd number)\n";
    } elsif ( ! in_range( $bounds[ 3 ], $bounds[ 1 ], 90.0 ) ) {
      print STDERR "\nInvalid BBOX option (4th number)\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse compress option.

sub parse_compress_option {
  my $value = shift;
  my $result = 0;

  if ( $compress ne '' ) {
    print STDERR "\nRedundant COMPRESS option\n";
  } else {
    $compress = $value;
    my $is_valid = $compress == 0 || $compress == 1;

    if ( ! $is_valid ) {
      print STDERR "\nInvalid COMPRESS option (requires 0 or 1)\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse regrid option:

sub parse_regrid_option {
  my $value = shift;
  my $result = parse_option( $regrid, $value, 'REGRID',
                             'nearest mean weighted' );
  return $result;
}



# Parse regrid_aggregate option:

sub parse_regrid_aggregate_option {
  my $value = shift;
  my $result = parse_option( $regrid_aggregate, $value, 'REGRID_AGGREGATE',
                             'none all daily' );
  return $result;
}



# Parse lambert option.

sub parse_lambert_option {
  my $value = shift;
  my $result = 0;

  if ( $lambert ne '' ) {
    print STDERR "\nRedundant LAMBERT option\n";
  } else {
    $lambert = $value;
    my @values = split( /,/, $value );
    my $count = @values;

    if ( $count != 4 ) {
      print STDERR "\nInvalid LAMBERT option (requires 4 numbers)\n";
    } elsif ( ! in_range( $values[ 0 ], -89.0, 89.0 ) ) {
      print STDERR "\nInvalid LAMBERT option (1st number)\n";
    } elsif ( ! in_range( $values[ 1 ], -89.0, 89.0 ) ) {
      print STDERR "\nInvalid LAMBERT option (2nd number)\n";
    } elsif ( ! in_range( $values[ 2 ], -180.0, 180.0 ) ) {
      print STDERR "\nInvalid LAMBERT option: (3rd number)'\n";
    } elsif ( ! in_range( $values[ 3 ], -89.0, 89.0 ) ) {
      print STDERR "\nInvalid LAMBERT option:  (4th number)\n";
    } elsif ( $values[ 0 ] > $values[ 1 ] ) {
      print STDERR "\nInvalid LAMBERT option: (require 1st > 2nd number)\n";
    } elsif ( $values[ 0 ] > 0.0 && $values[ 1 ] < 0.0 ) {
      print STDERR "\nInvalid LAMBERT option: (require 1st and 2nd same sign)\n";
    } elsif ( $values[ 0 ] < 0.0 && $values[ 1 ] > 0.0 ) {
      print STDERR "\nInvalid LAMBERT option: (require 1st and 2nd same sign)\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse stereographic option.

sub parse_stereographic_option {
  my $value = shift;
  my $result = 0;

  if ( $stereographic ne '' ) {
    print STDERR "\nRedundant STEREOGRAPHIC option\n";
  } else {
    $stereographic = $value;
    my @values = split( /,/, $value );
    my $count = @values;

    if ( $count != 3 ) {
      print STDERR "\nInvalid STEREOGRAPHIC option (require 3 numbers)\n";
    } elsif ( ! in_range( $values[ 0 ], -180.0, 180.0 ) ) {
      print STDERR "\nInvalid STEREOGRAPHIC option: (require 1st in [-180, 180])\n";
    } elsif ( ! in_range( $values[ 1 ], -90.0, 90.0 ) ) {
      print STDERR "\nInvalid STEREOGRAPHIC option: (require 2nd in [-90, 90])\n";
    } elsif ( ! in_range( $values[ 2 ], -90.0, 90.0 ) ) {
      print STDERR "\nInvalid STEREOGRAPHIC option: (require 3rd in [-90, 90])\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse mercator option.

sub parse_mercator_option {
  my $value = shift;
  my $result = 0;

  if ( $mercator ne '' ) {
    print STDERR "\nRedundant MERCATOR option\n";
  } else {
    $mercator = $value;
    my @values = split( /,/, $value );
    my $count = @values;

    if ( $count != 1 ) {
      print STDERR "\nInvalid MERCATOR option (require 1 number)\n";
    } elsif ( ! in_range( $values[ 0 ], -180.0, 180.0 ) ) {
      print STDERR "\nInvalid MERCATOR option (require number in [-180, 180])\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse lonlat option.

sub parse_lonlat_option {
  my $value = shift;
  my $result = 0;

  if ( $lonlat ne '' ) {
    print STDERR "\nRedundant LONLAT option\n";
  } else {
    $lonlat = 1;
    $result = 1;
  }

  return $result;
}



# Parse ellipsoid option.

sub parse_ellipsoid_option {
  my $value = shift;
  my $result = 0;

  if ( $ellipsoid ne '' ) {
    print STDERR "\nRedundant ELLIPSOID option\n";
  } else {
    $ellipsoid = $value;
    my @values = split( /,/, $value );
    my $count = @values;

    if ( $count != 1 && $count != 2 ) {
      print STDERR "\nInvalid ELLIPSOID option (require 1 or 2 numbers)\n";
    } elsif ( ! in_range( $values[ 0 ], 1.0, 1e10 ) ) {
      print STDERR "\nInvalid ELLIPSOID option (1st number)\n";
    } elsif ( $count == 2 ) {

      if ( ! in_range( $values[ 1 ], $values[ 0 ], 1e10 ) ) {
        print STDERR "\nInvalid ELLIPSOID option: (2nd number)\n";
      } else {
        $result = 1;
      }
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse grid option.

sub parse_grid_option {
  my $value = shift;
  my $result = 0;

  if ( $grid ne '' ) {
    print STDERR "\nRedundant GRID option\n";
  } else {
    $grid = $value;
    my @values = split( /,/, $value );
    my $count = @values;

    if ( $count != 6 ) {
      print STDERR "\nInvalid GRID option (require 6 numbers)\n";
    } elsif ( $values[ 0 ] < 1 ) {
      print STDERR "\nInvalid GRID option (1st number)\n";
    } elsif ( $values[ 1 ] < 1 ) {
      print STDERR "\nInvalid GRID option (2nd number)\n";
    } elsif ( ! in_range( $values[ 2 ], -1e10, 1e10 ) ) {
      print STDERR "\nInvalid GRID option (3rd number)\n";
    } elsif ( ! in_range( $values[ 3 ], -1e10, 1e10 ) ) {
      print STDERR "\nInvalid GRID option (4th number)\n";
    } elsif ( ! in_range( $values[ 4 ], 0.01, 1e10 ) ) {
      print STDERR "\nInvalid GRID option (5th number)\n";
    } elsif ( ! in_range( $values[ 5 ], 0.01, 1e10 ) ) {
      print STDERR "\nInvalid GRID option (6th number)\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse levels option.

sub parse_levels_option {
  my $value = shift;
  my $result = 0;

  if ( $levels ne '' ) {
    print STDERR "\nRedundant LEVELS option\n";
  } else {
    $levels = $value;
    my @values = split( /,/, $value );
    my $count = @values;

    if ( $count != 3 + $values[ 0 ] + 1 + 5 ) {
      print STDERR "\nInvalid LEVELS option (count)\n";
    } elsif ( ! in_range( $values[ 0 ], 1, 100 ) ) {
      print STDERR "\nInvalid LEVELS option (1st number)\n";
    } elsif ( ! in_range( $values[ 1 ], 1, 7 ) ) {
      print STDERR "\nInvalid LEVELS option (2nd number)\n";
    } elsif ( ! in_range( $values[ 2 ], 0.0, 1e8 ) ) {
      print STDERR "\nInvalid LEVELS option (3rd number)\n";
    } else {

      # Ensure level values are ordered decreasing if sigma-p else increasing:

      my $end = $count - 5;
      my $minimum = $lonlat ne '' ?   -500.0 : 0.0;
      my $maximum = $lonlat ne '' ? 100000.0 : 1.0;
      my $ok = 0;

      for ( my $index = 3; $index < $end; ++$index ) {
        my $level_value = $values[ $index ];
        $ok = in_range( $level_value, $minimum, $maximum );

        if ( ! $ok ) {
          print STDERR "\nInvalid LEVELS option (number $index)\n";
          $index = $count;
        } elsif ( $lonlat ne '' ) {
          $minimum = $level_value;
        } else {
          $maximum = $level_value;
        }
      }

      # Check last parameter constants:

      if ( $ok == 1 ) {
        my $index = $count - 5;

        if ( ! in_range( $values[ $index ], 0.01, 1e2 ) ) {
          print STDERR "\nInvalid LEVELS option\n";
        } elsif ( ! in_range( $values[ $index + 1 ], 0.01, 1e4 ) ) {
          print STDERR "\nInvalid LEVELS option\n";
        } elsif ( ! in_range( $values[ $index + 2 ], 0.01, 1e4 ) ) {
          print STDERR "\nInvalid LEVELS option\n";
        } elsif ( ! in_range( $values[ $index + 3 ], 0.01, 1e4 ) ) {
          print STDERR "\nInvalid LEVELS option\n";
        } elsif ( ! in_range( $values[ $index + 4 ], 0.01, 1e6 ) ) {
          print STDERR "\nInvalid LEVELS option\n";
        } else {
          $result = 1;
        }
      }
    }
  }

  return $result;
}



# Parse minimum_cad option.

sub parse_minimum_cad_option {
  my $value = shift;
  my $result = 0;

  if ( $minimum_cad ne '' ) {
    print STDERR "\nRedundant MINIMUM_CAD option\n";
  } else {
    $minimum_cad = $value;
    my $is_valid = in_range( $minimum_cad, 0.0, 100.0 );

    if ( ! $is_valid ) {
      print STDERR "\nInvalid MINIMUM_CAD option\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse maximum_uncertainty option.

sub parse_maximum_uncertainty_option {
  my $value = shift;
  my $result = 0;

  if ( $maximum_uncertainty ne '' ) {
    print STDERR "\nRedundant MAXIMUM_UNCERTAINTY option\n";
  } else {
    $maximum_uncertainty = $value;
    my $is_valid = in_range( $maximum_uncertainty, 0.0, 100.0 );

    if ( ! $is_valid ) {
      print STDERR "\nInvalid MAXIMUM_UNCERTAINTY option\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse $source to yield $data_product.

sub parse_data_product {
  my $value = shift;
  my $result =
    parse_option( $data_product, $value, 'DATA_PRODUCT',
                  'l1 ' .
                  'l2_05kmapro ' .
                  'l2_05kmcpro ' .
                  'l2_05kmalay ' .
                  'l2_05kmclay ' .
                  'l2_01kmclay ' .
                  'l2_333mclay ' .
                  'l2_vfm ' );
  # Make upper/mixed-case for SQL:
  $data_product = 'CAL_LID_' . uc( $data_product );
  $data_product =~ s/KM/km/;   # E.g., CAL_LID_L2_05kmCLay.
  $data_product =~ s/PRO/Pro/; # E.g., CAL_LID_L2_05kmAPro.
  $data_product =~ s/LAY/Lay/; # E.g., CAL_LID_L2_05kmCLay.
  $data_product =~ s/3MC/3mC/; # E.g., CAL_LID_L2_333mCLay.
  return $result;
}



# Parse data_version option.
# Allow any real number form '3.10' or even '3-10'.

sub parse_data_version_option {
  my $value = shift;
  my $result = 0;

  if ( $data_version ne '' ) {
    print STDERR "\nRedundant DATA_VERSION option: '$value'\n";
  } elsif ( $value =~ m#^([0-9]+[0-9\.\-]+)$# )
  {
    $data_version = $value;
    $result = 1;
  }

  return $result;
}



# Check that all required 'options' have been specified:

sub required_options_specified {
  my $result = 0;

  if ( $service eq 'kill' || $service eq 'killall' ) {
    $result = 1;
  } elsif ( $service eq '' ) {
    print STDERR "\nMissing option: 'SERVICE'\n";
  } elsif ( $version eq '' ) {
    print STDERR "\nMissing option: 'VERSION'\n";
  } elsif ( $request eq '' ) {
    print STDERR "\nMissing option: 'REQUEST'\n";
  } elsif ( $request eq 'getcoverage' ) {

    if ( $variable eq '' ) {
      print STDERR "\nMissing option: 'COVERAGE'\n";
    } elsif ( $format eq '' ) {
      print STDERR "\nMissing option: 'FORMAT'\n";
    } elsif ( $time eq '' ) {
      print STDERR "\nMissing option: 'TIME'\n";
    } elsif ( $bbox eq '' ) {
      print STDERR "\nMissing option: 'BBOX'\n";
    } else {
      my $regrid_count = 0;
      $regrid_count += $regrid ne '';
      $regrid_count += $ellipsoid ne '';
      $regrid_count += $grid ne '';
      my $projection_count = 0;
      $projection_count += $lambert ne '';
      $projection_count += $stereographic ne '';
      $projection_count += $mercator ne '';
      $projection_count += $lonlat ne '';        

      $result =
        $regrid_count == 0 && $projection_count == 0 ||
        $regrid_count == 3 && $projection_count == 1;

      if ( ! $result ) {
        print STDERR "\nInvalid options: 'REGRID/";
        print STDERR "LAMBERT/STEREOGRAPHIC/MERCATOR/LONLAT/";
        print STDERR "GRID/ELLIPSOID'\n";
      }
    }
  } else {
    $result = 1;
  }

  return $result;
}



############################### HELPER ROUTINES ##############################



# debug( $message );

sub debug {
  my $message = shift;

  if ( $debugging ) {
    print STDERR "\n$message\n";
  }
}



# Execute command and echo its output to STDOUT. E.g., execute_command( 'ls' );

sub execute_command {
  my $command = shift;
  my $result = 0;
  my $the_pipe = 0;

  # Untaint command (match expression is arbitrary as far as -T is concerned):

  if ( $command =~ m#^(/[\w-]+/[\w \$'\(\)\+,\-\./:;=>&?@\\_`{|}]+)$# ) {
    $command = $1; # Re-assign first match, which is enough to satisfy -T.
    debug( "$0 executing command = $command" );
    %ENV = (); # Unset all environment variables prior to popen.
    # Complicated, supposedly safer way to open a readable pipe to command:
    my $pid = open( the_pipe, "-|" );

    if ( ! defined( $pid ) ) {
      die "Couldn't open pipe to subprocess";
    } elsif ( $pid ) { # Parent process.

      while ( <the_pipe> ) {
        print;
      }

      close( the_pipe ) or die $!;
      $result = ! $?;
    } else { # Child process.
      exec( $command ) or die "can't exec program: $!";
    }
  } else {
    print STDERR "\n$0: command contains invalid characters.\n";
  }

  return $result;
}



# my $result = parse_option( $option, $value, $option_name, $valid_values );
# my $result = parse_option( $variable, $value, 'COVERAGE', 'ozone pm25' );

sub parse_option {
  my ( $option, $value, $option_name, $valid_values ) = @_;
  my $result = 0;

  if ( $option ne '' ) {
    print STDERR "\nRedundant $option_name option\n";
  } else {
    $result = index( " $valid_values ", " $value " ) != -1;

    if ( $result ) {
      $_[ 0 ] = $value;
    } else {
      print STDERR "\nInvalid $option_name option\n";
    }
  }

  return $result;
}



# my $ok = in_range( $value, $minimum, $maximum );

sub in_range {
  my ( $value, $minimum, $maximum ) = @_;
  my $result = $value >= $minimum && $value <= $maximum;
  return $result;
}



# my $is_valid = is_valid_time( '2001-08-26t20:00:00z/2001-08-27t23:59:59z' );

sub is_valid_time {
  my $time = shift;
  my $result = 0;
  my $length = length( $time );

  if ( $length == 41 ) {
    $result = is_valid_time( substr( $time, 0, 20 ) );
    $result = $result && substr( $time, 20, 1 ) eq '/';
    $result = $result && is_valid_time( substr( $time, 21, 20 ) );
    $result = $result && substr( $time, 0, 20 ) le substr( $time, 21, 20 );
  } elsif ( $length == 20 ) {
    my $year   = substr( $time, 0, 4 );
    my $month  = substr( $time, 5, 2 );
    my $day    = substr( $time, 8, 2 );
    my $hour   = substr( $time, 11, 2 );
    my $minute = substr( $time, 14, 2 );
    my $second = substr( $time, 17, 2 );
    $result = in_range( $year, 1900, 3000 );
    $result = $result && in_range( $month, 1, 12 );
    $result = $result && in_range( $day, 1, days_in_month( $year, $month ) );
    $result = $result && in_range( $hour, 0, 23 );
    $result = $result && in_range( $minute, 0, 59 );
    $result = $result && in_range( $second, 0, 59 );
    $result = $result && substr( $time, 4, 1 ) eq '-';
    $result = $result && substr( $time, 7, 1 ) eq '-';
    $result = $result && substr( $time, 10, 1 ) eq 't';
    $result = $result && substr( $time, 13, 1 ) eq ':';
    $result = $result && substr( $time, 16, 1 ) eq ':';
    $result = $result && substr( $time, 19, 1 ) eq 'z';
  }

  return $result;
}



# my $leap = is_leap_year( $year );

sub is_leap_year {
  my $year = shift;
  my $result = $year % 4 == 0 && ! ( $year % 100 == 0 && ! $year % 400 == 0 );
  return $result;
}



# my $days = days_in_month( $year, $month );

sub days_in_month {
  my $year  = shift;
  my $month = shift;

  # 30 days hath September, April, June and November...

  my @days_per_month = ( 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 );
  my $result = $days_per_month[ $month - 1 ];

  if ( $month == 2 ) {

    if ( is_leap_year( $year ) ) {
      ++$result;
    }
  }

  return $result;
}



# my $capped = capitalized( $all_lowercase );

sub capitalized {
  my $word = shift;
  my @words = split( /_/, $word );
  my $count = @words;
  my $result = uc( substr( $words[ 0 ], 0, 1 ) ) . substr( $words[ 0 ], 1 );

  for ( my $index = 1; $index < $count; ++$index ) {
    $result .= '_' . uc( substr( $words[ $index ], 0, 1 ) )
                   . substr( $words[ $index ], 1 );
  }

  return $result;
}



