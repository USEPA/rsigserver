#!/usr/bin/perl -wT

##############################################################################
# PURPOSE: cmaqserver - Serve CMAQ data, subsetted by date/time range,
#          variable, and longitude-latitude box, in ASCII, XDR, NetCDF-COARDS,
#          NetCDF-IOAPI formats for use by other prograzms (e.g., via wget).
#
# NOTES:   Server is WCS-compliant:
#          https://www.opengeospatial.org/standards/wcs
#          https://datafed.net/xs/OpenGIS/wcs/1.0.0/
#          and modeled after a similar webserver application:
#          https://webapps.datafed.net/ogc_EPA.wsfl
#
#          Launches the C program CMAQSubset which streams the data on STDOUT.
#
#          Example usage:
#
#          wget -q -T 0 -O - 'https://ofmpub.epa.gov/rsig/cmaqserver?\
#                     SERVICE=wcs&\
#                     VERSION=1.0.0&\
#                     REQUEST=GetCoverage&\
#                     COVERAGE=pm25&\
#                     TIME=2002-08-26T00:00:00Z/2002-08-31T23:59:59Z&\
#                     BBOX=-90,28,-80,32,1,1&\
#                     FORMAT=ascii'
#
# HISTORY: 2006/08/03, plessel.todd@epa.gov, 1-919-541-5500, TSSMS=cws
#
# STATUS:  reviewed, tested.
##############################################################################


use strict;
package main;
$| = 1; # Turn off output buffering so messages appear in correct order.
alarm( 3600 ); # Kill process after 1 hour. Legitimate usage could be an hour!
# Restrict PATH and ENV. (But before popen, ENV is cleared!)
delete @ENV{ 'PATH', 'IFS', 'CDPATH', 'ENV', 'BASH_ENV' };


############################## TUNABLE CONSTANTS #############################


my $debugging = 0; # 1 = print debug messages to STDERR logs/error_log.
my $valid_oaqps_key = "YOUR_KEY_HERE";

# Server where this program is installed:

my $server_path = 'https://YOUR_WEBSERVER_HOST/cgi-bin';

# Internal EPA server where the data and subset program are installed:

my $bindir     = '/code/bin/Linux.x86_64';
my $subsetter  = "$bindir/CMAQSubset";
my $xdrconvert = "$bindir/XDRConvert";
my $compressor = "$bindir/gzip -c -1";

# Output messages when REQUEST=GetMetadata.
# Print this message first:

my $metadata_content = '
US EPA CMAQ modeled atmospheric data accessed using RSIG.
https://www.epa.gov/cmaq
RSIG: https://www.epa.gov/rsig
';

# If FORMAT=original then print this message second:

my $metadata_content_original = '
The list of original data files are shown below.
';

# Else FORMAT!=original then print this message second:

my $metadata_content_processed = '
Data processing was done using the RSIG programs CMAQSubset and XDRConvert.
CMAQSubset is used to subset (by variable, lon-lat box and time range)
and reorganize/reformat and filter the data.
XDRConvert is optionally used to reformat the data to other file formats.
The list of original data files and the RSIG command used to process them
are shown below.
';

# Query string parsing routine dispatch table:


my %parsers = (
  'service'  => \&parse_service_option,
  'version'  => \&parse_version_option,
  'request'  => \&parse_request_option,
  'coverage' => \&parse_coverage_option,
  'time'     => \&parse_time_option,
  'bbox'     => \&parse_bbox_option,
  'format'   => \&parse_format_option,
  'compress' => \&parse_compress_option,
  'nolonlats' => \&parse_nolonlats_option,
  'noelevation' => \&parse_noelevation_option,
  'aggregate' => \&parse_aggregate_option,
  'integrate' => \&parse_integrate_option,
  'key'       => \&parse_key_option,
  'check_key' => \&parse_check_key_option
);


# Webserver content types for each output format:

my %content_types = (
  'ascii'         => 'text/plain',
  'xdr'           => 'application/octet-stream',
  'netcdf-coards' => 'application/netcdf',
  'netcdf-ioapi'  => 'application/netcdf',
  'original'      => 'application/octet-stream'
);

# Full URL path to this program:

my @pathed_program_parts = split( /\//, $0 );
my $program_name = $pathed_program_parts[ @pathed_program_parts - 1 ];
my $program = "$server_path/$program_name";


# Variable and unit lists:

# CDC/PHASE CMAQ data 2002-2006 12km East:

my @_cdc_east_aconc_variables = ( 'o3' );

my @_cdc_east_aconc_units = ( 'ppmV' );

my @_cdc_east_aconc_descriptions = ( 'Ozone.' );


my @_cdc_east_pm25_variables = ( 'pm25' );

my @_cdc_east_pm25_units = ( 'ug/m3' );

my @_cdc_east_pm25_descriptions = (
  'Particulate matter (aerosols) not more than 2.5 microns in diameter.'
);

# CDC/PHASE CMAQ data 2007-2023 12km CONUS:

my @_cdc_conus_aconc_variables = ( 'o3' );

my @_cdc_conus_aconc_units = ( 'ppmV' );

my @_cdc_conus_aconc_descriptions = ( 'Ozone.' );


my @_cdc_conus_pm25_variables = ( 'pm25' );

my @_cdc_conus_pm25_units = ( 'ug/m3' );

my @_cdc_conus_pm25_descriptions = (
  'Particulate matter (aerosols) not more than 2.5 microns in diameter.'
);



# EQUATES CONUS:

my @_equates_conus_aconc_variables = (
  'AIR_DENS',
  'RH',
  'SFC_TMP',
  'PBLH',
  'SOL_RAD',
  'precip',
  'WSPD10',
  'WDIR10',
  'ALD2',
  'BENZENE',
  'CO',
  'ETH',
  'ETHA',
  'FORM',
  'H2O2',
  'HNO3',
  'HNO3_UGM3',
  'HONO',
  'HOX',
  'OH',
  'ISOP',
  'N2O5',
  'NH3',
  'NH3_UGM3',
  'NHX',
  'NO',
  'NO2',
  'NOX',
  'PMF_NO3_PPB',
  'NTR',
  'PANS',
  'NOY',
  'O3',
  'SO2',
  'SO2_UGM3',
  'TERP',
  'TOL',
  'XYL',
  'AFEJ',
  'PMF_AL',
  'PMF_SI',
  'PMF_TI',
  'PMF_CA',
  'PMF_MG',
  'PMF_K',
  'PMF_MN',
  'PMF_SOIL_IMPV',
  'PMF_HPLUS',
  'PMC_NA',
  'PMC_MG',
  'PMC_K',
  'PMC_CA',
  'PMF_CL',
  'PMF_EC',
  'PMF_NA',
  'PMF_NO3',
  'PMC_NO3',
  'TNO3',
  'PMF_NH4',
  'PMC_NH4',
  'PMF_SO4',
  'PMC_SO4',
  'APOCI',
  'APOCJ',
  'PMF_POC',
  'APOMI',
  'APOMJ',
  'PMF_POA',
  'ASOCI',
  'ASOCJ',
  'PMF_SOC',
  'ASOMI',
  'ASOMJ',
  'PMF_SOA',
  'AOCI',
  'AOCJ',
  'PMF_OC',
  'AOMI',
  'AOMJ',
  'PMF_OM',
  'AORGAJ',
  'AORGBJ',
  'PMF_CLDGLY',
  'PMF_OMOC',
  'PMAIT_MASS',
  'PMACC_MASS',
  'PMC_MASS',
  'PMF_MASS',
  'PM_MASS',
  'AUNSPEC1IJ',
  'PMF_NCOM',
  'AUNSPEC2IJ',
  'PMAMS_CL',
  'PMAMS_NH4',
  'PMAMS_NO3',
  'PMAMS_OM',
  'PMAMS_SO4',
  'PM1',
  'PM25_HP',
  'PM25_CL',
  'PM25_EC',
  'PM25_NA',
  'PM25_MG',
  'PM25_K',
  'PM25_CA',
  'PM25_NH4',
  'PM25_NO3',
  'PM25_OC',
  'PM25_OM',
  'PM25_SOIL',
  'PM25_SO4',
  'PM25',
  'PM25_UNSPEC1',
  'PM10',
  'PM25to10_CL',
  'PM25to10_NA',
  'PM25to10_NH4',
  'PM25to10_NO3',
  'PM25to10_SO4',
  'PM25to10'
);

my @_equates_conus_aconc_units = (
  'kg_m-3',
  '%',
  'C',
  'm',
  'W_m-2',
  'cm',
  'm_s-1',
  'deg',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ug_m-3',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ug_m-3',
  'ug_m-3',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ug_m-3',
  'ppbV',
  'ppbV',
  'ppbV',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'umol_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ugC_m-3',
  'ugC_m-3',
  'ugC_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ugC_m-3',
  'ugC_m-3',
  'ugC_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ugC_m-3',
  'ugC_m-3',
  'ugC_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_ug-1',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ugC_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ugC_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3'
);

my @_equates_conus_aconc_descriptions = (
  'Air Density',
  'Relative Humidity',
  'Surface Temperature',
  'Planetary Boundary Layer Height',
  'Solar Radiation',
  'Precipitation',
  '10-m Wind Direction',
  '10-m Wind Speed',
  'Acetaldehyde',
  'Benzene',
  'Carbon Monoxide',
  'Ethene',
  'Ethane',
  'Formaldehyde',
  'Hydrogen Peroxide',
  'Nitric Acid',
  'Nitric Acid (concentration)',
  'Nitrous Acid',
  'Hydroxyl Radical (OH) + Hydroperoxy Radical (HO2)',
  'Hydroxyl Radical',
  'Isoprene',
  'Dinitrogen Pentoxide',
  'Ammonia',
  'Ammonia (concentration)',
  'Inorganic Nitrogen (ammonia gas plus particulate ammonium)',
  'Nitric Oxide',
  'Nitrogen Dioxide',
  'Nitrogen Oxides (NO + NO2)',
  'Fine Particle Nitrate (mixing ratio)',
  'Monofunctional Organic Nitrates (NTR1) + Multifunctional Organic Nitrates (NTR2)',
  'Peroxyacylnitrate (PAN) + peroxyacylnitrates with 3 or morecarbons (PANX) + pero',
  'Total Reative Nitrogen (NO + NO2 + HNO3 + PAN + other organic nitrates)',
  'Ozone',
  'Sulfur Dioxide',
  'Sulfur Dioxide (concentration)',
  'Monoterpenes',
  'Toluene and Other Monoalkyl Aromatics',
  'Xylene and Other Polyalkyl Aromatics except Naphthalene',
  'Fine Particle Iron PMF_FE',
  'Fine Particle Aluminum',
  'Fine Particle Silicon',
  'Fine Particle Titanium',
  'Fine Particle Calcium',
  'Fine Particle Magnesium',
  'Fine Particle Potassium',
  'Fine Particle Manganese',
  'Fine Particle Lumped Crustal Species calculated with IMPROVE method',
  'Fine Particle Hydronium Ion',
  'Coarse Particle Sodium',
  'Coarse Particle Magnesium',
  'Coarse Particle Potassium',
  'Coarse Particle Calcium',
  'Fine Particle Chloride',
  'Fine Particle Elemental Carbon',
  'Fine Particle Sodium',
  'Fine Particle Nitrate',
  'Coarse Particle Nitrate',
  'Total Nitrate',
  'Fine Particle Ammonium',
  'Coarse Particle Ammonium',
  'Fine Particle Sulfate',
  'Coarse Particle Sulfate',
  'ALVPO1I[1]/1.39 + ASVPO1I[1]/1.32 + ASVPO2I[1]/1.26  +APOCI[1]',
  'ALVPO1J[1]/1.39 + ASVPO1J[1]/1.32 + ASVPO2J[1]/1.26  +ASVPO3J[1]/1.21 + AIVPO1J[',
  'Fine Particle Primary Organic Carbon',
  'ALVPO1I[1] + ASVPO1I[1] + ASVPO2I[1] + APOCI[1]      +APNCOMI[1]',
  'ALVPO1J[1] + ASVPO1J[1] + ASVPO2J[1] + APOCJ[1]      +ASVPO3J[1] + AIVPO1J[1]  +',
  'Fine Particle Primary Organic Matter',
  'ALVOO1I[1]/2.27 + ALVOO2I[1]/2.06   +ASVOO1I[1]/1.88 + ASVOO2I[1]/1.73',
  'AISO1J[1]/2.20  + AISO2J[1]/2.23  + AISO3J[1]/2.80  +AMT1J[1]/1.67   + AMT2J[1]/',
  'Fine Particle Secondary Organic Carbon',
  'ALVOO1I[1] + ALVOO2I[1] + ASVOO1I[1] + ASVOO2I[1]',
  '+AISO1J[1]+ AISO2J[1]  + AISO3J[1]               +AMT1J[1]   + AMT2J[1]   + AMT3',
  'Fine Particle Secondary Organic Matter',
  'APOCI[0]  + ASOCI[0]',
  'APOCJ[0]  + ASOCJ[0]',
  'Fine Particle Organic Carbon (C only)',
  'APOMI[0]  + ASOMI[0]',
  'APOMJ[0]  + ASOMJ[0]',
  'Fine Particle Organic Matter (C,H,O,N, etc)',
  'AAVB1J[1]+AAVB2J[1]+AAVB3J[1]+AAVB4J[1]+AOLGAJ[1]',
  'AISO1J[1] + AISO2J[1] + AISO3J[1]             +AMT1J[1]  + AMT2J[1]  + AMT3J[1]',
  'Glyoxal and methylglyoxal SOA produced in cloud water',
  'Fine Particle OM/OC Ratio',
  'Aitken Particle Mass',
  'Accumulation Particle Mass',
  'Coarse Particle Mass',
  'Fine Particle Mass',
  'Total Particle Mass',
  'ATOTIJ[0] - (ASOILJ[0] + ANO3IJ[0] + ASO4IJ[0] + ANH4IJ[0]  +AOCIJ[0]  + AECIJ[0',
  'Fine Particle Non-Carbon Organic Mass (OM - OC)',
  'AUNSPEC1IJ[0] - ANCOMIJ[0]',
  'ACLI[1]*AMSAT[3]+ACLJ[1]*AMSAC[3]+ACLK[1]*AMSCO[3]',
  'ANH4I[1]*AMSAT[3]+ANH4J[1]*AMSAC[3]+ANH4K[1]*AMSCO[3]',
  'ANO3I[1]*AMSAT[3]+ANO3J[1]*AMSAC[3]+ANO3K[1]*AMSCO[3]',
  'AOMI[0]*AMSAT[3]+AOMJ[0]*AMSAC[3]',
  'ASO4I[1]*AMSAT[3]+ASO4J[1]*AMSAC[3]+ASO4K[1]*AMSCO[3]',
  'PM1 (sharp 1 micrometer cutoff computed using modeled size distribution)',
  'Hydronium Ion (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Chloride  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Elemental Carbon  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Sodium  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Magnesium  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Potassium  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Calcium  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Ammonium  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Nitrate  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Organic Carbon  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Organic Matter  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Lumped Crustal Species (sharp cutoff computed using modeled size distribut',
  'PM2.5 Sulfate  (sharp cutoff computed using modeled size distribution)',
  'Total PM2.5 (sharp cutoff computed using modeled size distribution)',
  'Other PM2.5 Species (Total - (CL+EC+NA+NH4+NO3+OC+SOIL+SO4))',
  'Particulate Matter up to 10 micrometers in Size',
  'Coarse Mode Chlorine (Total CL - PM25_CL)',
  'Coarse Mode Sodium (Total NA - PM25_NA)',
  'Coarse Mode Ammonium (Total NH4 - PM25_NH4)',
  'Coarse Mode Nitrate (Total Particle NO3 - PM25_NO3)',
  'Coarse Mode Sulfate (Total Particle SO4 - PM25_SO4)',
  'Coarse Mode Particulate Matter (Total PM - PM25_TOT)'
);



my @_equates_conus_conc_variables = (
  'AIR_DENS',
  'PRES',
  'TEMP',
  'QV',
  'ZH',
  'ZF',
  'CO',
  'FORM',
  'NH3',
  'NO',
  'NO2',
  'O3',
  'SO2',
  'ISOP',
  'GLY',
  'PMF_NO3_PPB',
  'NTR',
  'PANS',
  'NOY',
  'PMF_SOIL_IMPV',
  'PMF_EC',
  'PMF_NO3',
  'PMF_NH4',
  'PMF_SO4',
  'PMF_OC',
  'PMF_OM',
  'PMF_MASS'
);

my @_equates_conus_conc_units = (
  'kg_m-3',
  'Pa',
  'K',
  'kg_kg-1',
  'm',
  'm',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ugC_m-3',
  'ug_m-3',
  'ug_m-3'
);

my @_equates_conus_conc_descriptions = (
  'Air Density',
  'PRES[2]',
  'TA[2]',
  'QV[2]',
  'ZH[2]',
  'ZF[2]',
  'Carbon Monoxide',
  'Formaldehyde',
  'Ammonia',
  'Nitric Oxide',
  'Nitrogen Dioxide',
  'Ozone',
  'Sulfur Dioxide',
  'Isoprene',
  '1000.0*GLY[1]',
  'Fine Particle Nitrate (mixing ratio)',
  'Monofunctional Organic Nitrates (NTR1) + Multifunctional Organic Nitrates (NTR2)',
  'Peroxyacylnitrate (PAN) + peroxyacylnitrates with 3 or morecarbons (PANX) + pero',
  'Total Reative Nitrogen (NO + NO2 + HNO3 + PAN + other organic nitrates)',
  'Fine Particle Lumped Crustal Species calculated with IMPROVE method',
  'Fine Particle Elemental Carbon',
  'Fine Particle Nitrate',
  'Fine Particle Ammonium',
  'Fine Particle Sulfate',
  'Fine Particle Organic Carbon (C only)',
  'Fine Particle Organic Matter (C,H,O,N, etc)',
  'Fine Particle Mass'
);


my @_equates_conus_dep_variables = (
  'RT',
  'DD_OXN_NOX',
  'WD_OXN_NOX',
  'DD_OXN_TNO3',
  'WD_OXN_TNO3',
  'DD_OXN_PANT',
  'WD_OXN_PANT',
  'DD_OXN_ORGN',
  'WD_OXN_ORGN',
  'DD_OXN_OTHR',
  'WD_OXN_OTHR',
  'DRYDEP_OXN',
  'WETDEP_OXN',
  'TOTDEP_OXN',
  'DRYDEP_REDN',
  'WETDEP_REDN',
  'TOTDEP_REDN',
  'DRYDEP_N',
  'WETDEP_N',
  'TOTDEP_N',
  'DRYDEP_S',
  'WETDEP_S',
  'TOTDEP_S'
);

my @_equates_conus_dep_units = (
  'cm',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgS_ha-1',
  'kgS_ha-1',
  'kgS_ha-1'
);

my @_equates_conus_dep_descriptions = (
  'Precipitation',
  'Dry Deposition of NOX (NO, NO2)',
  'Wet Deposition of NOX (NO, NO2)',
  'Dry Deposition of Total Nitrate (HNO3, NO3)',
  'Wet Deposition of Total Nitrate (HNO3, NO3)',
  'Dry Depostion of PANs (PAN, PANX, OPAN)',
  'Wet Depostion of PANs (PAN, PANX, OPAN)',
  'Dry Deposition of Organic N (NTR1, NTR2, INTR)',
  'Wet Deposition of Organic N (NTR1, NTR2, INTR)',
  'Dry Deposition of Other Oxidized N (N2O5, HONO)',
  'Dry Deposition of Other Oxidized N (N2O5, HONO, PNA)',
  'Dry Deposition of Oxidized Nitrogen (NOX, TNO3, PANs, Org N, N205, HONO, PNA)',
  'Wet Deposition of Oxidized Nitrogen (NOX, TNO3, PANs, Org N, N205, HONO, PNA)',
  'Total (Dry + Wet) Deposition of Oxidized Nitrogen',
  'Dry Deposition of Reduced Nitorgen (NH4, NH3)',
  'Wet Deposition of Reduced Nitorgen (NH4, NH3)',
  'Total (Dry + Wet) Deposition of Reduced Nitrogen',
  'Dry Deposition of Nitrogen',
  'Wet Deposition of Nitrogen',
  'Total (Dry + Wet) Deposition of Nitrogen',
  'Dry Deposition of Sulfur',
  'Wet Deposition of Sulfur',
  'Total (Dry + Wet) Deposition of Sulfur'
);



my @_equates_conus_emis_variables = (
  'ACET',
  'ACROLEIN',
  'ALD2',
  'ALD2_PRIMARY',
  'ALDX',
  'BENZ',
  'BUTADIENE13',
  'CH4',
  'CH4_INV',
  'CL2',
  'CO',
  'CO2_INV',
  'ETH',
  'ETHA',
  'ETHY',
  'ETOH',
  'FORM',
  'FORM_PRIMARY',
  'HCL',
  'HONO',
  'IOLE',
  'ISOP',
  'IVOC',
  'KET',
  'MEOH',
  'N2O_INV',
  'NAPH',
  'NH3',
  'NH3_FERT',
  'NO',
  'NO2',
  'NVOL',
  'OLE',
  'PAL',
  'PAR',
  'PCA',
  'PCL',
  'PEC',
  'PFE',
  'PH2O',
  'PK',
  'PMC',
  'PMG',
  'PMN',
  'PMOTHR',
  'PNA',
  'PNCOM',
  'PNH4',
  'PNO3',
  'POC',
  'PRPA',
  'PSI',
  'PSO4',
  'PTI',
  'SO2',
  'SOAALK',
  'SULF',
  'TERP',
  'TOG_INV',
  'TOL',
  'UNK',
  'UNR',
  'VOC_INV',
  'XYLMN'
);

my @_equates_conus_emis_units = (
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'g/s',
  'moles/s',
  'moles/s',
  'g/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'g/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'g/s',
  'moles/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'moles/s',
  'g/s',
  'g/s',
  'g/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'g/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'g/s',
  'moles/s'
);

my @_equates_conus_emis_descriptions = (
  'Model species ACET',
  'Model species ACROLEIN',
  'Model species ALD2',
  'Model species ALD2_PRIMARY',
  'Model species ALDX',
  'Model species BENZ',
  'Model species BUTADIENE13',
  'Model species CH4',
  'Model species CH4_INV',
  'Model species CL2',
  'Model species CO',
  'Model species CO2_INV',
  'Model species ETH',
  'Model species ETHA',
  'Model species ETHY',
  'Model species ETOH',
  'Model species FORM',
  'Model species FORM_PRIMARY',
  'Model species HCL',
  'Model species HONO',
  'Model species IOLE',
  'Model species ISOP',
  'Model species IVOC',
  'Model species KET',
  'Model species MEOH',
  'Model species N2O_INV',
  'Model species NAPH',
  'Model species NH3',
  'Model species NH3_FERT',
  'Model species NO',
  'Model species NO2',
  'Model species NVOL',
  'Model species OLE',
  'Model species PAL',
  'Model species PAR',
  'Model species PCA',
  'Model species PCL',
  'Model species PEC',
  'Model species PFE',
  'Model species PH2O',
  'Model species PK',
  'Model species PMC',
  'Model species PMG',
  'Model species PMN',
  'Model species PMOTHR',
  'Model species PNA',
  'Model species PNCOM',
  'Model species PNH4',
  'Model species PNO3',
  'Model species POC',
  'Model species PRPA',
  'Model species PSI',
  'Model species PSO4',
  'Model species PTI',
  'Model species SO2',
  'Model species SOAALK',
  'Model species SULF',
  'Model species TERP',
  'Model species TOG_INV',
  'Model species TOL',
  'Model species UNK',
  'Model species UNR',
  'Model species VOC_INV',
  'Model species XYLMN'
 );



my @_equates_conus_integrated_variables = (
 'NO2_COLUMN',
 'CO_COLUMN',
 'SO2_COLUMN',
 'HCHO_COLUMN',
 'O3_COLUMN',
 'JNO2',
 'AOD550'
);

my @_equates_conus_integrated_units = (
  'petamolec_cm-2',
  'petamolec_cm-2',
  'petamolec_cm-2',
  'petamolec_cm-2',
  'DU',
  'min-1',
  '-'
);

my @_equates_conus_integrated_descriptions = (
  'NO2_COLUMN[1]',
  'CO_COLUMN[1]',
  'SO2_COLUMN[1]',
  'HCHO_COLUMN[1]',
  'TROPO_O3_COLUMN[1]',
  'JNO2[1]',
  'AOD_W550_ANGST[1]'
);



my @_equates_conus_metcro3d_variables = (
  'JACOBF',
  'JACOBM',
  'DENSA_J',
  'WHAT_JD',
  'TA',
  'QV',
  'PRES',
  'DENS',
  'ZH',
  'ZF',
  'QC',
  'QR',
  'QI',
  'QS',
  'QG'
);

my @_equates_conus_metcro3d_units = (
  'm',
  'm',
  'kg_m-2',
  'kg_m-1_s-1',
  'K',
  'kg_kg-1',
  'Pa',
  'kg_m-3',
  'm',
  'm',
  'kg_kg-1',
  'kg_kg-1',
  'kg_kg-1',
  'kg_kg-1',
  'kg_kg-1'
);

my @_equates_conus_metcro3d_descriptions = (
  'Jacobian at layer face scaled by MSFX2',
  'Jacobian at layer middle scaled by MSFX2',
  'J-weighted air density (dry) scaled by MSFX2',
  'J- and density weighted vert contravariant-W',
  'air temperature',
  'water vapor mixing ratio',
  'pressure',
  'density of air (dry)',
  'mid-layer height above ground',
  'full-layer height above ground',
  'Cloud water mixing ratio',
  'Rain water mixing ratio',
  'Ice mixing ratio',
  'Snow mixing ratio',
  'Graupel mixing ratio'
);



my @_equates_conus_metdot3d_variables = (
  'UWIND',
  'VWIND',
  'WIND' # Pseudo-variable implies all available wind vector components.
);

my @_equates_conus_metdot3d_units = (
  'm_s-1',
  'm_s-1',
  'm_s-1'
);

my @_equates_conus_metdot3d_descriptions = (
  'U-comp. of true wind at dot point',
  'V-comp. of true wind at dot point',
  'U,V-comp. of true wind at dot point'
);



my @_equates_conus_wwind_variables = (
  'W_VEL'
);

my @_equates_conus_wwind_units = (
  'm_s-1'
);

my @_equates_conus_wwind_descriptions = (
  'Derived vertical velocity component'
);



my @_equates_conus_lstaconc_variables = (
  'DAILY_O3MAX8',
  'DAILY_O3',
  'DAILY_CO',
  'DAILY_NO',
  'DAILY_NO2',
  'DAILY_SO2',
  'DAILY_CH2O',
  'DAILY_PM10',
  'DAILY_PM25',
  'DAILY_PM25_SO4',
  'DAILY_PM25_NO3',
  'DAILY_PM25_NH4',
  'DAILY_PM25_OC',
  'DAILY_PM25_EC'
);

my @_equates_conus_lstaconc_units = (
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3'
);

my @_equates_conus_lstaconc_descriptions = (
  'Local daily 8-hour maximum ozone.',
  'Local daily average ozone.',
  'Local daily average carbon monoxide.',
  'Local daily average nitrogen oxide.',
  'Local daily average nitrogen dioxide.',
  'Local daily average sulfur dioxide.',
  'Local daily average formaldehyde.',
  'Local daily average particulate matter up to 10 micrometers in size.',
  'Local daily average particulate matter up to 10 micrometers in size.',
  'Local daily average sulfate particulate matter up to 2.5 micrometers in size.',
  'Local daily average nitrate particulate matter up to 2.5 micrometers in size.',
  'Local daily average ammonium particulate matter up to 2.5 micrometers in size.',
  'Local daily average organic carbon particulate matter up to 2.5 micrometers in size.',
  'Local daily average elemental carbon particulate matter up to 2.5 micrometers in size.'
);



# EQUATES HEMI:

my @_equates_hemi_aconc_variables = (
  'PMF_AL',
  'PMF_CA',
  'PMC_CA',
  'PMF_CL',
  'PMF_EC',
  'AFEJ',
  'PMF_HPLUS',
  'AIR_DENS',
  'PMF_K',
  'PMC_K',
  'ALD2',
  'PMC_MG',
  'PMF_MG',
  'PMF_MN',
  'PMF_NA',
  'PMC_NA',
  'PMF_NCOM',
  'PMF_NH4',
  'PMC_NH4',
  'PMC_NO3',
  'PMF_NO3',
  'PMF_NO3_PPB',
  'PMF_OC',
  'PMF_OM',
  'PMF_OMOC',
  'PMF_CLDGLY',
  'PMF_POC',
  'PMF_POA',
  'PMF_SI',
  'PMC_SO4',
  'PMF_SO4',
  'PMF_SOC',
  'PMF_SOIL_IMPV',
  'PMF_SOA',
  'PMF_TI',
  'PM_MASS',
  'PMAIT_MASS',
  'PMC_MASS',
  'PMACC_MASS',
  'PMF_MASS',
  'BENZENE',
  'CO',
  'ETH',
  'ETHA',
  'FORM',
  'H2O2',
  'HNO3',
  'HNO3_UGM3',
  'HONO',
  'HOX',
  'ISOP',
  'N2O5',
  'NH3',
  'NH3_UGM3',
  'NHX',
  'NO',
  'NO2',
  'NOX',
  'NOY',
  'NTR',
  'O3',
  'OH',
  'PANS',
  'PBLH',
  'PM1',
  'PM10',
  'PM25_CA',
  'PM25_CL',
  'PM25_EC',
  'PM25_FRM',
  'PM25_HP',
  'PM25_K',
  'PM25_MG',
  'PM25_NA',
  'PM25_NH4',
  'PM25_NO3',
  'PM25_OC',
  'PM25_OM',
  'PM25_SO4',
  'PM25_SOIL',
  'PM25',
  'PM25_UNSPEC1',
  'PM25to10_CL',
  'PM25to10_NA',
  'PM25to10_NH4',
  'PM25to10_NO3',
  'PM25to10_SO4',
  'PM25to10',
  'PMF_FRM',
  'precip',
  'RH',
  'SFC_TMP',
  'SO2',
  'SO2_UGM3',
  'SOL_RAD',
  'TERP',
  'TNO3',
  'TOL',
  'WDIR10',
  'WSPD10',
  'XYL'
);

my @_equates_hemi_aconc_units = (
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'umol_m-3',
  'kg_m-3',
  'ug_m-3',
  'ug_m-3',
  'ppbV',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ppbV',
  'ugC_m-3',
  'ug_m-3',
  'ug_ug-1',
  'ug_m-3',
  'ugC_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ugC_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ug_m-3',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ug_m-3',
  'ug_m-3',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'm',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ugC_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'cm',
  '%',
  'C',
  'ppbV',
  'ug_m-3',
  'W_m-2',
  'ppbV',
  'ug_m-3',
  'ppbV',
  'deg',
  'm_s-1',
  'ppbV'
);

my @_equates_hemi_aconc_descriptions = (
  'Fine Particle Aluminum',
  'Fine Particle Calcium',
  'Coarse Particle Calcium',
  'Fine Particle Chloride',
  'Fine Particle Elemental Carbon',
  'Fine Particle Iron PMF_FE',
  'Fine Particle Hydronium Ion',
  'Air Density',
  'Fine Particle Potassium',
  'Coarse Particle Potassium',
  'Acetaldehyde',
  'Coarse Particle Magnesium',
  'Fine Particle Magnesium',
  'Fine Particle Manganese',
  'Fine Particle Sodium',
  'Coarse Particle Sodium',
  'Fine Particle Non-Carbon Organic Mass (OM - OC)',
  'Fine Particle Ammonium',
  'Coarse Particle Ammonium',
  'Coarse Particle Nitrate',
  'Fine Particle Nitrate',
  'Fine Particle Nitrate (mixing ratio)',
  'Fine Particle Organic Carbon (C only)',
  'Fine Particle Organic Matter (C,H,O,N, etc)',
  'Fine Particle OM/OC Ratio',
  'Glyoxal and methylglyoxal SOA produced in cloud water',
  'Fine Particle Primary Organic Carbon',
  'Fine Particle Primary Organic Matter',
  'Fine Particle Silicon',
  'Coarse Particle Sulfate',
  'Fine Particle Sulfate',
  'Fine Particle Secondary Organic Carbon',
  'Fine Particle Lumped Crustal Species calculated with IMPROVE method',
  'Fine Particle Secondary Organic Matter',
  'Fine Particle Titanium',
  'Total Particle Mass',
  'Aitken Particle Mass',
  'Coarse Particle Mass',
  'Accumulation Particle Mass',
  'Fine Particle Mass',
  'Benzene',
  'Carbon Monoxide',
  'Ethene',
  'Ethane',
  'Formaldehyde',
  'Hydrogen Peroxide',
  'Nitric Acid',
  'Nitric Acid (concentration)',
  'Nitrous Acid',
  'Hydroxyl Radical (OH) + Hydroperoxy Radical (HO2)',
  'Isoprene',
  'Dinitrogen Pentoxide',
  'Ammonia',
  'Ammonia (concentration)',
  'Inorganic Nitrogen (ammonia gas plus particulate ammonium)',
  'Nitric Oxide',
  'Nitrogen Dioxide',
  'Nitrogen Oxides (NO + NO2)',
  'Total Reative Nitrogen (NO + NO2 + HNO3 + PAN + other organic nitrates)',
  'Monofunctional Organic Nitrates (NTR1) + Multifunctional Organic Nitrates (NTR2)',
  'Ozone',
  'Hydroxyl Radical',
  'Peroxyacylnitrate (PAN) + peroxyacylnitrates with 3 or morecarbons (PANX) + pero',
  'Planetary Boundary Layer Height',
  'PM1 (sharp 1 micrometer cutoff computed using modeled size distribution)',
  'Particulate Matter up to 10 micrometers in Size',
  'PM2.5 Calcium  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Chloride  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Elemental Carbon  (sharp cutoff computed using modeled size distribution)',
  'FRM Equivalent PM2.5 (computed using modeled size distribution)',
  'Hydronium Ion (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Potassium  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Magnesium  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Sodium  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Ammonium  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Nitrate  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Organic Carbon  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Organic Matter  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Sulfate  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Lumped Crustal Species (sharp cutoff computed using modeled size distribut',
  'Total PM2.5 (sharp cutoff computed using modeled size distribution)',
  'Other PM2.5 Species (Total - (CL+EC+NA+NH4+NO3+OC+SOIL+SO4))',
  'Coarse Mode Chlorine (Total CL - PM25_CL)',
  'Coarse Mode Sodium (Total NA - PM25_NA)',
  'Coarse Mode Ammonium (Total NH4 - PM25_NH4)',
  'Coarse Mode Nitrate (Total Particle NO3 - PM25_NO3)',
  'Coarse Mode Sulfate (Total Particle SO4 - PM25_SO4)',
  'Coarse Mode Particulate Matter (Total PM - PM25_TOT)',
  'FRM Equivalent Particulate Matter (Fine Mode)',
  'Precipitation',
  'Relative Humidity',
  'Surface Temperature',
  'Sulfur Dioxide',
  'Sulfur Dioxide (concentration)',
  'Solar Radiation',
  'Monoterpenes',
  'Total Nitrate',
  'Toluene and Other Monoalkyl Aromatics',
  '10-m Wind Speed',
  '10-m Wind Direction',
  'Xylene and Other Polyalkyl Aromatics except Naphthalene'
);


my @_equates_hemi_conc_variables = (
  'AIR_DENS',
  'PRES',
  'TEMP',
  'QV',
  'ZH',
  'ZF',
  'CO',
  'FORM',
  'NH3',
  'NO2',
  'O3',
  'O3PV',
  'SO2',
  'PMF_SOIL_IMPV',
  'PMF_EC',
  'PMF_NO3',
  'PMF_NH4',
  'PMF_SO4',
  'PMF_OC',
  'PMF_OM',
  'PMF_MASS'
);

my @_equates_hemi_conc_units = (
  'kg_m-3',
  'Pa',
  'K',
  'kg_kg-1',
  'm',
  'm',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ug_m-3',
  'ugC_m-3',
  'ug_m-3',
  'ug_m-3'
);

my @_equates_hemi_conc_descriptions = (
  'Air Density',
  'PRES[2]',
  'TA[2]',
  'QV[2]',
  'ZH[2]',
  'ZF[2]',
  'Carbon Monoxide',
  'Formaldehyde',
  'Ammonia',
  'Nitrogen Dioxide',
  'Ozone',
  'Ozone PV',
  'Sulfur Dioxide',
  'Fine Particle Lumped Crustal Species calculated with IMPROVE method',
  'Fine Particle Elemental Carbon',
  'Fine Particle Nitrate',
  'Fine Particle Ammonium',
  'Fine Particle Sulfate',
  'Fine Particle Organic Carbon (C only)',
  'Fine Particle Organic Matter (C,H,O,N, etc)',
  'Fine Particle Mass'
);



my @_equates_hemi_dep_variables = (
  'RT',
  'DD_OXN_NOX',
  'WD_OXN_NOX',
  'DD_OXN_TNO3',
  'WD_OXN_TNO3',
  'DD_OXN_PANT',
  'WD_OXN_PANT',
  'DD_OXN_ORGN',
  'WD_OXN_ORGN',
  'DD_OXN_OTHR',
  'WD_OXN_OTHR',
  'DRYDEP_OXN',
  'WETDEP_OXN',
  'TOTDEP_OXN',
  'DRYDEP_REDN',
  'WETDEP_REDN',
  'TOTDEP_REDN',
  'DRYDEP_N',
  'WETDEP_N',
  'TOTDEP_N',
  'DRYDEP_S',
  'WETDEP_S',
  'TOTDEP_S'
);

my @_equates_hemi_dep_units = (
  'cm',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgN_ha-1',
  'kgS_ha-1',
  'kgS_ha-1',
  'kgS_ha-1'
);

my @_equates_hemi_dep_descriptions = (
  'Precipitation',
  'Dry Deposition of NOX (NO, NO2)',
  'Wet Deposition of NOX (NO, NO2)',
  'Dry Deposition of Total Nitrate (HNO3, NO3)',
  'Wet Deposition of Total Nitrate (HNO3, NO3)',
  'Dry Depostion of PANs (PAN, PANX, OPAN)',
  'Wet Depostion of PANs (PAN, PANX, OPAN)',
  'Dry Deposition of Organic N (NTR1, NTR2, INTR)',
  'Wet Deposition of Organic N (NTR1, NTR2, INTR)',
  'Dry Deposition of Other Oxidized N (N2O5, HONO)',
  'Dry Deposition of Other Oxidized N (N2O5, HONO, PNA)',
  'Dry Deposition of Oxidized Nitrogen (NOX, TNO3, PANs, Org N, N205, HONO, PNA)',
  'Wet Deposition of Oxidized Nitrogen (NOX, TNO3, PANs, Org N, N205, HONO, PNA)',
  'Total (Dry + Wet) Deposition of Oxidized Nitrogen',
  'Dry Deposition of Reduced Nitorgen (NH4, NH3)',
  'Wet Deposition of Reduced Nitorgen (NH4, NH3)',
  'Total (Dry + Wet) Deposition of Reduced Nitrogen',
  'Dry Deposition of Nitrogen',
  'Wet Deposition of Nitrogen',
  'Total (Dry + Wet) Deposition of Nitrogen',
  'Dry Deposition of Sulfur',
  'Wet Deposition of Sulfur',
  'Total (Dry + Wet) Deposition of Sulfur'
);



my @_equates_hemi_emis_variables = (
  'ACET',
  'ACROLEIN',
  'ALD2',
  'ALD2_PRIMARY',
  'ALDX',
  'BENZ',
  'BUTADIENE13',
  'CH4',
  'CH4_INV',
  'CL2',
  'CO',
  'CO2_INV',
  'ETH',
  'ETHA',
  'ETHY',
  'ETOH',
  'FORM',
  'FORM_PRIMARY',
  'HCL',
  'HONO',
  'IOLE',
  'ISOP',
  'IVOC',
  'KET',
  'MEOH',
  'N2O_INV',
  'NAPH',
  'NH3',
  'NH3_FERT',
  'NO',
  'NO2',
  'NVOL',
  'OLE',
  'PAL',
  'PAR',
  'PCA',
  'PCL',
  'PEC',
  'PFE',
  'PH2O',
  'PK',
  'PMC',
  'PMG',
  'PMN',
  'PMOTHR',
  'PNA',
  'PNCOM',
  'PNH4',
  'PNO3',
  'POC',
  'PRPA',
  'PSI',
  'PSO4',
  'PTI',
  'SO2',
  'SOAALK',
  'SULF',
  'TERP',
  'TOG_INV',
  'TOL',
  'UNK',
  'UNR',
  'VOC_INV',
  'XYLMN'
);

my @_equates_hemi_emis_units = (
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'g/s',
  'moles/s',
  'moles/s',
  'g/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'g/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'g/s',
  'moles/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'moles/s',
  'g/s',
  'g/s',
  'g/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'g/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'g/s',
  'moles/s'
);

my @_equates_hemi_emis_descriptions = (
  'Model species ACET',
  'Model species ACROLEIN',
  'Model species ALD2',
  'Model species ALD2_PRIMARY',
  'Model species ALDX',
  'Model species BENZ',
  'Model species BUTADIENE13',
  'Model species CH4',
  'Model species CH4_INV',
  'Model species CL2',
  'Model species CO',
  'Model species CO2_INV',
  'Model species ETH',
  'Model species ETHA',
  'Model species ETHY',
  'Model species ETOH',
  'Model species FORM',
  'Model species FORM_PRIMARY',
  'Model species HCL',
  'Model species HONO',
  'Model species IOLE',
  'Model species ISOP',
  'Model species IVOC',
  'Model species KET',
  'Model species MEOH',
  'Model species N2O_INV',
  'Model species NAPH',
  'Model species NH3',
  'Model species NH3_FERT',
  'Model species NO',
  'Model species NO2',
  'Model species NVOL',
  'Model species OLE',
  'Model species PAL',
  'Model species PAR',
  'Model species PCA',
  'Model species PCL',
  'Model species PEC',
  'Model species PFE',
  'Model species PH2O',
  'Model species PK',
  'Model species PMC',
  'Model species PMG',
  'Model species PMN',
  'Model species PMOTHR',
  'Model species PNA',
  'Model species PNCOM',
  'Model species PNH4',
  'Model species PNO3',
  'Model species POC',
  'Model species PRPA',
  'Model species PSI',
  'Model species PSO4',
  'Model species PTI',
  'Model species SO2',
  'Model species SOAALK',
  'Model species SULF',
  'Model species TERP',
  'Model species TOG_INV',
  'Model species TOL',
  'Model species UNK',
  'Model species UNR',
  'Model species VOC_INV',
  'Model species XYLMN'
 );



my @_equates_hemi_integrated_variables = (
 'NO2_COLUMN',
 'CO_COLUMN',
 'SO2_COLUMN',
 'HCHO_COLUMN',
 'O3_COLUMN',
 'JNO2',
 'AOD550'
);

my @_equates_hemi_integrated_units = (
  'petamolec_cm-2',
  'petamolec_cm-2',
  'petamolec_cm-2',
  'petamolec_cm-2',
  'DU',
  'min-1',
  '-'
);

my @_equates_hemi_integrated_descriptions = (
  'NO2_COLUMN[1]',
  'CO_COLUMN[1]',
  'SO2_COLUMN[1]',
  'HCHO_COLUMN[1]',
  'TROPO_O3_COLUMN[1]',
  'JNO2[1]',
  'AOD_W550_ANGST[1]'
);



my @_equates_hemi_metcro3d_variables = (
  'JACOBF',
  'JACOBM',
  'DENSA_J',
  'WHAT_JD',
  'TA',
  'QV',
  'PRES',
  'DENS',
  'ZH',
  'ZF',
  'PV',
  'QC',
  'QR',
  'QI',
  'QS',
  'QG'
);

my @_equates_hemi_metcro3d_units = (
  'm',
  'm',
  'kg_m-2',
  'kg_m-1_s-1',
  'K',
  'kg_kg-1',
  'Pa',
  'kg_m-3',
  'm',
  'm',
  'm2_K_kg-1_s-1', # This is scaled by 10^something... (truncated in the file).
  'kg_kg-1',
  'kg_kg-1',
  'kg_kg-1',
  'kg_kg-1',
  'kg_kg-1'
);

my @_equates_hemi_metcro3d_descriptions = (
  'Jacobian at layer face scaled by MSFX2',
  'Jacobian at layer middle scaled by MSFX2',
  'J-weighted air density (dry) scaled by MSFX2',
  'J- and density weighted vert contravariant-W',
  'air temperature',
  'water vapor mixing ratio',
  'pressure',
  'density of air (dry)',
  'mid-layer height above ground',
  'full-layer height above ground',
  'Potential vorticity',
  'Cloud water mixing ratio',
  'Rain water mixing ratio',
  'Ice mixing ratio',
  'Snow mixing ratio',
  'Graupel mixing ratio'
);



my @_equates_hemi_metdot3d_variables = (
  'UWIND',
  'VWIND',
  'WIND' # Pseudo-variable implies all available wind vector components.
);

my @_equates_hemi_metdot3d_units = (
  'm_s-1',
  'm_s-1',
  'm_s-1'
);

my @_equates_hemi_metdot3d_descriptions = (
  'U-comp. of true wind at dot point',
  'V-comp. of true wind at dot point',
  'U,V-comp. of true wind at dot point'
);



my @_equates_hemi_wwind_variables = (
  'W_VEL'
);

my @_equates_hemi_wwind_units = (
  'm_s-1'
);

my @_equates_hemi_wwind_descriptions = (
  'Derived vertical velocity component'
);



# DISCOVER CONUS:

my @_discover_conus_aconc_variables = (
  'aacd', 'aalj', 'aalkj', 'abnz1j', 'abnz2j', 'abnz3j', 'acaj',
  'acli', 'aclj', 'aclk', 'acors', 'aeci', 'aecj', 'afej',
  'ah2oi', 'ah2oj', 'ah2ok', 'aiso1j', 'aiso2j', 'aiso3j', 'akj', 'ald2',
  'aldx', 'amgj', 'amnj', 'anai', 'anaj', 'anh4i', 'anh4j', 'anh4k',
  'ano3i', 'ano3j', 'ano3k', 'aolgaj', 'aolgbj', 'aorgcj',
  'aothri', 'aothrj', 'apncomi', 'apncomj', 'apoci', 'apocj', 'aseacat',
  'asij', 'aso4i', 'aso4j', 'aso4k', 'asoil', 'asqtj', 'atij',
  'atol1j', 'atol2j', 'atol3j', 'atrp1j', 'atrp2j',
  'axyl1j', 'axyl2j', 'axyl3j', 'benzene', 'benzro2', 'bnzhrxn', 'bnznrxn',
  'c2o3', 'cao2', 'cat1', 'cl', 'cl2', 'clo', 'co', 'cres', 'crn2',
  'crno', 'cro', 'cron', 'crpx', 'cxo3', 'eth', 'etha', 'etoh',
  'facd', 'fmcl', 'form', 'h2o2', 'hcl', 'hco3', 'hno3', 'ho2', 'hocl',
  'hono', 'iole', 'isop', 'isoprxn', 'ispd', 'meo2', 'meoh', 'mepx', 'mgly',
  'n2o5', 'nh3', 'no', 'no2', 'no3', 'ntr', 'numacc', 'numatkn', 'numcor',
  'o', 'o1d', 'o3', 'oh', 'ole', 'opan', 'open', 'opo3', 'pacd',
  'pan', 'panx', 'par', 'pna', 'rooh', 'ror', 'sesq', 'sesqrxn', 'so2',
  'srfacc', 'srfatkn', 'srfcor', 'sulf', 'sulrxn',
  'sv_alk', 'sv_bnz1', 'sv_bnz2', 'sv_iso1', 'sv_iso2', 'sv_sqt',
  'sv_tol1', 'sv_tol2', 'sv_trp1', 'sv_trp2', 'sv_xyl1', 'sv_xyl2', 'terp',
  'to2', 'tol', 'tolhrxn', 'tolnrxn', 'tolro2', 'trprxn', 'xo2', 'xo2n',
  'xyl', 'xylhrxn', 'xylnrxn', 'xylro2'
);

my @_discover_conus_aconc_units = (
  'ppmV', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3',
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3',
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ppmV', 'ppmV', 'ug/m3',
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3',
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3',
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3',
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3',
  'ug/m3', 'ug/m3', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV',
  'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV',
  'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV',
  'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV',
  'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV',
  'ppmV', 'ppmV', 'number/m3', 'number/m3', 'number/m3', 'ppmV', 'ppmV',
  'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV',
  'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'm2/m3', 'm2/m3',
  'm2/m3', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV',
  'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV',
  'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV',
  'ppmV'
);

my @_discover_conus_aconc_descriptions = (
  'Acetic And Higher Carboxylic Acids',
  'Aerosol Aluminum Accumulation Mode',
  'SOA from alkanes',
  'Low-volatility SOA from benzene',
  'High-volatility SOA from benzene',
  'Non-volatile SOA from benzene (low-NOx)',
  'Aerosol Calcium Accumulation Mode',
  'Aerosol Chlorine Aitken Mode',
  'Aerosol Chlorine Accumulation Mode',
  'Aerosol Chlorine Coarse Mode',
  'Aerosol Course Mode Anthropogenic Mass',
  'Aerosol Elemental Carbon Mass Aitken Mode',
  'Aerosol Elemental Carbon Mass Accumulation Mode',
  'Aerosol Iron Elemental Accumulation Mode',
  'Aerosol Water Aitken Mode',
  'Aerosol Water Accumulation Mode',
  'Aerosol Water Coarse Mode',
  'High-volatility SOA from isoprene',
  'Low-volatility SOA from isoprene',
  'Acid-enhanced SOA from isoprene',
  'Counter species for computing SOA from ISOP',
  'High Melecular Weight Aldehydes',
  'C3+ Aldehydes',
  'Aerosol Magnesium Aitken Mode',
  'Aerosol Manganese Accumulation Mode',
  'Aerosol Sodium Aitken Mode',
  'Aerosol Sodium Accumulation Mode',
  'Aerosol Ammonium Aitken Mode',
  'Aerosol Ammonium Accumulation Mode',
  'Aerosol Ammonium Coarse Mode',
  'Aerosol Nitrate Aitken Mode',
  'Aerosol Nitrate Accumulation Mode',
  'Aerosol Nitrate Coarse Mode',
  'Oligomers from semi-volatile anthropogenic SOA species',
  'Oligomers from semi-volatile biogenic SOA species',
  'SOA from in-cloud oxidation of dialdehydes',
  'Aerosol Other Aitken Mode',
  'Aerosol Other Accumulation Mode',
  'Aerosol primary non-carbon organic matter Aitken Mode',
  'Aerosol primary non-carbon organic matter Accumulation Mode',
  'Aerosol particle oxidation catalysts Aitken Mode',
  'Aerosol particle oxidation catalysts Accumulation Mode',
  'Aerosol sea salt',
  'Aerosol silicon Accumulation Mode',
  'Aerosol Sulfate Aitken Mode',
  'Aerosol Sulfate Accumulation Mode',
  'Aerosol Sulfate Coase Mode',
  'Aerosol coarse mode soil-derived mass',
  'SOA from sesquiterpenes',
  'Aerosol titanium Accumulation Mode',
  'Low-volatility SOA from mono-substituted aromatics',
  'High-volatility SOA from mono-substituted aromatics',
  'Non-volatile SOA from mono-substituted aromatics (low-NOx)',
  'Low-volatility SOA from monoterpenes',
  'High-volatility SOA from monoterpenes',
  'Low-volatility SOA from poly-substituted aromatics',
  'High-volatility SOA from poly-substituted aromatics',
  'Non-volatile SOA from poly-substituted aromatics (low-NOx)',
  'Benzene',
  'First generation SOA intermediate from benzene oxidation',
  'Counter species for computing SOA from BENZENE under low NOx conditions',
  'Counter species for computing SOA from BENZENE under high NOx conditions',
  'Peroxy Radical from Methyl-catechol',
  'Acetyl Peroxy Radical',
  'Methyl-catechol',
  'Chlorides',
  'Elemental Chlorine',
  'Hypoclorite',
  'Carbon Monoxide',
  'Cresol And Higher Molecular Weight Phenois',
  'Chromium nitrate',
  'Alkoxy Radical',
  'Methylphenoxy Radical',
  'nitrocresol',
  'C3+ Peroxyacetyl Radicals',
  'Nitro-cresol from hydroperoxide',
  'Higher acylperoxy radical',
  'Ethene',
  'Ethane',
  'Ethanol',
  'Formic Acid',
  'Formyl Chloride',
  'Formaldehyde',
  'Peroxide',
  'Hydrocloric Acid',
  'Radical formed when formaldehyde reacts with HO2',
  'Nitric Acid',
  'Hydroperoxy Radical',
  'Hypochlorous acid',
  'Nitrous Acid',
  'Internal Olefins',
  'Isoprene',
  'Counter species for computing SOA from ISOP',
  'Isoprene Product',
  'Methyl Peroxy Radical',
  'Methanol',
  'Methyl Hydroperoxide',
  'Methylglyoxal And Other Aeromatic Products',
  'Dinitrate Pentoxide',
  'Ammonia',
  'Nitrogen Oxide',
  'Nitrogen Dioxide',
  'Nitrogen Trioxide',
  'Nitrate',
  'Accumulation Mode Number',
  'Aitken Mode Number',
  'Coarse Mode Number',
  'Oxygen Atom In The O3(P) Electronic State',
  'Oxygen Atom In The O1(D) Electronic State',
  'Ozone',
  'Hydroxyl Radical',
  'Terminal Olefin Carbon Bond',
  'Peroxyacetyl nitrate from Peroxy radical from Aromatic ring opening product',
  'Aromatic Ring Opening Product',
  'Peroxy radical from Aromatic ring opening product',
  'Peroxyacetic And Higher Peroxycarboxylic Acids',
  'Peroxy Acetyl Nitrate',
  'C3+ PANs',
  'Paraffin Carbon Bond',
  'Peroxynitric Acid',
  'C2+ Organic Hydroperoxide',
  'Secondary Alkoxy Radical',
  'Sesquiterpene',
  'Counter species for computing SOA from SESQ',
  'Sulfur Dioxide',
  'Accumulation Mode Surface Area',
  'Aitken Mode Surface Area',
  'Coarse Mode Surface Area',
  'Sulfuric Acid',
  'Counter species for computing aerosols from SULF',
  'Semi-volatile alkanes',
  'Semi-volatile SOA from benzene1',
  'Semi-volatile SOA from benzene2',
  'Semi-volatile SOA from isoprene1',
  'Semi-volatile SOA from isoprene2',
  'Semi-volatile SOA from sesquiterpene',
  'Semi-volatile SOA from Toluene1',
  'Semi-volatile SOA from Toluene2',
  'Semi-volatile SOA from Terpene1',
  'Semi-volatile SOA from Terpene2',
  'Semi-volatile SOA from Xylene1',
  'Semi-volatile SOA from Xylene2',
  'Terpene',
  'Toluene-Hydroxyl Radical Adduct',
  'Toluene And Other Monoalkyl Aromatics',
  'tolhrxn?',
  'tolnrxn?',
  'tolro2?',
  'trprxn?',
  'Peroxy Radical Operator',
  'NO To Organic Nitrate Conversion From Alkylperoxy Radical',
  'Xylene And Other Polyalkyl Aromatics',
  'xylhrxn?',
  'xylnrxn?'
);


my @_discover_conus_aerodiam_variables = (
  'dgacc_dry',
  'dgacc_wet',
  'dgatkn_dry',
  'dgatkn_wet',
  'dgcor_dry',
  'dgcor_wet',
  'gamma_n2o5',
  'm2acc_wet',
  'm2atkn_wet',
  'm2cor_wet',
  'm3acc_dry',
  'm3acc_wet',
  'm3atkn_dry',
  'm3atkn_wet',
  'm3cor_dry',
  'm3cor_wet',
  'pm25ac',
  'pm25at',
  'pm25co',
  'rh',
  'stdevacc',
  'stdevatkn',
  'stdevcor'
);

my @_discover_conus_aerodiam_units = (
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3',
  '-', 'm2/m3', 'm2/m3',
  'm3/m3', 'm3/m3', 'm3/m3', 'm3/m3',
  'm3/m3', 'm3/m3', '-', '-', '-', '-', '-', '-', '-', '-'
);

my @_discover_conus_aerodiam_descriptions = (
  'Geometric Diameter Of Accumulation Mode Without Water',
  'Geometric Diameter Of Accumulation Mode With Water',
  'Geometric Diameter Of Aitken Mode Without Water',
  'Geometric Diameter Of Aitken Mode With Water',
  'Coarse mode mean diameter without water',
  'Coarse mode mean diameter with water',
  'N2O5 Heterogeneous reaction probability',
  'Accumulation mode 2nd moment (wet)',
  'Aitken mode 2nd moment (wet)',
  'Coarse mode 2nd moment (wet)',
  'Accumulation mode 3rd moment (dry)',
  'Accumulation mode 3rd moment (wet)',
  'Aitken mode 3rd moment (dry)',
  'Aitken mode 3rd moment (wet)',
  'Coarse mode 3rd moment (dry)',
  'Coarse mode 3rd moment (wet)',
  'Fine fraction of accumulation mode',
  'Fine fraction of Aitken mode',
  'Fine fraction of coarse mode',
  'Relative humiditity',
  'Accumulation mode standard deviation (dry and wet)',
  'Aitken mode standard deviation (dry and wet)',
  'Coarse mode standard deviation (dry and wet)'
);


my @_discover_conus_aerovis_variables = (
  'dcv_mie', 'dcv_recon', 'ext_mie', 'ext_recon'
);

my @_discover_conus_aerovis_units = (
  'deciview', 'deciview', '1/km', '1/km'
);

my @_discover_conus_aerovis_descriptions = (
  'hourly visual range', 'hourly visual range',
  'hourly extinction coefficient', 'hourly extinction coefficient'
);


my @_discover_conus_conc_variables = (
  'aalj', 'aalkj', 'abnz1j', 'abnz2j', 'abnz3j', 'acaj',
  'acli', 'aclj', 'aclk', 'acors', 'aeci', 'aecj', 'afej',
  'ah2oi', 'ah2oj', 'ah2ok', 'aiso1j', 'aiso2j', 'aiso3j', 'akj',
  'ald2', 'aldx', 'amgj', 'amnj', 'anai', 'anaj', 'anh4i', 'anh4j', 'anh4k',
  'ano3i', 'ano3j', 'ano3k', 'aolgaj', 'aolgbj', 'aorgcj', 'aothri', 'aothrj',
  'apncomi', 'apncomj', 'apoci', 'apocj', 'aseacat', 'asij',
  'aso4i', 'aso4j', 'aso4k', 'asoil', 'asqtj', 'atij',
  'atol1j', 'atol2j', 'atol3j', 'atrp1j', 'atrp2j',
  'axyl1j', 'axyl2j', 'axyl3j', 'benzene', 'c2o3', 'cao2', 'co', 'crn2',
  'crno', 'cro', 'cron', 'crpx', 'cxo3', 'eth', 'etha', 'etoh', 'form',
  'h2o2', 'hco3', 'hno3', 'ho2', 'hono', 'iole', 'isop', 'meo2', 'n2o5',
  'nh3', 'no2', 'no3', 'no', 'ntr', 'numacc', 'numatkn', 'numcor',
  'o3', 'oh', 'ole', 'opan', 'opo3', 'pan', 'panx', 'par', 'pna',
  'rooh', 'ror', 'sesq', 'so2', 'srfacc', 'srfatkn', 'srfcor', 'sulf',
  'terp', 'to2', 'tol', 'w_vel', 'xo2', 'xo2n', 'xyl'
);

my @_discover_conus_conc_units = (
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3',
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3',
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ppmv', 'ppmv', 'ug/m3', 'ug/m3',
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3',
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3',
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3',
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3',
  'ug/m3', 'ppmv', 'ppmv', 'ppmv', 'ppmv', 'ppmv', 'ppmv', 'ppmv', 'ppmv',
  'ppmv', 'ppmv', 'ppmv', 'ppmv', 'ppmv', 'ppmv', 'ppmv', 'ppmv', 'ppmv',
  'ppmv', 'ppmv', 'ppmv', 'ppmv', 'ppmv', 'ppmv', 'ppmv', 'ppmv', 'ppmv',
  'ppmv', 'ppmv', 'number/m3', 'number/m3', 'number/m3', 'ppmv', 'ppmv',
  'ppmv', 'ppmv', 'ppmv', 'ppmv', 'ppmv', 'ppmv', 'ppmv', 'ppmv', 'ppmv',
  'ppmv', 'ppmv', 'm2/m3', 'm2/m3', 'm2/m3', 'ppmv', 'ppmv', 'ppmv', 'ppmv',
  'm/s', 'ppmv', 'ppmv', 'ppmv'
);

my @_discover_conus_conc_descriptions = (
  'Aerosol Aluminum Accumulation Mode',
  'SOA from alkanes',
  'Low-volatility SOA from benzene',
  'High-volatility SOA from benzene',
  'Non-volatile SOA from benzene (low-NOx)',
  'Aerosol CA? Accumulation Mode',
  'Aerosol Chlorine Aitken Mode',
  'Aerosol Chlorine Accumulation Mode',
  'Aerosol Chlorine Coarse Mode',
  'Aerosol Course Mode Anthropogenic Mass',
  'Aerosol Elemental Carbon Mass Aitken Mode',
  'Aerosol Elemental Carbon Mass Accumulation Mode',
  'Aerosol ? Elemental Accumulation Mode',
  'Aerosol Water Aitken Mode',
  'Aerosol Water Accumulation Mode',
  'Aerosol Water Coarse Mode',
  'High-volatility SOA from isoprene',
  'Low-volatility SOA from isoprene',
  'Acid-enhanced SOA from isoprene',
  'Aerosol ? Accumulation Mode',
  'High Melecular Weight Aldehydes',
  'C3+ Aldehydes',
  'Aerosol MG? Aitken Mode',
  'Aerosol MN? Accumulation Mode',
  'Aerosol Sodium Aitken Mode',
  'Aerosol Sodium Accumulation Mode',
  'Aerosol Ammonium Aitken Mode',
  'Aerosol Ammonium Accumulation Mode',
  'Aerosol Ammonium Coarse Mode',
  'Aerosol Nitrate Aitken Mode',
  'Aerosol Nitrate Accumulation Mode',
  'Aerosol Nitrate Coarse Mode',
  'Oligomers from semi-volatile anthropogenic SOA species',
  'Oligomers from semi-volatile biogenic SOA species',
  'SOA from in-cloud oxidation of dialdehydes',
  'Aerosol Other Aitken Mode',
  'Aerosol Other Accumulation Mode',
  'Aerosol primary non-carbon organic mass Aitken Mode',
  'Aerosol primary non-carbon organic mass Accumulation Mode',
  'Aerosol particle oxidation catalysts Aitken Mode',
  'Aerosol particle oxidation catalysts Accumulation Mode',
  'Aerosol sea salt',
  'Aerosol silicon Accumulation Mode',
  'Aerosol Sulfate Aitken Mode',
  'Aerosol Sulfate Accumulation Mode',
  'Aerosol Sulfate Coase Mode',
  'Aerosol coarse mode soil-derived mass',
  'SOA from sesquiterpenes',
  'Aerosol titanium Accumulation Mode',
  'Low-volatility SOA from mono-substituted aromatics',
  'High-volatility SOA from mono-substituted aromatics',
  'Non-volatile SOA from mono-substituted aromatics (low-NOx)',
  'Low-volatility SOA from monoterpenes',
  'High-volatility SOA from monoterpenes',
  'Low-volatility SOA from poly-substituted aromatics',
  'High-volatility SOA from poly-substituted aromatics',
  'Non-volatile SOA from poly-substituted aromatics (low-NOx)',
  'benzene',
  'Peroxy Radical from Methyl-catechol',
  'Acetyl Peroxy Radical',
  'Carbon Monoxide',
  'Chromium nitrate',
  'Alkoxy Radical',
  'Methylphenoxy Radical',
  'nitrocresol',
  'C3+ Peroxyacetyl Radicals',
  'CRPX?',
  'Higher acylperoxy radical',
  'Ethene',
  'Ethane',
  'Formaldehyde',
  'Hydrogen peroxide',
  'hco3',
  'Nitric acid',
  'Hydroperoxy radical',
  'Nitrous acid',
  'Internal olefin carbon bond',
  'Isoprene',
  'Methylperoxy radical',
  'Nitrogen pentoxide',
  'ammonia',
  'nitrogen dioxide',
  'nitrate',
  'nitric oxide',
  'Organic nitrate',
  'Accumulation Mode Number',
  'Aitken Mode Number',
  'Coarse Mode Number',
  'Ozone',
  'Hydroxyl radical',
  'Terminal olefin carbon bond',
  'opan',
  'Peroxyacyl radical from oxidation of OPEN',
  'Peroxyacyl nitrate',
  'C3 and higher peroxyacyl nitrates',
  'Paraffin carbon bond',
  'Peroxynitric acid',
  'Higher organic peroxide',
  'Secondary alkoxy radical',
  'Sesquiterpene',
  'Sulfur dioxide',
  'Accumulation Mode Surface Area',
  'Aitken Mode Surface Area',
  'Coarse Mode Surface Area',
  'Sulfuric acid gas',
  'Terpene',
  'Tolene-hydroxyl radical adduct',
  'Toluene and other monoalkyl aromatics',
  'Vertical component of wind velocity',
  'NO-to-NO2 conversion from alkylperoxy radical',
  'NO-to-nitrate conversion from alkylperoxy radical',
  'Xylene and other polyalkyl aromatics'
);

my @_discover_conus_depv_variables = (
  'vd_ald', 'vd_cl2', 'vd_co', 'vd_fmcl', 'vd_gen_ald', 'vd_h2o2', 'vd_hcho',
  'vd_hcl', 'vd_hno3', 'vd_hocl', 'vd_hono', 'vd_methanol', 'vd_n2o5',
  'vd_nh3', 'vd_no', 'vd_no2', 'vd_no3', 'vd_o3', 'vd_op', 'vd_ora',
  'vd_paa', 'vd_pan', 'vd_so2', 'vd_sulf', 'vmassc', 'vmassi', 'vmassj',
  'vnumacc', 'vnumatkn', 'vnumcor', 'vsrfacc', 'vsrfatkn', 'vsrfcor'
);

my @_discover_conus_depv_units = (
  'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec',
  'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec',
  'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec',
  'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec',
  'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec'
);

my @_discover_conus_depv_descriptions = (
  'ald?',
  'cl2?',
  'Carbon Monoxide',
  'fmcl?',
  'gen_ald?',
  'Peroxide',
  'hcho?',
  'Hydrochloric Acid',
  'Nitric Acid',
  'hocl?',
  'Nitrous Acid',
  'Methanol',
  'Dinitrate Pentoxide',
  'Ammonia',
  'Nitrogen Oxide',
  'Nitrogen Dioxide',
  'Nitrogen Trioxide',
  'Ozone',
  'op?',
  'ora?',
  'paa?',
  'Peroxy Acetyl Nitrate',
  'Sulfur Dioxide',
  'Sulfuric Acid',
  'vmassc?',
  'vmassi?',
  'vmassj?',
  'vnumacc?',
  'vnumatkn?',
  'vnumcor?',
  'vsrfacc?',
  'vsrfatkn?',
  'vsrfcor?'
);

my @_discover_conus_drydep_variables = (
  'aacd',
  'aalj',
  'aalkj',
  'abnz1j',
  'abnz2j',
  'abnz3j',
  'acaj',
  'aclj',
  'aclk',
  'acors',
  'aeci',
  'aecj',
  'afej',
  'aiso1j',
  'aiso2j',
  'aiso3j',
  'akj',
  'ald2',
  'aldx',
  'amgj',
  'amnj',
  'anaj',
  'anh4i',
  'anh4j',
  'anh4k',
  'ano3i',
  'ano3j',
  'ano3k',
  'aolgaj',
  'aolgbj',
  'aorgcj',
  'aothrj',
  'apncomi',
  'apncomj',
  'apoci',
  'apocj',
  'aseacat',
  'asij',
  'aso4i',
  'aso4j',
  'aso4k',
  'asoil',
  'asqtj',
  'atij',
  'atol1j',
  'atol2j',
  'atol3j',
  'atrp1j',
  'atrp2j',
  'axyl1j',
  'axyl2j',
  'axyl3j',
  'cl2',
  'co',
  'crpx',
  'facd',
  'fmcl',
  'form',
  'h2o2',
  'hcl',
  'hno3',
  'hocl',
  'hono',
  'meoh',
  'mepx',
  'n2o5',
  'nh3',
  'no',
  'no2',
  'no3',
  'ntr',
  'o3',
  'opan',
  'pacd',
  'pan',
  'panx',
  'rooh',
  'so2',
  'sulf'
);

my @_discover_conus_drydep_units = (
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare'
);

my @_discover_conus_drydep_descriptions = (
  'Acetic And Higher Carboxylic Acids',
  'Aerosol Aluminum Accumulation Mode',
  'SOA from alkanes',
  'Low-volatility SOA from benzene',
  'High-volatility SOA from benzene',
  'Non-volatile SOA from benzene (low-NOx)',
  'Aerosol Calcium Accumulation Mode',
  'Aerosol Chlorine Aitken Mode',
  'Aerosol Chlorine Accumulation Mode',
  'Aerosol Chlorine Coarse Mode',
  'Aerosol Course Mode Anthropogenic Mass',
  'Aerosol Elemental Carbon Mass Aitken Mode',
  'Aerosol Elemental Carbon Mass Accumulation Mode',
  'Aerosol Iron Elemental Accumulation Mode',
  'High-volatility SOA from isoprene',
  'Low-volatility SOA from isoprene',
  'Acid-enhanced SOA from isoprene',
  'Fine mode potassium',
  'High Melecular Weight Aldehydes',
  'C3+ Aldehydes',
  'Aerosol Magnesium Aitken Mode',
  'Aerosol Manganese Accumulation Mode',
  'Aerosol Sodium Accumulation Mode',
  'Aerosol Ammonium Aitken Mode',
  'Aerosol Ammonium Accumulation Mode',
  'Aerosol Ammonium Coarse Mode',
  'Aerosol Nitrate Aitken Mode',
  'Aerosol Nitrate Accumulation Mode',
  'Aerosol Nitrate Coarse Mode',
  'Oligomers from semi-volatile anthropogenic SOA species',
  'Oligomers from semi-volatile biogenic SOA species',
  'Aerosol organic carbon Accumulation Mode',
  'Aerosol other carbon Accumulation Mode',
  'Aerosol primary non-carbon organic matter Aitken Mode',
  'Aerosol primary non-carbon organic matter Accumulation Mode',
  'Aerosol particle oxidation catalysts Aitken Mode',
  'Aerosol particle oxidation catalysts Accumulation Mode',
  'Aerosol sea salt',
  'Aerosol silicon Accumulation Mode',
  'Aerosol Sulfate Aitken Mode',
  'Aerosol Sulfate Accumulation Mode',
  'Aerosol Sulfate Coase Mode',
  'Aerosol coarse mode soil-derived mass',
  'SOA from sesquiterpenes',
  'Aerosol titanium Accumulation Mode',
  'Low-volatility SOA from mono-substituted aromatics',
  'High-volatility SOA from mono-substituted aromatics',
  'Non-volatile SOA from mono-substituted aromatics (low-NOx)',
  'Low-volatility SOA from monoterpenes',
  'High-volatility SOA from monoterpenes',
  'Low-volatility SOA from poly-substituted aromatics',
  'High-volatility SOA from poly-substituted aromatics',
  'Non-volatile SOA from poly-substituted aromatics (low-NOx)',
  'Elemental Chlorine',
  'Carbon Monoxide',
  'Nitro-cresol from hydroperoxide',
  'Formic acid',
  'Formyl chloride',
  'Formaldehyde',
  'Hydrogen peroxide',
  'Hydrochloric acid',
  'Nitric acid',
  'Hypochlorous acid',
  'Nitrous acid',
  'Methylhydroperoxide',
  'Nitrogen pentoxide',
  'Ammonia',
  'Nitrogen monoxide',
  'Nitrogen dioxide',
  'Nitrogen trioxide',
  'Organic nitrate',
  'Ozone',
  'Peroxyacetyl nitrate from Peroxy radical from Aromatic ring opening product',
  'Peroxyacetic acid',
  'Peroxyacetyl nitrate',
  'Higher peroxyacyl nitrate',
  'Higher organic peroxide',
  'Sulfur Dioxide',
  'Sulfuric Acid'
);

my @_discover_conus_dustemis_variables = (
  'aalj', 'acaj', 'aclj', 'aclk', 'aecj', 'afej', 'ah2oj', 'akj',
  'amgj', 'amnj', 'anaj', 'anh4j', 'ano3j', 'ano3k', 'anumj', 'anumk',
  'aothrj', 'apncomj', 'apocj', 'asij', 'aso4j', 'aso4k', 'asoil',
  'asrfj', 'asrfk', 'atij', 'etotl', 'fmoit', 'kv2hz', 'lcrop',
  'lshgr', 'lshld', 'lspba', 'qcrop', 'qshgr', 'qshld', 'qspba', 'sd_ep',
  'tfabv', 'tfinf', 'tldst', 'ucrop', 'uldbr', 'uldfr', 'uldub', 'uldvg',
  'ushgr', 'ushld', 'uspba', 'ustar', 'wtmax'
);

my @_discover_conus_dustemis_units = (
  'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s',
  'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s',
  'number/m3/s', 'number/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s',
  'g/m3/s', 'g/m3/s', 'g/m3/s', 'm2/m3/s', 'm2/m3/s', 'g/m3/s', 'g/m3/s',
  'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s',
  'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s',
  'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s', 'g/m3/s',
  'g/m3/s', 'g/m3/s', 'g/m3/s'
);

my @_discover_conus_dustemis_descriptions = (
  'Aerosol Aluminum Accumulation Mode',
  'Aerosol Calcium Accumulation Mode',
  'Aerosol Chlorine Accumulation Mode',
  'Aerosol Chlorine Coarse Mode',
  'Aerosol Elemental Carbon Mass Accumulation Mode',
  'Aerosol Iron Accumulation Mode',
  'Aerosol Water Accumulation Mode',
  'Aerosol Potassium Accumulation Mode',
  'Aerosol Magnesium Accumulation Mode',
  'Aerosol Manganese Accumulation Mode',
  'Aerosol Sodium Accumulation Mode',
  'Aerosol Ammonium Accumulation Mode',
  'Aerosol Nitrate Accumulation Mode',
  'Aerosol Accumulation Mode Number',
  'Aerosol Coarse Mode Number',
  'Aerosol Accumulation Mode Number',
  'Aerosol primary unspeciated fine particulate matter',
  'Aerosol primary non-carbon organic mass',
  'Aerosol primary organic carbon',
  'Aerosol silicon Accumulation Mode',
  'Aerosol Sulfate Accumulation Mode',
  'Aerosol Sulfate Coarse Mode',
  'Aerosol coarse mode soil-derived mass',
  'Accumulation Mode Surface Area',
  'Coarse Mode Surface Area',
  'Aerosol Titanium Accumulation Mode',
  'ETOTL?',
  'FMOIT?',
  'KV2HZ?',
  'LCROP?',
  'LSHGR?',
  'LSHLD?',
  'LSPBA?',
  'QCROP?',
  'QSHGR?',
  'QSHLD?',
  'QSPBA?',
  'SD_EP?',
  'tfabv?',
  'tfinf?',
  'tldst?',
  'ucrop?',
  'uldbr?',
  'uldfr?',
  'uldub?',
  'uldvg?',
  'ushgr?',
  'ushld?',
  'uspba?',
  'cell-averaged horizontal friction velocity',
  'wtmax?'
);

my @_discover_conus_emis_variables = (
  'acrolein', 'ald2', 'ald2_primary', 'aldx',
  'benzene', 'butadiene13',
  'ch4', 'cl2', 'co',
  'eth', 'etha', 'etoh',
  'form', 'form_primary',
  'hcl', 'hono',
  'iole', 'isop',
  'meoh',
  'naphthalene',
  'nh3', 'nh3_fert', 'no', 'no2', 'nvol',
  'ole',
  'pal', 'par', 'pca', 'pcl', 'pec', 'pfe', 'ph2o', 'pk', 'pmc', 'pmfine',
  'pmg', 'pmn', 'pmothr', 'pna', 'pncom', 'pnh4', 'pno3', 'poc', 'psi', 'pso4',
  'pti',
  'so2', 'sulf',
  'terp', 'tol',
  'unk', 'unr',
  'voc_inv',
  'xyl'
);

my @_discover_conus_emis_units = (
  'g/s', 'g/s', 'g/s', 'g/s', 'g/s', 'g/s', 'g/s', 'g/s', 'g/s', 'g/s', 'g/s',
  'g/s', 'g/s', 'g/s', 'g/s', 'g/s', 'g/s', 'g/s', 'g/s', 'g/s',
  'moles/s', 'moles/s', 'moles/s', 'moles/s', 'moles/s', 'moles/s', 'moles/s',
  'moles/s', 'moles/s', 'moles/s', 'moles/s', 'moles/s', 'moles/s', 'moles/s',
  'moles/s', 'moles/s', 'moles/s', 'moles/s', 'moles/s', 'moles/s', 'moles/s',
  'moles/s', 'moles/s', 'moles/s', 'moles/s', 'moles/s', 'moles/s', 'moles/s',
  'moles/s', 'moles/s', 'moles/s', 'moles/s', 'moles/s', 'moles/s', 'moles/s'
);

my @_discover_conus_emis_descriptions = (
  'acrolein',
  'Acetaldehyde',
  'ald2_primary',
  'Propionaldehyde and higher aldehydes',
  'benzene',
  'butadiene13',
  'methane',
  'chlorine',
  'carbon monoxide',
  'Ethene',
  'Ethane',
  'Ethanol',
  'Formaldehyde',
  'Formaldehyde primary',
  'Hydrogen chloride',
  'Nitrous acid',
  'Internal olefin carbon bond',
  'Isoprene',
  'Methanol',
  'naphthalene',
  'ammonia',
  'ammonia from fertilizers',
  'nitrogen monoxide',
  'nitrogen dioxide',
  'Nonvolatile Carbon',
  'Terminal olefin carbon bond',
  'Fine mode aluminum',
  'Paraffin carbon bond',
  'fine mode calcium',
  'fine mode chlorine',
  'fine mode elemental carbon',
  'fine mode iron',
  'Fine mode particulate water',
  'Fine mode potassium',
  'Coarse mode primary particulate matter',
  'Fine mode primary particulate matter',
  'Fine mode magnesium',
  'Fine mode manganese',
  'Unspeciated fine mode primary particulate matter',
  'Fine mode sodium',
  'Fine mode primary non-carbon organic matter',
  'Fine particulate ammonium',
  'Fine mode nitrate',
  'Fine mode primary organic carbon',
  'Fine mode silicon',
  'Fine mode sulfate',
  'Fine mode titanium',
  'Fine mode sulfate',
  'sulfate',
  'Terpene',
  'Toluene And Other Monoalkyl Aromatics',
  'Unknown',
  'Unreactive',
  'volatile organic componds inv',
  'Xylene And Other Polyalkyl Aromatics'
);

my @_discover_conus_metcro2d_variables = ( 'rainc', 'rainnc' );
my @_discover_conus_metcro2d_units = ( 'mm', 'mm' );
my @_discover_conus_metcro2d_descriptions = (
  'Accumulated total cumulus precipitation',
  'Accumulated total grid scale precipitation'
);

my @_discover_conus_metcro3d_variables = ( 'dens' );
my @_discover_conus_metcro3d_units = ( 'Pa' );
my @_discover_conus_metcro3d_descriptions = ( 'Base state pressure' );

my @_discover_conus_noy_variables  = ( 'noy' );
my @_discover_conus_noy_units = ( 'ppmV' );
my @_discover_conus_noy_descriptions = ( 'Total reactive nitrogen' );

my @_discover_conus_photdiag1_variables = (
  'albedo_w294',
  'albedo_w303',
  'albedo_w310',
  'albedo_w316',
  'albedo_w333',
  'albedo_w381',
  'albedo_w607',
  'coszens',
  'etot_sfc_w294',
  'etot_sfc_w303',
  'etot_sfc_w310',
  'etot_sfc_w316',
  'etot_sfc_w333',
  'etot_sfc_w381',
  'etot_sfc_w607',
  'jno2',
  'jo3o1d',
  'tau_aero_w294',
  'tau_aero_w303',
  'tau_aero_w310',
  'tau_aero_w316',
  'tau_aero_w333',
  'tau_aero_w381',
  'tau_aero_w607',
  'tauo3_top_w294',
  'tauo3_top_w303',
  'tauo3_top_w310',
  'tauo3_top_w316',
  'tauo3_top_w333',
  'tauo3_top_w381',
  'tauo3_top_w607',
  'tau_tot_w294',
  'tau_tot_w303',
  'tau_tot_w310',
  'tau_tot_w316',
  'tau_tot_w333',
  'tau_tot_w381',
  'tau_tot_w607',
  'toc'
);

my @_discover_conus_photdiag1_units = (
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  'W/m2',
  'W/m2',
  'W/m2',
  'W/m2',
  'W/m2',
  'W/m2',
  'W/m2',
  '1/min',
  '1/min',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  'DU'
);

my @_discover_conus_photdiag1_descriptions = (
  'Surface Albedo at the wavelength 294 nm',
  'Surface Albedo at the wavelength 303 nm',
  'Surface Albedo at the wavelength 310 nm',
  'Surface Albedo at the wavelength 316 nm',
  'Surface Albedo at the wavelength 333 nm',
  'Surface Albedo at the wavelength 381 nm',
  'Surface Albedo at the wavelength 607 nm',
  'Cosine of Solar Zenith Angle',
  'Total Downward Irradiance at sfc, 294 nm',
  'Total Downward Irradiance at sfc, 303 nm',
  'Total Downward Irradiance at sfc, 310 nm',
  'Total Downward Irradiance at sfc, 316 nm',
  'Total Downward Irradiance at sfc, 333 nm',
  'Total Downward Irradiance at sfc, 381 nm',
  'Total Downward Irradiance at sfc, 607 nm',
  'J-value for NO2',
  'J-value for O3O1D',
  'Aerosol Optical Depth, 294 nm',
  'Aerosol Optical Depth, 303 nm',
  'Aerosol Optical Depth, 310 nm',
  'Aerosol Optical Depth, 316 nm',
  'Aerosol Optical Depth, 333 nm',
  'Aerosol Optical Depth, 381 nm',
  'Aerosol Optical Depth, 607 nm',
  'Optical Depth of O3 above model domain, 294 nm',
  'Optical Depth of O3 above model domain, 303 nm',
  'Optical Depth of O3 above model domain, 310 nm',
  'Optical Depth of O3 above model domain, 316 nm',
  'Optical Depth of O3 above model domain, 333 nm',
  'Optical Depth of O3 above model domain, 381 nm',
  'Optical Depth of O3 above model domain, 607 nm',
  'Total Optical Depth, 294 nm',
  'Total Optical Depth, 303 nm',
  'Total Optical Depth, 310 nm',
  'Total Optical Depth, 316 nm',
  'Total Optical Depth, 333 nm',
  'Total Optical Depth, 381 nm',
  'Total Optical Depth, 607 nm',
  'Total Ozone Column'
);

my @_discover_conus_photdiag2_variables = (
  'acrolein_saprc99',
  'c2cho_saprc99',
  'ccho_r_saprc99',
  'cl2_iupac04',
  'cooh_saprc99',
  'fmcl_iupac04',
  'h2o2_saprc99',
  'hcho_m_saprc99',
  'hcho_r_saprc99',
  'hno3_iupac04',
  'ho2no2_iupac04',
  'hocl_iupac04',
  'hono_iupac04',
  'mgly_iupac04',
  'n2o5_iupac04',
  'no2_saprc99',
  'no3no2_saprc99',
  'no3no_saprc99',
  'ntr_iupac04',
  'o3_o1d_iupac04',
  'o3_o3p_iupac04',
  'pacd_cb05',
  'pan_iupac04'
);

my @_discover_conus_photdiag2_units = (
  '1/min', '1/min', '1/min', '1/min', '1/min', '1/min', '1/min', '1/min',
  '1/min', '1/min', '1/min', '1/min', '1/min', '1/min', '1/min', '1/min',
  '1/min', '1/min', '1/min', '1/min', '1/min', '1/min', '1/min'
);

my @_discover_conus_photdiag2_descriptions = (
  'photolysis rates for acrolein_saprc99',
  'photolysis rates for c2cho_saprc99',
  'photolysis rates for ccho_r_saprc99',
  'photolysis rates for cl2_iupac04',
  'photolysis rates for cooh_saprc99',
  'photolysis rates for fmcl_iupac04',
  'photolysis rates for h2o2_saprc99',
  'photolysis rates for hcho_m_saprc99',
  'photolysis rates for hcho_r_saprc99',
  'photolysis rates for hno3_iupac04',
  'photolysis rates for ho2no2_iupac04',
  'photolysis rates for hocl_iupac04',
  'photolysis rates for hono_iupac04',
  'photolysis rates for mgly_iupac04',
  'photolysis rates for n2o5_iupac04',
  'photolysis rates for no2_saprc99',
  'photolysis rates for no3no2_saprc99',
  'photolysis rates for no3no_saprc99',
  'photolysis rates for ntr_iupac04',
  'photolysis rates for o3_o1d_iupac04',
  'photolysis rates for o3_o3p_iupac04',
  'photolysis rates for pacd_cb05',
  'photolysis rates for pan_iupac04'
);

my @_discover_conus_pm25_variables = ( 'pm25' );
my @_discover_conus_pm25_units = ( 'ug/m3' );
my @_discover_conus_pm25_descriptions = (
  'particulate matter (aerosols) not more than 2.5 microns in diameter'
);


my @_discover_conus_soilinp_variables = (
  'ptype',
  'pulsedate',
  'pulsetime',
  'rainfall01',
  'rainfall02',
  'rainfall03',
  'rainfall04',
  'rainfall05',
  'rainfall06',
  'rainfall07',
  'rainfall08',
  'rainfall09',
  'rainfall10',
  'rainfall11',
  'rainfall12',
  'rainfall13',
  'rainfall14',
  'rainfall15',
  'rainfall16',
  'rainfall17',
  'rainfall18',
  'rainfall19',
  'rainfall20',
  'rainfall21',
  'rainfall22',
  'rainfall23',
  'rainfall24'
);

my @_discover_conus_soilinp_units = (
  'integer',
  'yyyyddd',
  'hhmmss',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm'
);

my @_discover_conus_soilinp_descriptions = (
  'no emission pulse type',
  'cmaq starting date for no emission pulse',
  'cmaq starting time for no emission pulse',
  'hrly cnv. & non-cnv. rainfall for 2011182 010000',
  'hrly cnv. & non-cnv. rainfall for 2011182 020000',
  'hrly cnv. & non-cnv. rainfall for 2011182 030000',
  'hrly cnv. & non-cnv. rainfall for 2011182 040000',
  'hrly cnv. & non-cnv. rainfall for 2011182 050000',
  'hrly cnv. & non-cnv. rainfall for 2011182 060000',
  'hrly cnv. & non-cnv. rainfall for 2011182 070000',
  'hrly cnv. & non-cnv. rainfall for 2011182 080000',
  'hrly cnv. & non-cnv. rainfall for 2011182 090000',
  'hrly cnv. & non-cnv. rainfall for 2011182 100000',
  'hrly cnv. & non-cnv. rainfall for 2011182 110000',
  'hrly cnv. & non-cnv. rainfall for 2011182 120000',
  'hrly cnv. & non-cnv. rainfall for 2011182 130000',
  'hrly cnv. & non-cnv. rainfall for 2011182 140000',
  'hrly cnv. & non-cnv. rainfall for 2011182 150000',
  'hrly cnv. & non-cnv. rainfall for 2011182 160000',
  'hrly cnv. & non-cnv. rainfall for 2011182 170000',
  'hrly cnv. & non-cnv. rainfall for 2011182 180000',
  'hrly cnv. & non-cnv. rainfall for 2011182 190000',
  'hrly cnv. & non-cnv. rainfall for 2011182 200000',
  'hrly cnv. & non-cnv. rainfall for 2011182 210000',
  'hrly cnv. & non-cnv. rainfall for 2011182 220000',
  'hrly cnv. & non-cnv. rainfall for 2011182 230000',
  'hrly cnv. & non-cnv. rainfall for 2011182 235000'
);

my @_discover_conus_ssemis_variables = (
  'acaj',
  'aclj',
  'aclk',
  'ah2oj',
  'ah2ok',
  'akj',
  'amgj',
  'anaj',
  'aseacat',
  'aso4j',
  'aso4k',
  'numacc',
  'numcor',
  'srfacc',
  'srfcor'
);


my @_discover_conus_ssemis_units = (
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'number/s',
  'number/s',
  'm2/s',
  'm2/s'
);


my @_discover_conus_ssemis_descriptions = (
  'Aerosol Calcium Accumulation Mode',
  'Aerosol Chloride Accumulation Mode',
  'Aerosol Chloride Coarse Mode',
  'Aerosol Water Vapor Accumulation Mode',
  'Aerosol Water Vapor Coarse Mode',
  'Aerosol Potassium Accumulation Mode',
  'Aerosol Magnesium Accumulation Mode',
  'Aerosol Sodium Accumulation Mode',
  'Aerosol sea salt',
  'Aerosol Sulfate Accumulation Mode',
  'Aerosol Sulfate Coarse Mode',
  'Accumulation Mode Number',
  'Coarse Mode Number',
  'Accumulation Mode Surface Area',
  'Coarse Mode Surface Area'
);


my @_discover_conus_wetdep1_variables = (
  'aacd',
  'aalj',
  'aalkj',
  'abnz1j',
  'abnz2j',
  'abnz3j',
  'acaj',
  'aclj',
  'aclk',
  'acors',
  'aeci',
  'aecj',
  'afej',
  'aiso1j',
  'aiso2j',
  'aiso3j',
  'akj',
  'ald2',
  'aldx',
  'amgj',
  'amnj',
  'anaj',
  'anh4i',
  'anh4j',
  'anh4k',
  'ano3i',
  'ano3j',
  'ano3k',
  'aolgaj',
  'aolgbj',
  'aorgcj',
  'aothrj',
  'apncomi',
  'apncomj',
  'apoci',
  'apocj',
  'aseacat',
  'asij',
  'aso4i',
  'aso4j',
  'aso4k',
  'asoil',
  'asqtj',
  'atij',
  'atol1j',
  'atol2j',
  'atol3j',
  'atrp1j',
  'atrp2j',
  'axyl1j',
  'axyl2j',
  'axyl3j',
  'cl2',
  'co',
  'facd',
  'fmcl',
  'form',
  'h2o2',
  'hcl',
  'hno3',
  'hocl',
  'hono',
  'hplus',
  'meoh',
  'mepx',
  'n2o5',
  'nh3',
  'no',
  'no2',
  'no3',
  'ntr',
  'o3',
  'opan',
  'pacd',
  'pan',
  'panx',
  'pna',
  'rooh',
  'so2',
  'sulf'
);

my @_discover_conus_wetdep1_units = (
  'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare',
  'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare',
  'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare',
  'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare',
  'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare',
  'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare',
  'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare',
  'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare',
  'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare',
  'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare',
  'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare',
  'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare',
  'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare',
  'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare',
  'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare',
  'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare', 'kg/hectare'
);

my @_discover_conus_wetdep1_descriptions = (
  'Higher carboxylic acid',
  'Aerosol aluminum Accumulation Mode',
  'SOA from alkanes',
  'Low-volatility SOA from benzene',
  'High-volatility SOA from benzene',
  'Non-volatile SOA from benzene (low-NOx)',
  'Aerosol Calcium Accumulation Mode',
  'Aerosol Chloride Accumulation Mode',
  'Aerosol Chloride Coarse Mode',
  'Coarse mode primary particulate matter',
  'Aerosol Elemental Carbon Mass Aitken Mode',
  'Aerosol Elemental Carbon Mass Accumulation Mode',
  'Aerosol Iron Accumulation Mode',
  'High-volatility SOA from isoprene',
  'Low-volatility SOA from isoprene',
  'Acid-enhanced SOA from isoprene',
  'Aerosol potassium Accumulation Mode',
  'High Molecular Weight Aldehydes',
  'C3+ Aldehydes',
  'Aerosol Magnesium Accumulation Mode',
  'Aerosol Manganese Accumulation Mode',
  'Aerosol Sodium Accumulation Mode',
  'Aerosol Ammonium Aitken Mode',
  'Aerosol Ammonium Accumulation Mode',
  'Aerosol Ammonium Coarse Mode',
  'Aerosol Nitrate Aitken Mode',
  'Aerosol Nitrate Accumulation Mode',
  'Aerosol Nitrate Coarse Mode',
  'Oligomers from semi-volatile anthropogenic SOA species',
  'Oligomers from semi-volatile biogenic SOA species',
  'Aerosol primary organic carbon Accumulation Mode',
  'Unspeciated fine mode primary particulate matter',
  'Aerosol primary non-carbon organic mass Aitken Mode',
  'Aerosol primary non-carbon organic mass Accumulation Mode',
  'Aerosol primary organic carbon Aitken Mode',
  'Aerosol primary organic carbon Accumulation Mode',
  'Aerosol sea salt',
  'Aerosol Silicon Accumulation Mode',
  'Aerosol Sulfate Aitken Mode',
  'Aerosol Sulfate Accumulation Mode',
  'Aerosol Sulfate Coarse Mode',
  'Aerosol soil-derived',
  'SOA from sesquiterpenes',
  'Aerosol titanium Accumulation Mode',
  'Low-volatility SOA from mono-substituted aromatics',
  'High-volatility SOA from mono-substituted aromatics',
  'Non-volatile SOA from mono-substituted aromatics (low-NOx)',
  'Low-volatility SOA from monoterpenes',
  'High-volatility SOA from monoterpenes',
  'Low-volatility SOA from poly-substituted aromatics',
  'High-volatility SOA from poly-substituted aromatics',
  'Non-volatile SOA from poly-substituted aromatics (low-NOx)',
  'Chlorine',
  'Carbon monoxide',
  'Formic acid',
  'Formyl chloride',
  'Formaldehyde',
  'Hydrogen peroxide',
  'Hydrochloric acid',
  'Nitric acid',
  'Hypochlorous acid',
  'Nitrous acid',
  'Hydronium ion',
  'Methanol',
  'Methylhydroperoxide',
  'Nitrogen pentoxide',
  'Ammonia',
  'Nitrogen monoxide',
  'Nitrogen dioxide',
  'Nitrogen trioxide',
  'Organic nitrate',
  'Ozone',
  'Peroxyacetyl nitrate from Peroxy radical from Aromatic ring opening product',
  'Peroxyacetic acid',
  'Peroxyacetyl nitrate',
  'Higher peroxyacyl nitrate',
  'Peroxynitric Acid',
  'C2+ Organic Hydroperoxide',
  'Sulfur Dioxide',
  'Sulfuric Acid'
);

my @_discover_conus_wetdep2_variables = (
  'aacd',
  'aalj',
  'aalkj',
  'abnz1j',
  'abnz2j',
  'abnz3j',
  'acaj',
  'aclj',
  'aclk',
  'acors',
  'aeci',
  'aecj',
  'afej',
  'aiso1j',
  'aiso2j',
  'aiso3j',
  'akj',
  'ald2',
  'aldx',
  'amgj',
  'amnj',
  'anaj',
  'anh4i',
  'anh4j',
  'anh4k',
  'ano3i',
  'ano3j',
  'ano3k',
  'aolgaj',
  'aolgbj',
  'aorgcj',
  'aothrj',
  'apncomi',
  'apncomj',
  'apoci',
  'apocj',
  'aseacat',
  'asij',
  'aso4i',
  'aso4j',
  'aso4k',
  'asoil',
  'asqtj',
  'atij',
  'atol1j',
  'atol2j',
  'atol3j',
  'atrp1j',
  'atrp2j',
  'axyl1j',
  'axyl2j',
  'axyl3j',
  'cl2',
  'cld_trans',
  'cloud_bottom',
  'co',
  'facd',
  'fmcl',
  'form',
  'h2o2',
  'hcl',
  'hno3',
  'hocl',
  'hono',
  'hplus',
  'meoh',
  'mepx',
  'n2o5',
  'nh3',
  'no',
  'no2',
  'no3',
  'np_cldfrac',
  'np_cloudtop',
  'np_trans',
  'ntr',
  'o3',
  'opan',
  'pacd',
  'pan',
  'panx',
  'plcl',
  'pna',
  'pr_cldfrac',
  'pr_cloudtop',
  'pr_trans',
  'rain_flag',
  'res_trans',
  'rooh',
  'so2',
  'sulf'
);

my @_discover_conus_wetdep2_units = (
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  '-',
  'layer-number',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  '-',
  'layer-number',
  '-',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'pa',
  'kg/hectare',
  '-',
  'layer-number',
  '-',
  '1 or 0',
  '-',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare'
);

my @_discover_conus_wetdep2_descriptions = (
  'Higher carboxylic acid',
  'Aerosol aluminum Accumulation Mode',
  'SOA from alkanes',
  'Low-volatility SOA from benzene',
  'High-volatility SOA from benzene',
  'Non-volatile SOA from benzene (low-NOx)',
  'Aerosol Calcium Accumulation Mode',
  'Aerosol Chloride Accumulation Mode',
  'Aerosol Chloride Coarse Mode',
  'Coarse mode primary particulate matter',
  'Aerosol Elemental Carbon Mass Aitken Mode',
  'Aerosol Elemental Carbon Mass Accumulation Mode',
  'Aerosol Iron Accumulation Mode',
  'High-volatility SOA from isoprene',
  'Low-volatility SOA from isoprene',
  'Acid-enhanced SOA from isoprene',
  'Aerosol potassium Accumulation Mode',
  'High Molecular Weight Aldehydes',
  'C3+ Aldehydes',
  'Aerosol Magnesium Accumulation Mode',
  'Aerosol Manganese Accumulation Mode',
  'Aerosol Sodium Accumulation Mode',
  'Aerosol Ammonium Aitken Mode',
  'Aerosol Ammonium Accumulation Mode',
  'Aerosol Ammonium Coarse Mode',
  'Aerosol Nitrate Aitken Mode',
  'Aerosol Nitrate Accumulation Mode',
  'Aerosol Nitrate Coarse Mode',
  'Oligomers from semi-volatile anthropogenic SOA species',
  'Oligomers from semi-volatile biogenic SOA species',
  'Aerosol primary organic carbon Accumulation Mode',
  'Unspeciated fine mode primary particulate matter',
  'Aerosol primary non-carbon organic mass Aitken Mode',
  'Aerosol primary non-carbon organic mass Accumulation Mode',
  'Aerosol primary organic carbon Aitken Mode',
  'Aerosol primary organic carbon Accumulation Mode',
  'Aerosol sea salt',
  'Aerosol Silicon Accumulation Mode',
  'Aerosol Sulfate Aitken Mode',
  'Aerosol Sulfate Accumulation Mode',
  'Aerosol Sulfate Coarse Mode',
  'Aerosol soil-derived',
  'SOA from sesquiterpenes',
  'Aerosol titanium Accumulation Mode',
  'Low-volatility SOA from mono-substituted aromatics',
  'High-volatility SOA from mono-substituted aromatics',
  'Non-volatile SOA from mono-substituted aromatics (low-NOx)',
  'Low-volatility SOA from monoterpenes',
  'High-volatility SOA from monoterpenes',
  'Low-volatility SOA from poly-substituted aromatics',
  'High-volatility SOA from poly-substituted aromatics',
  'Non-volatile SOA from poly-substituted aromatics (low-NOx)',
  'chlorine',
  'total cloud transmissivity',
  'layer containing bottom of cloud, or missing = -9999.9',
  'Carbon monoxide',
  'Formic acid',
  'Formyl chloride',
  'Formaldehyde',
  'Hydrogen peroxide',
  'Hydrochloric acid',
  'Nitric acid',
  'Hypochlorous acid',
  'Nitrous acid',
  'Hydronium ion',
  'Methanol',
  'Methylhydroperoxide',
  'Nitrogen pentoxide',
  'Ammonia',
  'Nitrogen monoxide',
  'Nitrogen dioxide',
  'Nitrogen trioxide',
  'Non-precipitating cloud fraction',
  'Model layer containing top of non-precipitating cloud',
  'Non-precipitating cloud transmissivity',
  'Organic nitrate',
  'Ozone',
  'Peroxyacetyl nitrate from Peroxy radical from Aromatic ring opening product',
  'Peroxyacetic acid',
  'Peroxyacetyl nitrate',
  'Higher peroxyacyl nitrate',
  'Pressure at lifting condensation level',
  'Peroxynitric Acid',
  'Precipitating cloud fraction',
  'Precipitating cloud top layer number',
  'Precipitating cloud transmissivity',
  'Rain flag 1 is raining 0 is not raining',
  'Resolved cloud transmissivity',
  'C2+ Organic Hydroperoxide',
  'Sulfur Dioxide',
  'Sulfuric Acid'
);

# DISCOVER EAST covers the Mid-Atlantic states:

my @_discover_east_aconc_variables    = @_discover_conus_aconc_variables;
my @_discover_east_aconc_units        = @_discover_conus_aconc_units;
my @_discover_east_aconc_descriptions = @_discover_conus_aconc_descriptions;

my @_discover_east_aerodiam_variables    = @_discover_conus_aerodiam_variables;
my @_discover_east_aerodiam_units        = @_discover_conus_aerodiam_units;
my @_discover_east_aerodiam_descriptions = @_discover_conus_aerodiam_descriptions;

my @_discover_east_aerovis_variables    = @_discover_conus_aerovis_variables;
my @_discover_east_aerovis_units        = @_discover_conus_aerovis_units;
my @_discover_east_aerovis_descriptions = @_discover_conus_aerovis_descriptions;

my @_discover_east_conc_variables    = @_discover_conus_conc_variables;
my @_discover_east_conc_units        = @_discover_conus_conc_units;
my @_discover_east_conc_descriptions = @_discover_conus_conc_descriptions;

my @_discover_east_depv_variables    = @_discover_conus_depv_variables;
my @_discover_east_depv_units        = @_discover_conus_depv_units;
my @_discover_east_depv_descriptions = @_discover_conus_depv_descriptions;

my @_discover_east_drydep_variables    = @_discover_conus_drydep_variables;
my @_discover_east_drydep_units        = @_discover_conus_drydep_units;
my @_discover_east_drydep_descriptions = @_discover_conus_drydep_descriptions;

my @_discover_east_emis_variables    = @_discover_conus_emis_variables;
my @_discover_east_emis_units        = @_discover_conus_emis_units;
my @_discover_east_emis_descriptions = @_discover_conus_emis_descriptions;

my @_discover_east_metcro2d_variables    = @_discover_conus_metcro2d_variables;
my @_discover_east_metcro2d_units        = @_discover_conus_metcro2d_units;
my @_discover_east_metcro2d_descriptions = @_discover_conus_metcro2d_descriptions;

my @_discover_east_metcro3d_variables    = @_discover_conus_metcro3d_variables;
my @_discover_east_metcro3d_units        = @_discover_conus_metcro3d_units;
my @_discover_east_metcro3d_descriptions = @_discover_conus_metcro3d_descriptions;

my @_discover_east_noy_variables    = @_discover_conus_noy_variables;
my @_discover_east_noy_units        = @_discover_conus_noy_units;
my @_discover_east_noy_descriptions = @_discover_conus_noy_descriptions;

my @_discover_east_pm25_variables    = @_discover_conus_pm25_variables;
my @_discover_east_pm25_units        = @_discover_conus_pm25_units;
my @_discover_east_pm25_descriptions = @_discover_conus_pm25_descriptions;

my @_discover_east_soilinp_variables    = @_discover_conus_soilinp_variables;
my @_discover_east_soilinp_units        = @_discover_conus_soilinp_units;
my @_discover_east_soilinp_descriptions = @_discover_conus_soilinp_descriptions;

my @_discover_east_ssemis_variables    = @_discover_conus_ssemis_variables;
my @_discover_east_ssemis_units        = @_discover_conus_ssemis_units;
my @_discover_east_ssemis_descriptions = @_discover_conus_ssemis_descriptions;

my @_discover_east_wetdep1_variables    = @_discover_conus_wetdep1_variables;
my @_discover_east_wetdep1_units        = @_discover_conus_wetdep1_units;
my @_discover_east_wetdep1_descriptions =@_discover_conus_wetdep1_descriptions;

my @_discover_east_wetdep2_variables    = @_discover_conus_wetdep2_variables;
my @_discover_east_wetdep2_units        = @_discover_conus_wetdep2_units;
my @_discover_east_wetdep2_descriptions = @_discover_conus_wetdep2_descriptions;


# DISCOVER MD covers Baltimore, MD region:

my @_discover_md_aconc_variables    = @_discover_conus_aconc_variables;
my @_discover_md_aconc_units        = @_discover_conus_aconc_units;
my @_discover_md_aconc_descriptions = @_discover_conus_aconc_descriptions;

my @_discover_md_aerodiam_variables    = @_discover_conus_aerodiam_variables;
my @_discover_md_aerodiam_units        = @_discover_conus_aerodiam_units;
my @_discover_md_aerodiam_descriptions = @_discover_conus_aerodiam_descriptions;

my @_discover_md_aerovis_variables    = @_discover_conus_aerovis_variables;
my @_discover_md_aerovis_units        = @_discover_conus_aerovis_units;
my @_discover_md_aerovis_descriptions = @_discover_conus_aerovis_descriptions;

my @_discover_md_conc_variables    = @_discover_conus_conc_variables;
my @_discover_md_conc_units        = @_discover_conus_conc_units;
my @_discover_md_conc_descriptions = @_discover_conus_conc_descriptions;

my @_discover_md_depv_variables    = @_discover_conus_depv_variables;
my @_discover_md_depv_units        = @_discover_conus_depv_units;
my @_discover_md_depv_descriptions = @_discover_conus_depv_descriptions;

my @_discover_md_drydep_variables    = @_discover_conus_drydep_variables;
my @_discover_md_drydep_units        = @_discover_conus_drydep_units;
my @_discover_md_drydep_descriptions = @_discover_conus_drydep_descriptions;

my @_discover_md_emis_variables    = @_discover_conus_emis_variables;
my @_discover_md_emis_units        = @_discover_conus_emis_units;
my @_discover_md_emis_descriptions = @_discover_conus_emis_descriptions;

my @_discover_md_metcro2d_variables    = @_discover_conus_metcro2d_variables;
my @_discover_md_metcro2d_units        = @_discover_conus_metcro2d_units;
my @_discover_md_metcro2d_descriptions = @_discover_conus_metcro2d_descriptions;

my @_discover_md_metcro3d_variables    = @_discover_conus_metcro3d_variables;
my @_discover_md_metcro3d_units        = @_discover_conus_metcro3d_units;
my @_discover_md_metcro3d_descriptions = @_discover_conus_metcro3d_descriptions;

my @_discover_md_noy_variables    = @_discover_conus_noy_variables;
my @_discover_md_noy_units        = @_discover_conus_noy_units;
my @_discover_md_noy_descriptions = @_discover_conus_noy_descriptions;

my @_discover_md_pm25_variables    = @_discover_conus_pm25_variables;
my @_discover_md_pm25_units        = @_discover_conus_pm25_units;
my @_discover_md_pm25_descriptions = @_discover_conus_pm25_descriptions;

my @_discover_md_soilinp_variables    = @_discover_conus_soilinp_variables;
my @_discover_md_soilinp_units        = @_discover_conus_soilinp_units;
my @_discover_md_soilinp_descriptions = @_discover_conus_soilinp_descriptions;

my @_discover_md_ssemis_variables    = @_discover_conus_ssemis_variables;
my @_discover_md_ssemis_units        = @_discover_conus_ssemis_units;
my @_discover_md_ssemis_descriptions = @_discover_conus_ssemis_descriptions;

my @_discover_md_wetdep1_variables    = @_discover_conus_wetdep1_variables;
my @_discover_md_wetdep1_units        = @_discover_conus_wetdep1_units;
my @_discover_md_wetdep1_descriptions =@_discover_conus_wetdep1_descriptions;

my @_discover_md_wetdep2_variables    = @_discover_conus_wetdep2_variables;
my @_discover_md_wetdep2_units        = @_discover_conus_wetdep2_units;
my @_discover_md_wetdep2_descriptions = @_discover_conus_wetdep2_descriptions;



# AMAD (Rohit) Northern Hemisphere run (AEROVIS only until we have more disks):

my @_amad_hemi_aerovis_variables = (
  'ext_mie', 'ext_recon'
);

my @_amad_hemi_aerovis_units = (
  '1/km', '1/km'
);

my @_amad_hemi_aerovis_descriptions = (
  'hourly extinction coefficient', 'hourly extinction coefficient'
);



# AMAD (Donna) CONUS run:


my @_amad_conus_aconc_variables = (
  'aacd', 'aalj', 'aalkj', 'abnz1j', 'abnz2j', 'abnz3j', 'acaj',
  'acli', 'aclj', 'aclk', 'acors', 'aeci', 'aecj', 'afej',
  'ah2oi', 'ah2oj', 'ah2ok', 'aiso1j', 'aiso2j', 'aiso3j', 'akj', 'ald2',
  'aldx', 'amgj', 'amnj', 'anai', 'anaj', 'anh4i', 'anh4j', 'anh4k',
  'ano3i', 'ano3j', 'ano3k', 'aolgaj', 'aolgbj', 'aorgcj',
  'aothri', 'aothrj', 'apncomi', 'apncomj', 'apoci', 'apocj', 'aseacat',
  'asij', 'aso4i', 'aso4j', 'aso4k', 'asoil', 'asqtj', 'atij',
  'atol1j', 'atol2j', 'atol3j', 'atrp1j', 'atrp2j',
  'axyl1j', 'axyl2j', 'axyl3j', 'benzene', 'benzro2', 'bnzhrxn', 'bnznrxn',
  'c2o3', 'cao2', 'cat1', 'cl', 'cl2', 'clo', 'co', 'cres', 'crn2',
  'crno', 'cro', 'cron', 'crpx', 'cxo3', 'eth', 'etha', 'etoh',
  'facd', 'fmcl', 'form', 'h2o2', 'hcl', 'hco3', 'hno3', 'ho2', 'hocl',
  'hono', 'iole', 'isop', 'isoprxn', 'ispd', 'meo2', 'meoh', 'mepx', 'mgly',
  'n2o5', 'nh3', 'no', 'no2', 'no3', 'ntr', 'numacc', 'numatkn', 'numcor',
  'o', 'o1d', 'o3', 'oh', 'ole', 'opan', 'open', 'opo3', 'pacd',
  'pan', 'panx', 'par', 'pna', 'rooh', 'ror', 'sesq', 'sesqrxn', 'so2',
  'srfacc', 'srfatkn', 'srfcor', 'sulf', 'sulrxn',
  'sv_alk', 'sv_bnz1', 'sv_bnz2', 'sv_iso1', 'sv_iso2', 'sv_sqt',
  'sv_tol1', 'sv_tol2', 'sv_trp1', 'sv_trp2', 'sv_xyl1', 'sv_xyl2', 'terp',
  'to2', 'tol', 'tolhrxn', 'tolnrxn', 'tolro2', 'trprxn', 'xo2', 'xo2n',
  'xyl', 'xylhrxn', 'xylnrxn', 'xylro2'
);

my @_amad_conus_aconc_units = (
  'ppmV', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3',
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3',
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ppmV', 'ppmV', 'ug/m3',
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3',
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3',
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3',
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3',
  'ug/m3', 'ug/m3', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV',
  'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV',
  'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV',
  'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV',
  'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV',
  'ppmV', 'ppmV', 'number/m3', 'number/m3', 'number/m3', 'ppmV', 'ppmV',
  'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV',
  'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'm2/m3', 'm2/m3',
  'm2/m3', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV',
  'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV',
  'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV', 'ppmV',
  'ppmV'
);

my @_amad_conus_aconc_descriptions = (
  'Acetic And Higher Carboxylic Acids',
  'Aerosol Aluminum Accumulation Mode',
  'SOA from alkanes',
  'Low-volatility SOA from benzene',
  'High-volatility SOA from benzene',
  'Non-volatile SOA from benzene (low-NOx)',
  'Aerosol Calcium Accumulation Mode',
  'Aerosol Chlorine Aitken Mode',
  'Aerosol Chlorine Accumulation Mode',
  'Aerosol Chlorine Coarse Mode',
  'Aerosol Course Mode Anthropogenic Mass',
  'Aerosol Elemental Carbon Mass Aitken Mode',
  'Aerosol Elemental Carbon Mass Accumulation Mode',
  'Aerosol Iron Elemental Accumulation Mode',
  'Aerosol Water Aitken Mode',
  'Aerosol Water Accumulation Mode',
  'Aerosol Water Coarse Mode',
  'High-volatility SOA from isoprene',
  'Low-volatility SOA from isoprene',
  'Acid-enhanced SOA from isoprene',
  'Counter species for computing SOA from ISOP',
  'High Melecular Weight Aldehydes',
  'C3+ Aldehydes',
  'Aerosol Magnesium Aitken Mode',
  'Aerosol Manganese Accumulation Mode',
  'Aerosol Sodium Aitken Mode',
  'Aerosol Sodium Accumulation Mode',
  'Aerosol Ammonium Aitken Mode',
  'Aerosol Ammonium Accumulation Mode',
  'Aerosol Ammonium Coarse Mode',
  'Aerosol Nitrate Aitken Mode',
  'Aerosol Nitrate Accumulation Mode',
  'Aerosol Nitrate Coarse Mode',
  'Oligomers from semi-volatile anthropogenic SOA species',
  'Oligomers from semi-volatile biogenic SOA species',
  'SOA from in-cloud oxidation of dialdehydes',
  'Aerosol Other Aitken Mode',
  'Aerosol Other Accumulation Mode',
  'Aerosol primary non-carbon organic matter Aitken Mode',
  'Aerosol primary non-carbon organic matter Accumulation Mode',
  'Aerosol particle oxidation catalysts Aitken Mode',
  'Aerosol particle oxidation catalysts Accumulation Mode',
  'Aerosol sea salt',
  'Aerosol silicon Accumulation Mode',
  'Aerosol Sulfate Aitken Mode',
  'Aerosol Sulfate Accumulation Mode',
  'Aerosol Sulfate Coase Mode',
  'Aerosol coarse mode soil-derived mass',
  'SOA from sesquiterpenes',
  'Aerosol titanium Accumulation Mode',
  'Low-volatility SOA from mono-substituted aromatics',
  'High-volatility SOA from mono-substituted aromatics',
  'Non-volatile SOA from mono-substituted aromatics (low-NOx)',
  'Low-volatility SOA from monoterpenes',
  'High-volatility SOA from monoterpenes',
  'Low-volatility SOA from poly-substituted aromatics',
  'High-volatility SOA from poly-substituted aromatics',
  'Non-volatile SOA from poly-substituted aromatics (low-NOx)',
  'Benzene',
  'First generation SOA intermediate from benzene oxidation',
  'Counter species for computing SOA from BENZENE under low NOx conditions',
  'Counter species for computing SOA from BENZENE under high NOx conditions',
  'Peroxy Radical from Methyl-catechol',
  'Acetyl Peroxy Radical',
  'Methyl-catechol',
  'Chlorides',
  'Elemental Chlorine',
  'Hypoclorite',
  'Carbon Monoxide',
  'Cresol And Higher Molecular Weight Phenois',
  'Chromium nitride',
  'Methylphenoxy Radical',
  'nitrocresol',
  'C3+ Peroxyacetyl Radicals',
  'Nitro-cresol from hydroperoxide',
  'Higher acylperoxy radical',
  'Ethene',
  'Ethane',
  'Ethanol',
  'Formic Acid',
  'Formyl Chloride',
  'Formaldehyde',
  'Peroxide',
  'Hydrocloric Acid',
  'Radical formed when formaldehyde reacts with HO2',
  'Nitric Acid',
  'Hydroperoxy Radical',
  'Hypochlorous acid',
  'Nitrous Acid',
  'Internal Olefins',
  'Isoprene',
  'Counter species for computing SOA from ISOP',
  'Isoprene Product',
  'Methyl Peroxy Radical',
  'Methanol',
  'Methyl Hydroperoxide',
  'Methylglyoxal And Other Aeromatic Products',
  'Dinitrate Pentoxide',
  'Ammonia',
  'Nitrogen Oxide',
  'Nitrogen Dioxide',
  'Nitrogen Trioxide',
  'Nitrate',
  'Accumulation Mode Number',
  'Aitken Mode Number',
  'Coarse Mode Number',
  'Oxygen Atom In The O3(P) Electronic State',
  'Oxygen Atom In The O1(D) Electronic State',
  'Ozone',
  'Hydroxyl Radical',
  'Terminal Olefin Carbon Bond',
  'Peroxyacetyl nitrate from Peroxy radical from Aromatic ring opening product',
  'Aromatic Ring Opening Product',
  'Peroxy radical from Aromatic ring opening product',
  'Peroxyacetic And Higher Peroxycarboxylic Acids',
  'Peroxy Acetyl Nitrate',
  'C3+ PANs',
  'Paraffin Carbon Bond',
  'Peroxynitric Acid',
  'C2+ Organic Hydroperoxide',
  'Secondary Alkoxy Radical',
  'Sesquiterpene',
  'Counter species for computing SOA from SESQ',
  'Sulfur Dioxide',
  'Accumulation Mode Surface Area',
  'Aitken Mode Surface Area',
  'Coarse Mode Surface Area',
  'Sulfuric Acid',
  'Counter species for computing aerosols from SULF',
  'Semi-volatile alkanes',
  'Semi-volatile SOA from benzene1',
  'Semi-volatile SOA from benzene2',
  'Semi-volatile SOA from isoprene1',
  'Semi-volatile SOA from isoprene2',
  'Semi-volatile SOA from sesquiterpene',
  'Semi-volatile SOA from Toluene1',
  'Semi-volatile SOA from Toluene2',
  'Semi-volatile SOA from Terpene1',
  'Semi-volatile SOA from Terpene2',
  'Semi-volatile SOA from Xylene1',
  'Semi-volatile SOA from Xylene2',
  'Terpene',
  'Toluene-Hydroxyl Radical Adduct',
  'Toluene And Other Monoalkyl Aromatics',
  'tolhrxn?',
  'tolnrxn?',
  'tolro2?',
  'trprxn?',
  'Peroxy Radical Operator',
  'NO To Organic Nitrate Conversion From Alkylperoxy Radical',
  'Xylene And Other Polyalkyl Aromatics',
  'xylhrxn?',
  'xylnrxn?',
  'xylro2?'
);


my @_amad_conus_aerodiam_variables = (
  'dgacc_dry',
  'dgacc_wet',
  'dgatkn_dry',
  'dgatkn_wet',
  'dgcor_dry',
  'dgcor_wet',
  'gamma_n2o5',
  'm2acc_wet',
  'm2atkn_wet',
  'm2cor_wet',
  'm3acc_dry',
  'm3acc_wet',
  'm3atkn_dry',
  'm3atkn_wet',
  'm3cor_dry',
  'm3cor_wet',
  'pm25ac',
  'pm25at',
  'pm25co',
  'rh',
  'stdevacc',
  'stdevatkn',
  'stdevcor'
);

my @_amad_conus_aerodiam_units = (
  'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3', 'ug/m3',
  '-', 'm2/m3', 'm2/m3',
  'm3/m3', 'm3/m3', 'm3/m3', 'm3/m3',
  'm3/m3', 'm3/m3', '-', '-', '-', '-', '-', '-', '-', '-'
);

my @_amad_conus_aerodiam_descriptions = (
  'Geometric Diameter Of Accumulation Mode Without Water',
  'Geometric Diameter Of Accumulation Mode With Water',
  'Geometric Diameter Of Aitken Mode Without Water',
  'Geometric Diameter Of Aitken Mode With Water',
  'Coarse mode mean diameter without water',
  'Coarse mode mean diameter with water',
  'N2O5 Heterogeneous reaction probability',
  'Accumulation mode 2nd moment (wet)',
  'Aitken mode 2nd moment (wet)',
  'Coarse mode 2nd moment (wet)',
  'Accumulation mode 3rd moment (dry)',
  'Accumulation mode 3rd moment (wet)',
  'Aitken mode 3rd moment (dry)',
  'Aitken mode 3rd moment (wet)',
  'Coarse mode 3rd moment (dry)',
  'Coarse mode 3rd moment (wet)',
  'Fine fraction of accumulation mode',
  'Fine fraction of Aitken mode',
  'Fine fraction of coarse mode',
  'Relative humiditity',
  'Accumulation mode standard deviation (dry and wet)',
  'Aitken mode standard deviation (dry and wet)',
  'Coarse mode standard deviation (dry and wet)'
);


my @_amad_conus_aerovis_variables = (
  'dcv_mie', 'dcv_recon', 'ext_mie', 'ext_recon'
);

my @_amad_conus_aerovis_units = (
  'deciview', 'deciview', '1/km', '1/km'
);

my @_amad_conus_aerovis_descriptions = (
  'hourly visual range', 'hourly visual range',
  'hourly extinction coefficient', 'hourly extinction coefficient'
);

my @_amad_conus_aod_variables = ( 'aod' );
my @_amad_conus_aod_units = ( '-' );
my @_amad_conus_aod_descriptions = ( 'aerosol optical depth' );

my @_amad_conus_b3gts_s_variables = (
  'ald2',
  'aldx',
  'co',
  'eth',
  'etha',
  'etoh',
  'form',
  'iole',
  'isop',
  'meoh',
  'no',
  'ole',
  'par',
  'sesq',
  'terp'
);

my @_amad_conus_b3gts_s_units = (
  'gm/s',
  'gm/s',
  'gm/s',
  'gm/s',
  'gm/s',
  'gm/s',
  'gm/s',
  'gm/s',
  'gm/s',
  'gm/s',
  'gm/s',
  'gm/s',
  'gm/s',
  'gm/s',
  'gm/s'
);

my @_amad_conus_b3gts_s_descriptions = (
  'CMAQ modeled biogenic emissions of Acetaldehyde',
  'CMAQ modeled biogenic emissions of Propionaldehyde and higher aldehydes',
  'CMAQ modeled biogenic emissions of Carbon Monoxide',
  'CMAQ modeled biogenic emissions of Ethene',
  'CMAQ modeled biogenic emissions of Ethane',
  'CMAQ modeled biogenic emissions of Ethanol',
  'CMAQ modeled biogenic emissions of Formaldehyde',
  'CMAQ modeled biogenic emissions of Internal olefin carbon bond',
  'CMAQ modeled biogenic emissions of Isoprene',
  'CMAQ modeled biogenic emissions of Methanol',
  'CMAQ modeled biogenic emissions of Nitrogen Monoxide',
  'CMAQ modeled biogenic emissions of Terminal olefin carbon bond',
  'CMAQ modeled biogenic emissions of Paraffin carbon bond',
  'CMAQ modeled biogenic emissions of Sesquiterpene',
  'CMAQ modeled biogenic emissions of Terpene'
);

my @_amad_conus_conc_variables = (
  'ald2',
  'anh4i',
  'anh4j',
  'anh4k',
  'ano3i',
  'ano3j',
  'ano3k',
  'aso4i',
  'aso4j',
  'aso4k',
  'co',
  'form',
  'h2o2',
  'hno3',
  'ho2',
  'hono',
  'isop',
  'n2o5',
  'nh3',
  'no',
  'no2',
  'no3',
  'ntr',
  'o3',
  'oh',
  'pan',
  'panx',
  'pna',
  'sesq',
  'so2',
  'terp',
  'w_vel'
);

my @_amad_conus_conc_units = (
  'ppmV',
  'micrograms/m**3',
  'micrograms/m**3',
  'micrograms/m**3',
  'micrograms/m**3',
  'micrograms/m**3',
  'micrograms/m**3',
  'micrograms/m**3',
  'micrograms/m**3',
  'micrograms/m**3',
  'ppmV',
  'ppmV',
  'ppmV',
  'ppmV',
  'ppmV',
  'ppmV',
  'ppmV',
  'ppmV',
  'ppmV',
  'ppmV',
  'ppmV',
  'ppmV',
  'ppmV',
  'ppmV',
  'ppmV',
  'ppmV',
  'ppmV',
  'ppmV',
  'ppmV',
  'ppmV',
  'ppmV',
  'm/s'
);

my @_amad_conus_conc_descriptions = (
  'CMAQ modeled Aerosol High Molecular Weight Aldehydes',
  'CMAQ modeled Aerosol Ammonium Aitken Mode',
  'CMAQ modeled Aerosol Ammonium Accumulation Mode',
  'CMAQ modeled Aerosol Ammonium Coarse Mode',
  'CMAQ modeled Aerosol Nitrate Aitken Mode',
  'CMAQ modeled Aerosol Nitrate Accumulation Mode',
  'CMAQ modeled Aerosol Nitrate Coarse Mode',
  'CMAQ modeled Aerosol Sulfate Aitken Mode',
  'CMAQ modeled Aerosol Sulfate Accumulation Mode',
  'CMAQ modeled Aerosol Sulfate Coarse Mode',
  'CMAQ modeled Aerosol Carbon Monoxide',
  'CMAQ modeled Aerosol Formaldehyde',
  'CMAQ modeled Aerosol Hydrogen peroxide',
  'CMAQ modeled Aerosol Nitric Acid',
  'CMAQ modeled Aerosol Hydroperoxy Radical',
  'CMAQ modeled Aerosol Nitrous acid',
  'CMAQ modeled Aerosol Isoprene',
  'CMAQ modeled Aerosol Nitrogen pentoxide',
  'CMAQ modeled Aerosol Ammonia',
  'CMAQ modeled Aerosol Nitric oxide',
  'CMAQ modeled Aerosol Nitrogen dioxide',
  'CMAQ modeled Aerosol Nitrate',
  'CMAQ modeled Aerosol Organic Nitrate',
  'CMAQ modeled Aerosol Ozone',
  'CMAQ modeled Aerosol Hydroxyl radical',
  'CMAQ modeled Aerosol Peroxyacyl nitrate',
  'CMAQ modeled Aerosol C3 and higher peroxyacyl nitrates',
  'CMAQ modeled Aerosol Peroxynitric Acid',
  'CMAQ modeled Aerosol Sesquiterpene',
  'CMAQ modeled Aerosol Sulfur Dioxide',
  'CMAQ modeled Aerosol Terpene',
  'CMAQ modeled Vertical component of wind velocity'
);

my @_amad_conus_depv_variables = (
  'vd_ald', 'vd_cl2', 'vd_co', 'vd_fmcl', 'vd_gen_ald', 'vd_h2o2', 'vd_hcho',
  'vd_hcl', 'vd_hno3', 'vd_hocl', 'vd_hono', 'vd_methanol', 'vd_n2o5',
  'vd_nh3', 'vd_no', 'vd_no2', 'vd_no3', 'vd_o3', 'vd_op', 'vd_ora',
  'vd_paa', 'vd_pan', 'vd_so2', 'vd_sulf', 'vmassc', 'vmassi', 'vmassj',
  'vnumacc', 'vnumatkn', 'vnumcor', 'vsrfacc', 'vsrfatkn', 'vsrfcor'
);

my @_amad_conus_depv_units = (
  'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec',
  'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec',
  'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec',
  'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec',
  'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec', 'cm/sec'
);

my @_amad_conus_depv_descriptions = (
  'ald?',
  'cl2?',
  'Carbon Monoxide',
  'fmcl?',
  'gen_ald?',
  'Peroxide',
  'hcho?',
  'Hydrochloric Acid',
  'Nitric Acid',
  'hocl?',
  'Nitrous Acid',
  'Methanol',
  'Dinitrate Pentoxide',
  'Ammonia',
  'Nitrogen Oxide',
  'Nitrogen Dioxide',
  'Nitrogen Trioxide',
  'Ozone',
  'op?',
  'ora?',
  'paa?',
  'Peroxy Acetyl Nitrate',
  'Sulfur Dioxide',
  'Sulfuric Acid',
  'vmassc?',
  'vmassi?',
  'vmassj?',
  'vnumacc?',
  'vnumatkn?',
  'vnumcor?',
  'vsrfacc?',
  'vsrfatkn?',
  'vsrfcor?'
);

my @_amad_conus_drydep_variables = (
  'aacd',
  'aalj',
  'aalkj',
  'abnz1j',
  'abnz2j',
  'abnz3j',
  'acaj',
  'aclj',
  'aclk',
  'acors',
  'aeci',
  'aecj',
  'afej',
  'aiso1j',
  'aiso2j',
  'aiso3j',
  'akj',
  'ald2',
  'aldx',
  'amgj',
  'amnj',
  'anaj',
  'anh4i',
  'anh4j',
  'anh4k',
  'ano3i',
  'ano3j',
  'ano3k',
  'aolgaj',
  'aolgbj',
  'aorgcj',
  'aothrj',
  'apncomi',
  'apncomj',
  'apoci',
  'apocj',
  'aseacat',
  'asij',
  'aso4i',
  'aso4j',
  'aso4k',
  'asoil',
  'asqtj',
  'atij',
  'atol1j',
  'atol2j',
  'atol3j',
  'atrp1j',
  'atrp2j',
  'axyl1j',
  'axyl2j',
  'axyl3j',
  'cl2',
  'co',
  'crpx',
  'facd',
  'fmcl',
  'form',
  'h2o2',
  'hcl',
  'hno3',
  'hocl',
  'hono',
  'meoh',
  'mepx',
  'n2o5',
  'nh3',
  'no',
  'no2',
  'no3',
  'ntr',
  'o3',
  'opan',
  'pacd',
  'pan',
  'panx',
  'rooh',
  'so2',
  'sulf'
);

my @_amad_conus_drydep_units = (
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare',
  'kg/hectare'
);

my @_amad_conus_drydep_descriptions = (
  'Acetic And Higher Carboxylic Acids',
  'Aerosol Aluminum Accumulation Mode',
  'SOA from alkanes',
  'Low-volatility SOA from benzene',
  'High-volatility SOA from benzene',
  'Non-volatile SOA from benzene (low-NOx)',
  'Aerosol Calcium Accumulation Mode',
  'Aerosol Chlorine Aitken Mode',
  'Aerosol Chlorine Accumulation Mode',
  'Aerosol Chlorine Coarse Mode',
  'Aerosol Course Mode Anthropogenic Mass',
  'Aerosol Elemental Carbon Mass Aitken Mode',
  'Aerosol Elemental Carbon Mass Accumulation Mode',
  'Aerosol Iron Elemental Accumulation Mode',
  'High-volatility SOA from isoprene',
  'Low-volatility SOA from isoprene',
  'Acid-enhanced SOA from isoprene',
  'Fine mode potassium',
  'High Melecular Weight Aldehydes',
  'C3+ Aldehydes',
  'Aerosol Magnesium Aitken Mode',
  'Aerosol Manganese Accumulation Mode',
  'Aerosol Sodium Accumulation Mode',
  'Aerosol Ammonium Aitken Mode',
  'Aerosol Ammonium Accumulation Mode',
  'Aerosol Ammonium Coarse Mode',
  'Aerosol Nitrate Aitken Mode',
  'Aerosol Nitrate Accumulation Mode',
  'Aerosol Nitrate Coarse Mode',
  'Oligomers from semi-volatile anthropogenic SOA species',
  'Oligomers from semi-volatile biogenic SOA species',
  'Aerosol organic carbon Accumulation Mode',
  'Aerosol other carbon Accumulation Mode',
  'Aerosol primary non-carbon organic matter Aitken Mode',
  'Aerosol primary non-carbon organic matter Accumulation Mode',
  'Aerosol particle oxidation catalysts Aitken Mode',
  'Aerosol particle oxidation catalysts Accumulation Mode',
  'Aerosol sea salt',
  'Aerosol silicon Accumulation Mode',
  'Aerosol Sulfate Aitken Mode',
  'Aerosol Sulfate Accumulation Mode',
  'Aerosol Sulfate Coase Mode',
  'Aerosol coarse mode soil-derived mass',
  'SOA from sesquiterpenes',
  'Aerosol titanium Accumulation Mode',
  'Low-volatility SOA from mono-substituted aromatics',
  'High-volatility SOA from mono-substituted aromatics',
  'Non-volatile SOA from mono-substituted aromatics (low-NOx)',
  'Low-volatility SOA from monoterpenes',
  'High-volatility SOA from monoterpenes',
  'Low-volatility SOA from poly-substituted aromatics',
  'High-volatility SOA from poly-substituted aromatics',
  'Non-volatile SOA from poly-substituted aromatics (low-NOx)',
  'Elemental Chlorine',
  'Carbon Monoxide',
  'Nitro-cresol from hydroperoxide',
  'Formic acid',
  'Formyl chloride',
  'Formaldehyde',
  'Hydrogen peroxide',
  'Hydrochloric acid',
  'Nitric acid',
  'Hypochlorous acid',
  'Nitrous acid',
  'Methylhydroperoxide',
  'Nitrogen pentoxide',
  'Ammonia',
  'Nitrogen monoxide',
  'Nitrogen dioxide',
  'Nitrogen trioxide',
  'Organic nitrate',
  'Ozone',
  'Peroxyacetyl nitrate from Peroxy radical from Aromatic ring opening product',
  'Peroxyacetic acid',
  'Peroxyacetyl nitrate',
  'Higher peroxyacyl nitrate',
  'Higher organic peroxide',
  'Sulfur Dioxide',
  'Sulfuric Acid'
);

my @_amad_conus_emis_variables = (
  'acrolein',
  'ald2',
  'ald2_primary',
  'aldx',
  'benzene',
  'butadiene13',
  'ch4',
  'cl2',
  'co',
  'eth',
  'etha',
  'etoh',
  'form',
  'form_primary',
  'hcl',
  'hflux',
  'hono',
  'iole',
  'isop',
  'meoh',
  'naphthalene',
  'nh3',
  'nh3_fert',
  'no',
  'no2',
  'nvol',
  'ole',
  'pal',
  'par',
  'pca',
  'pcl',
  'pec',
  'pfe',
  'ph2o',
  'pk',
  'pmc',
  'pmfine',
  'pmg',
  'pmn',
  'pmothr',
  'pna',
  'pncom',
  'pnh4',
  'pno3',
  'poc',
  'psi',
  'pso4',
  'pti',
  'so2',
  'sulf',
  'terp',
  'tol',
  'unk',
  'unr',
  'voc_inv',
  'xyl'
);

my @_amad_conus_emis_units = (
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'g/s',
  'moles/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'g/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s',
  'moles/s'
);

my @_amad_conus_emis_descriptions = (
  'CMAQ modeled emissions of acrolein',
  'CMAQ modeled emissions of Acetaldehyde',
  'CMAQ modeled emissions of Primary Acetaldehyde',
  'CMAQ modeled emissions of Propionaldehyde and higher aldehydes',
  'CMAQ modeled emissions of benzene',
  'CMAQ modeled emissions of butadiene13',
  'CMAQ modeled emissions of methane',
  'CMAQ modeled emissions of chlorine',
  'CMAQ modeled emissions of carbon monoxide',
  'CMAQ modeled emissions of ethene',
  'CMAQ modeled emissions of ethane',
  'CMAQ modeled emissions of Ethanol',
  'CMAQ modeled emissions of Formaldehyde',
  'CMAQ modeled emissions of Formaldehyde primary',
  'CMAQ modeled emissions of Hydrogen chloride',
  'CMAQ modeled emissions of hflux',
  'CMAQ modeled emissions of Nitrous acid',
  'CMAQ modeled emissions of Internal olefin carbon bond',
  'CMAQ modeled emissions of Isoprene',
  'CMAQ modeled emissions of Methanol',
  'CMAQ modeled emissions of naphthalene',
  'CMAQ modeled emissions of Ammonia',
  'CMAQ modeled emissions of Ammonia from fertilizer',
  'CMAQ modeled emissions of nitric oxide',
  'CMAQ modeled emissions of Nitrogen Dioxide',
  'CMAQ modeled emissions of Nonvolatile Carbon',
  'CMAQ modeled emissions of Terminal olefin carbon bond',
  'CMAQ modeled emissions of fine mode aluminum',
  'CMAQ modeled emissions of Paraffin Carbon Bond',
  'CMAQ modeled emissions of fine mode calcium',
  'CMAQ modeled emissions of fine mode chlorine',
  'CMAQ modeled emissions of Elemental Carbon',
  'CMAQ modeled emissions of fine mode iron',
  'CMAQ modeled emissions of fine mode particulate water',
  'CMAQ modeled emissions of fine mode potassium',
  'CMAQ modeled emissions of Coarse mode primary particulate matter',
  'CMAQ modeled emissions of Fine mode primary particulate matter',
  'CMAQ modeled emissions of Fine mode magnesium',
  'CMAQ modeled emissions of Fine mode manganese',
  'CMAQ modeled emissions of fine mode primary particulate matter',
  'CMAQ modeled emissions of Fine mode sodium',
  'CMAQ modeled emissions of Fine mode primary non-carbon organic matter',
  'CMAQ modeled emissions of Fine particulate ammonium',
  'CMAQ modeled emissions of Fine mode nitrate',
  'CMAQ modeled emissions of Fine mode primary organic carbon',
  'CMAQ modeled emissions of Fine mode silicon',
  'CMAQ modeled emissions of Fine mode sulfate',
  'CMAQ modeled emissions of Fine mode titanium',
  'CMAQ modeled emissions of Fine mode sulfur dioxide',
  'CMAQ modeled emissions of Fine mode sulfate',
  'CMAQ modeled emissions of Fine mode terpene',
  'CMAQ modeled emissions of Fine mode Toluene And Other Monoalkyl Aromatics',
  'CMAQ modeled emissions of Unknown',
  'CMAQ modeled emissions of Unreactive',
  'CMAQ modeled emissions of volatile organic componds inv',
  'CMAQ modeled emissions of Xylene And Other Polyalkyl Aromatics'
);

my @_amad_conus_ext_variables = ( 'extinction');
my @_amad_conus_ext_units = ( '1/km');
my @_amad_conus_ext_descriptions = ( 'Block extinction (reconstructed)');


my @_amad_conus_ltngdiag_variables = ( 'no');
my @_amad_conus_ltngdiag_units = ( 'mol/s');
my @_amad_conus_ltngdiag_descriptions = (
  'hourly average NO produced from lightning'
);

my @_amad_conus_media_variables = (
  'Gamma1',
  'Gamma2',
  'MHpsl1',
  'MHpsl2'
);

my @_amad_conus_media_units = (
  '-',
  '-',
  'mol/l',
  'mol/l'
);

my @_amad_conus_media_descriptions = (
  'NH4+/H+ in Soil layer 1',
  'NH4+/H+ in Soil layer 2',
  'Molar H+ in Soil layer 1',
  'Molar H+ in Soil layer 2'
);


my @_amad_conus_metcro2d_variables = (
  'cfrac',
  'cldb',
  'cldt',
  'glw',
  'gsw',
  'hfx',
  'lai',
  'moli',
  'pbl',
  'prsfc',
  'q2',
  'qfx',
  'radyni',
  'rc',
  'rgrnd',
  'rn',
  'rstomi',
  'seaice',
  'sltyp',
  'snocov',
  'soim1',
  'soim2',
  'soit1',
  'soit2',
  'temp2',
  'tempg',
  'ustar',
  'veg',
  'wbar',
  'wdir10',
  'wr',
  'wspd10',
  'wstar',
  'zruf'
);

my @_amad_conus_metcro2d_units = (
  'fraction',
  'm',
  'm',
  'watts/m**2',
  'watts/m**2',
  'watts/m**2',
  'area/area',
  '1/m',
  'm',
  'pascal',
  'kg/kg',
  'watts/m**2',
  'm/s',
  'cm',
  'watts/m**2',
  'cm',
  'm/s',
  'fraction',
  'category',
  'decimal',
  'm**3/m**3',
  'm**3/m**3',
  'k',
  'k',
  'k',
  'k',
  'm/s',
  'decimal',
  'g/m**3',
  'degrees',
  'm',
  'm/s',
  'm/s',
  'm'
);

my @_amad_conus_metcro2d_descriptions = (
  'total cloud fraction',
  'cloud bottom layer height (m)',
  'cloud top layer height (m)',
  'longwave radiation at ground',
  'solar radiation absorbed at ground',
  'sensible heat flux',
  'leaf-area index',
  'inverse of Monin-Obukhov length',
  'PBL height',
  'surface pressure',
  'mixing ratio at 2 m',
  'latent heat flux',
  'inverse of aerodynamic resistance',
  'convective pcpn per met TSTEP',
  'solar rad reaching sfc',
  'nonconvec. pcpn per met TSTEP',
  'inverse of bulk stomatal resistance',
  'sea ice (fraction)',
  'soil texture type by USDA category',
  'snow cover',
  'volumetric soil moisture in top cm',
  'volumetric soil moisture in top m',
  'soil temperature in top cm',
  'soil temperature in top m',
  'temperature at 2 m',
  'skin temperature at ground',
  'cell averaged friction velocity',
  'vegetation coverage (decimal)',
  'avg. liquid water content of cloud',
  'wind direction at 10 m',
  'canopy moisture content',
  'wind speed at 10 m',
  'convective velocity scale',
  'surface roughness length'
);


my @_amad_conus_metcro3d_variables = (
  'dens', 'densa_j', 'jacobf', 'jacobm', 'pres',
  'pv',
  'qc', 'qg', 'qi', 'qr', 'qs', 'qv', 'ta', 'what_jd', 'wwind', 'zf', 'zh'
);

my @_amad_conus_metcro3d_units = (
  'kg/m3', 'kg/m2', 'm', 'm', 'Pa',
  'm^2*k/kg/s/10^6',
  'kg/kg', 'kg/kg', 'kg/kg', 'kg/kg', 'kg/kg', 'kg/kg', 'K', 'kg/m2', 'm/s',
  'm', 'm'
);

my @_amad_conus_metcro3d_descriptions = (
  'total density of air',
  'J weighted total air density',
  'total Jacobian at layer face',
  'total Jacobian at layer middle',
  'pressure',
  'potential vorticity',
  'cloud water mixing ratio',
  'graupel mixing ratio',
  'ice mixing ratio',
  'rain water mixing ratio',
  'snow mixing ratio',
  'water vapor mixing ratio',
  'air temperature',
  'J and Density weighted vertical contra-W',
  'true W component of wind',
  'full-layer height above ground',
  'mid-layer height above ground'
);


my @_amad_conus_metdot3d_variables = (
  'uhat_jd', 'uwind', 'vhat_jd', 'vwind', 'uwindc', 'vwindc', 'wind'
);

my @_amad_conus_metdot3d_units = (
  'kg/(m*s)', 'm/s', 'kg/(m*s)', 'm/s', 'm/s', 'm/s', 'm/s'
);

my @_amad_conus_metdot3d_descriptions = (
  '(contra_U*Jacobian*Density) at square pt',
  'U-comp. of true wind at dot point',
  '(contra_V*Jacobian*Density) at triangle pt',
  'V-comp. of true wind at dot point',
  'U-comp. of true wind at west-east faces',
  'V-comp. of true wind at south-north faces',
  'UVW 3D vector of true wind at dot point'
);


my @_amad_conus_noy_variables  = ( 'noy' );
my @_amad_conus_noy_units = ( 'ppmV' );
my @_amad_conus_noy_descriptions = ( 'Total reactive nitrogen' );


my @_amad_conus_photdiag1_variables = (
  'albedo_w294',
  'albedo_w303',
  'albedo_w310',
  'albedo_w316',
  'albedo_w333',
  'albedo_w381',
  'albedo_w607',
  'coszens',
  'etot_sfc_w294',
  'etot_sfc_w303',
  'etot_sfc_w310',
  'etot_sfc_w316',
  'etot_sfc_w333',
  'etot_sfc_w381',
  'etot_sfc_w607',
  'jno2',
  'jo3o1d',
  'tau_aero_w294',
  'tau_aero_w303',
  'tau_aero_w310',
  'tau_aero_w316',
  'tau_aero_w333',
  'tau_aero_w381',
  'tau_aero_w607',
  'tauo3_top_w294',
  'tauo3_top_w303',
  'tauo3_top_w310',
  'tauo3_top_w316',
  'tauo3_top_w333',
  'tauo3_top_w381',
  'tauo3_top_w607',
  'tau_tot_w294',
  'tau_tot_w303',
  'tau_tot_w310',
  'tau_tot_w316',
  'tau_tot_w333',
  'tau_tot_w381',
  'tau_tot_w607',
  'toc'
);

my @_amad_conus_photdiag1_units = (
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  'watts/m**2',
  'watts/m**2',
  'watts/m**2',
  'watts/m**2',
  'watts/m**2',
  'watts/m**2',
  'watts/m**2',
  '1/min',
  '1/min',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  '-',
  'du'
);

my @_amad_conus_photdiag1_descriptions = (
  'surface albedo at the wavelength 294 nm',
  'surface albedo at the wavelength 303 nm',
  'surface albedo at the wavelength 310 nm',
  'surface albedo at the wavelength 316 nm',
  'surface albedo at the wavelength 333 nm',
  'surface albedo at the wavelength 381 nm',
  'surface albedo at the wavelength 607 nm',
  'cosine of solar zenith angle',
  'total downward irradiance at sfc, 294 nm',
  'total downward irradiance at sfc, 303 nm',
  'total downward irradiance at sfc, 310 nm',
  'total downward irradiance at sfc, 316 nm',
  'total downward irradiance at sfc, 333 nm',
  'total downward irradiance at sfc, 381 nm',
  'total downward irradiance at sfc, 607 nm',
  'j-value for no2',
  'j-value for o3o1d',
  'aerosol optical depth, 294 nm',
  'aerosol optical depth, 303 nm',
  'aerosol optical depth, 310 nm',
  'aerosol optical depth, 316 nm',
  'aerosol optical depth, 333 nm',
  'aerosol optical depth, 381 nm',
  'aerosol optical depth, 607 nm',
  'optical depth of o3 above model domain, 294 nm',
  'optical depth of o3 above model domain, 303 nm',
  'optical depth of o3 above model domain, 310 nm',
  'optical depth of o3 above model domain, 316 nm',
  'optical depth of o3 above model domain, 333 nm',
  'optical depth of o3 above model domain, 381 nm',
  'optical depth of o3 above model domain, 607 nm',
  'total optical depth, 294 nm',
  'total optical depth, 303 nm',
  'total optical depth, 310 nm',
  'total optical depth, 316 nm',
  'total optical depth, 333 nm',
  'total optical depth, 381 nm',
  'total optical depth, 607 nm',
  'total ozone column'
);



my @_amad_conus_photdiag2_variables = (
  'acrolein_saprc99',
  'cl2_iupac04',
  'c2cho_saprc99',
  'ccho_r_saprc99',
  'cooh_saprc99',
  'fmcl_iupac04',
  'h2o2_saprc99',
  'hcho_m_saprc99',
  'hcho_r_saprc99',
  'hno3_iupac04',
  'ho2no2_iupac04',
  'hocl_iupac04',
  'hono_iupac04',
  'mgly_iupac04',
  'n2o5_iupac04',
  'no2_saprc99',
  'no3no2_saprc99',
  'no3no_saprc99',
  'ntr_iupac04',
  'o3_o1d_iupac04',
  'o3_o3p_iupac04',
  'pacd_cb05',
  'pan_iupac04'
);

my @_amad_conus_photdiag2_units = (
  '1/min',
  '1/min',
  '1/min',
  '1/min',
  '1/min',
  '1/min',
  '1/min',
  '1/min',
  '1/min',
  '1/min',
  '1/min',
  '1/min',
  '1/min',
  '1/min',
  '1/min',
  '1/min',
  '1/min',
  '1/min',
  '1/min',
  '1/min',
  '1/min',
  '1/min',
  '1/min'
);

my @_amad_conus_photdiag2_descriptions = (
  'photolysis rates for acrolein_saprc99',
  'photolysis rates for c2cho_saprc99',
  'photolysis rates for ccho_r_saprc99',
  'photolysis rates for cl2_iupac04',
  'photolysis rates for cooh_saprc99',
  'photolysis rates for fmcl_iupac04',
  'photolysis rates for h2o2_saprc99',
  'photolysis rates for hcho_m_saprc99',
  'photolysis rates for hcho_r_saprc99',
  'photolysis rates for hno3_iupac04',
  'photolysis rates for ho2no2_iupac04',
  'photolysis rates for hocl_iupac04',
  'photolysis rates for hono_iupac04',
  'photolysis rates for mgly_iupac04',
  'photolysis rates for n2o5_iupac04',
  'photolysis rates for no2_saprc99',
  'photolysis rates for no3no2_saprc99',
  'photolysis rates for no3no_saprc99',
  'photolysis rates for ntr_iupac04',
  'photolysis rates for o3_o1d_iupac04',
  'photolysis rates for o3_o3p_iupac04',
  'photolysis rates for pacd_cb05',
  'photolysis rates for pan_iupac04'
);

my @_amad_conus_pm25_variables = ( 'pm25' );
my @_amad_conus_pm25_units = ( 'ug/m3' );
my @_amad_conus_pm25_descriptions = (
'particulate matter (aerosols) not more than 2.5 microns in diameter'
);

# The pm.ncf files are computed from species_aconc_CMAQ5.0_CB05_AE6_bidi.txt:

my @_amad_conus_pm_variables = (
  'ALD2',
  'ALDX',
  'CO',
  'ETH',
  'ETHA',
  'FORM',
  'H2O2',
  'HNO3',
  'HNO3_UGM3',
  'HONO',
  'HOX',
  'IOLE',
  'ISOP',
  'N2O5',
  'NH3',
  'NH3_UGM3',
  'NHX',
  'NO',
  'NO2',
  'ANO3_PPB',
  'NOY',
  'NTR',
  'O3',
  'OLE',
  'PAR',
  'PAN',
  'PANX',
  'SO2',
  'SO2_UGM3',
  'SULF',
  'TERP',
  'TOL',
  'VOC',
  'XYL',
  'AFEJ',
  'AALJ',
  'ASIJ',
  'ATIJ',
  'ACAJ',
  'AMGJ',
  'AKJ',
  'AMNJ',
  'ASOILJ',
  'ANAK',
  'AMGK',
  'AKK',
  'ACAK',
  'ACLIJ',
  'AECIJ',
  'ANAIJ',
  'ANO3IJ',
  'ANO3K',
  'ANH4IJ',
  'ANH4K',
  'AOCIJ',
  'AOMIJ',
  'AORGAJ',
  'AORGBJ',
  'AORGCJ',
  'APOCIJ',
  'APOAIJ',
  'ASO4IJ',
  'ASO4K',
  'ATOTI',
  'ATOTJ',
  'ATOTK',
  'PMIJ',
  'PM10',
  'AUNSPEC1IJ',
  'ANCOMIJ',
  'AUNSPEC2IJ',
  'AOMOCRAT_PRI',
  'AOMOCRAT_TOT',
  'PM25_CL',
  'PM25_EC',
  'PM25_NA',
  'PM25_MG',
  'PM25_K',
  'PM25_CA',
  'PM25_NH4',
  'PM25_NO3',
  'PM25_OC',
  'PM25_SOIL',
  'PM25_SO4',
  'PM25_TOT',
  'PM25_UNSPEC1',
  'PMC_CL',
  'PMC_NA',
  'PMC_NH4',
  'PMC_NO3',
  'PMC_SO4',
  'PMC_TOT',
  'TNO3',
  'DCV_Recon',
  'AIR_DENS',
  'RH',
  'SFC_TMP',
  'SOL_RAD',
  'precip',
  'WSPD10',
  'WDIR10',
  'K',
  'P1',
  'P2',
  'P3',
  'a',
  'K_prime',
  'sqrt_Ki',
  'max_NO3_loss',
  'PM25_NO3_loss',
  'ANO3IJ_loss',
  'PM25_NH4_loss',
  'ANH4IJ_loss',
  'PMIJ_FRM',
  'PM25_FRM',
  'Gamma1',
  'Gamma2',
  'Hp_L1',
  'Hp_L2'
);
my @_amad_conus_pm_units = (
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ug/m3',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ug/m3',
  'ug/m3',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ug/m3',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbC',
  'ppbV',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ugC/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ugC/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'none',
  'none',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ugC/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'deciview',
  'kg/m3',
  '%',
  'C',
  'W/m2',
  'cm',
  'm/s',
  'deg',
  'ppb^2',
  '-',
  '-',
  '-',
  '-',
  'ppb^2',
  'ppb',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  'ug/m3',
  '-',
  '-',
  'mol/l',
  'mol/l'
);
my @_amad_conus_pm_descriptions = (
  '1000.0*ALD2[1]',
  '1000.0*ALDX[1]',
  '1000.0*CO[1]',
  '1000.0*ETH[1]',
  '1000.0*ETHA[1]',
  '1000.0*FORM[1]',
  '1000.0*H2O2[1]',
  '1000.0*HNO3[1]',
  '1000.0*(HNO3[1]*2.1756*DENS[3])',
  '1000.0*HONO[1]',
  '1000.0*(OH[1]+HO2[1])',
  '1000.0*IOLE[1]',
  '1000.0*ISOP[1]',
  '1000.0*N2O5[1]',
  '1000.0*NH3[1]',
  '1000.0*(NH3[1]*0.5880*DENS[3])',
  '1000.0*(NH3[1]*0.5880*DENS[3])+ANH4I[1]+ANH4J[1]+ANH4K[1]',
  '1000.0*NO[1]',
  '1000.0*NO2[1]',
  '(ANO3I[1]+ANO3J[1]+ANO3K[1])/(DENS[3]*(62.0/28.97))',
  '1000.0*(NO[1]+NO2[1]+NO3[1]+2*N2O5[1]+HONO[1]+HNO3[1]+PAN[1]+PANX[1]+PNA[1]+NTR[',
  '1000.0*NTR[1]',
  '1000.0*O3[1]',
  '1000.0*OLE[1]',
  '1000.0*PAR[1]',
  '1000.0*PAN[1]',
  '1000.0*PANX[1]',
  '1000.0*SO2[1]',
  '1000.0*(SO2[1]*2.2118*DENS[3])',
  '1000.0*SULF[1]',
  '1000.0*TERP[1]',
  '1000.0*TOL[1]',
  '1000.0*(PAR[1]+2.0*ETH[1]+2.0*ETOH[1]+2.0*OLE[1]+7.0*TOL[1]+8.0*XYL[1]+FORM[1]+2',
  '1000.0*XYL[1]',
  'AFEJ[1]',
  'AALJ[1]',
  'ASIJ[1]',
  'ATIJ[1]',
  'ACAJ[1]',
  'AMGJ[1]',
  'AKJ[1]',
  'AMNJ[1]',
  '2.20*AALJ[1]+2.49*ASIJ[1]+1.63*ACAJ[1]+2.42*AFEJ[1]+1.94*ATIJ[1]',
  '0.8373*ASEACAT[1]+0.0626*ASOIL[1]+0.0023*ACORS[1]',
  '0.0997*ASEACAT[1]+0.0032*ACORS[1]',
  '0.0310*ASEACAT[1]+0.0242*ASOIL[1]+0.0176*ACORS[1]',
  '0.0320*ASEACAT[1]+0.0838*ASOIL[1]+0.0562*ACORS[1]',
  'ACLI[1]+ACLJ[1]',
  'AECI[1]+AECJ[1]',
  'ANAJ[1]+ANAI[1]',
  'ANO3I[1]+ANO3J[1]',
  'ANO3K[1]',
  'ANH4I[1]+ANH4J[1]',
  'ANH4K[1]',
  '(AXYL1J[1]+AXYL2J[1]+AXYL3J[1])/2.0+(ATOL1J[1]+ATOL2J[1]+ATOL3J[1])/2.0+(ABNZ1J[',
  'AXYL1J[1]+AXYL2J[1]+AXYL3J[1]+ATOL1J[1]+ATOL2J[1]+ATOL3J[1]+ABNZ1J[1]+ABNZ2J[1]+',
  'AXYL1J[1]+AXYL2J[1]+AXYL3J[1]+ATOL1J[1]+ATOL2J[1]+ATOL3J[1]+ABNZ1J[1]+ABNZ2J[1]+',
  'AISO1J[1]+AISO2J[1]+AISO3J[1]+ATRP1J[1]+ATRP2J[1]+ASQTJ[1]+AOLGBJ[1]',
  'AORGCJ[1]',
  'APOCI[1]+APOCJ[1]',
  'APOCIJ[0]+APNCOMI[1]+APNCOMJ[1]',
  'ASO4I[1]+ASO4J[1]',
  'ASO4K[1]',
  'ASO4I[1]+ANO3I[1]+ANH4I[1]+ANAI[1]+ACLI[1]+AECI[1]+APOCI[1]+APNCOMI[1]+AOTHRI[1]',
  'ASO4J[1]+ANO3J[1]+ANH4J[1]+ANAJ[1]+ACLJ[1]+AECJ[1]+AOMIJ[0]-(APOCI[1]+APNCOMI[1]',
  'ASOIL[1]+ACORS[1]+ASEACAT[1]+ACLK[1]+ASO4K[1]+ANO3K[1]+ANH4K[1]',
  'ATOTI[0]+ATOTJ[0]',
  'PMIJ[0]+ATOTK[0]',
  'PMIJ[0]-(ASOILJ[0]+ANO3IJ[0]+ASO4IJ[0]+ANH4IJ[0]+AOCIJ[0]+AECIJ[0]+',
  'AOMIJ[0]-AOCIJ[0]',
  'AUNSPEC1IJ[0]-ANCOMIJ[0]',
  'APOAIJ[0]/APOCIJ[0]',
  'AOMIJ[0]/AOCIJ[0]',
  'ACLI[1]*PM25AT[4]+ACLJ[1]*PM25AC[4]+ACLK[1]*PM25CO[4]',
  'AECI[1]*PM25AT[4]+AECJ[1]*PM25AC[4]',
  'ANAI[1]*PM25AT[4]+ANAJ[1]*PM25AC[4]+ANAK[0]*PM25CO[4]',
  'AMGJ[1]*PM25AC[4]+AMGK[0]*PM25CO[4]',
  'AKJ[1]*PM25AC[4]+AKK[0]*PM25CO[4]',
  'ACAJ[1]*PM25AC[4]+ACAK[0]*PM25CO[4]',
  'ANH4I[1]*PM25AT[4]+ANH4J[1]*PM25AC[4]+ANH4K[1]*PM25CO[4]',
  'ANO3I[1]*PM25AT[4]+ANO3J[1]*PM25AC[4]+ANO3K[1]*PM25CO[4]',
  'APOCI[1]*PM25AT[4]+(AOCIJ[0]-APOCI[1])*PM25AC[4]',
  'ASOILJ[0]*PM25AC[4]+(ASOIL[1]+ACORS[1])*PM25CO[4]',
  'ASO4I[1]*PM25AT[4]+ASO4J[1]*PM25AC[4]+ASO4K[1]*PM25CO[4]',
  'ATOTI[0]*PM25AT[4]+ATOTJ[0]*PM25AC[4]+ATOTK[0]*PM25CO[4]',
  'PM25_TOT[0]-(PM25_CL[0]+PM25_EC[0]+PM25_NA[0]+PM25_NH4[0]+PM25_NO3[0]+PM25_OC[0]',
  'ACLI[1]+ACLJ[1]+ACLK[1]-PM25_CL[0]',
  'ANAIJ[0]+ANAK[0]*0.78-PM25_NA[0]',
  'ANH4I[1]+ANH4J[1]+ANH4K[1]-PM25_NH4[0]',
  'ANO3I[1]+ANO3J[1]+ANO3K[1]-PM25_NO3[0]',
  'ASO4I[1]+ASO4J[1]+ASO4K[1]-PM25_SO4[0]',
  'PM10[0]-PM25_TOT[0]',
  '2175.6*(HNO3[1]*DENS[3])+ANO3I[1]+ANO3J[1]+ANO3K[1]',
  'DCV_Recon[2]',
  'DENS[3]',
  '100.00*RH[4]',
  '(TEMP2[5]-273.15)',
  'RGRND[5]',
  'RN[5]+RC[5]',
  'WSPD10[5]',
  'WDIR10[5]',
  'exp(118.87-24084/TEMP2[5]-6.025*log(TEMP2[5]))',
  'exp(8763/TEMP2[5]+19.12*log(TEMP2[5])-135.94)',
  'exp(9969/TEMP2[5]+16.22*log(TEMP2[5])-122.65)',
  'exp(13875/TEMP2[5]+24.46*log(TEMP2[5])-182.61)',
  '1-RH[0]/100',
  '(P1[0]-P2[0]*a[0]+(P3[0]*a[0]*a[0]))*(a[0]^1.75)*K[0]',
  'sqrt(RH[0]<',
  '745.7/TEMP2[5]*sqrt_Ki[0]',
  'max_NO3_loss[0]<',
  'max_NO3_loss[0]<',
  'PM25_NO3_loss[0]*(18/62)',
  'ANO3IJ_loss[0]*(18/62)',
  'PMIJ[0]-(ANO3IJ_loss[0]+ANH4IJ_loss[0])+0.24*(ASO4IJ[0]+ANH4IJ[0]-ANH4IJ_loss[0]',
  'PM25_TOT[0]-(PM25_NO3_loss[0]+PM25_NH4_loss[0])+0.24*(PM25_SO4[0]+PM25_NH4[0]-PM',
  'Gamma1[6]',
  'Gamma2[6]',
  'MHpsl1[6]',
  'MHpsl2[6]'
);


my @_amad_conus_soilinp_variables = (
  'ptype',
  'pulsedate',
  'pulsetime',
  'rainfall01',
  'rainfall02',
  'rainfall03',
  'rainfall04',
  'rainfall05',
  'rainfall06',
  'rainfall07',
  'rainfall08',
  'rainfall09',
  'rainfall10',
  'rainfall11',
  'rainfall12',
  'rainfall13',
  'rainfall14',
  'rainfall15',
  'rainfall16',
  'rainfall17',
  'rainfall18',
  'rainfall19',
  'rainfall20',
  'rainfall21',
  'rainfall22',
  'rainfall23',
  'rainfall24'
);

my @_amad_conus_soilinp_units = (
  'integer',
  'yyyyddd',
  'hhmmss',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm',
  'cm'
);

my @_amad_conus_soilinp_descriptions = (
  'no emission pulse type',
  'cmaq starting date for no emission pulse',
  'cmaq starting time for no emission pulse',
  'hrly cnv. & non-cnv. rainfall for 2012001:010000',
  'hrly cnv. & non-cnv. rainfall for 2012001:020000',
  'hrly cnv. & non-cnv. rainfall for 2012001:030000',
  'hrly cnv. & non-cnv. rainfall for 2012001:040000',
  'hrly cnv. & non-cnv. rainfall for 2012001:050000',
  'hrly cnv. & non-cnv. rainfall for 2012001:060000',
  'hrly cnv. & non-cnv. rainfall for 2012001:070000',
  'hrly cnv. & non-cnv. rainfall for 2012001:080000',
  'hrly cnv. & non-cnv. rainfall for 2012001:090000',
  'hrly cnv. & non-cnv. rainfall for 2012001:100000',
  'hrly cnv. & non-cnv. rainfall for 2012001:110000',
  'hrly cnv. & non-cnv. rainfall for 2012001:120000',
  'hrly cnv. & non-cnv. rainfall for 2012001:130000',
  'hrly cnv. & non-cnv. rainfall for 2012001:140000',
  'hrly cnv. & non-cnv. rainfall for 2012001:150000',
  'hrly cnv. & non-cnv. rainfall for 2012001:160000',
  'hrly cnv. & non-cnv. rainfall for 2012001:170000',
  'hrly cnv. & non-cnv. rainfall for 2012001:180000',
  'hrly cnv. & non-cnv. rainfall for 2012001:190000',
  'hrly cnv. & non-cnv. rainfall for 2012001:200000',
  'hrly cnv. & non-cnv. rainfall for 2012001:210000',
  'hrly cnv. & non-cnv. rainfall for 2012001:220000',
  'hrly cnv. & non-cnv. rainfall for 2012001:230000',
  'hrly cnv. & non-cnv. rainfall for 2012001:000000'
);

my @_amad_conus_wetdep1_variables = (
  'a25j', 'aacd', 'aalkj', 'abnz1j', 'abnz2j', 'abnz3j', 'aclj', 'aclk',
  'acors', 'aeci', 'aecj', 'aiso1j', 'aiso2j', 'aiso3j', 'ald2', 'aldx',
  'anaj', 'anak', 'anh4i', 'anh4j', 'anh4k', 'ano3i', 'ano3j', 'ano3k',
  'aolgaj', 'aolgbj', 'aorgcj', 'aorgpai', 'aorgpaj', 'aso4i', 'aso4j',
  'aso4k', 'asoil', 'asqtj', 'atol1j', 'atol2j', 'atol3j', 'atrp1j',
  'atrp2j', 'axyl1j', 'axyl2j', 'axyl3j', 'cl2', 'co', 'facd', 'fmcl',
  'form', 'h2o2', 'hcl', 'hno3', 'hocl', 'hono', 'hplus', 'meoh', 'mepx',
  'n2o5', 'nh3', 'no2', 'no3', 'no', 'ntr', 'o3', 'pacd', 'pan', 'panx',
  'pna', 'rooh', 'so2', 'sulf'
);

my @_amad_conus_wetdep1_units = (
  'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha',
  'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha',
  'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha',
  'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha',
  'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha',
  'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha',
  'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha',
  'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha',
  'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha'
);

my @_amad_conus_wetdep1_descriptions = (
  'Accumulation Mode Unspecified Anthropogenic Mass',
  'Acetic And Higher Carboxylic Acids',
  'SOA from alkanes',
  'Low-volatility SOA from benzene',
  'High-volatility SOA from benzene',
  'Non-volatile SOA from benzene (low-NOx)',
  'Aerosol Chlorine Accumulation Mode',
  'Aerosol Chlorine Coarse Mode',
  'Aerosol Course Mode Anthropogenic Mass',
  'Aerosol Elemental Carbon Mass Aitken Mode',
  'Aerosol Elemental Carbon Mass Accumulation Mode',
  'High-volatility SOA from isoprene*',
  'Low-volatility SOA from isoprene',
  'Acid-enhanced SOA from isoprene',
  'High Molecular Weight Aldehydes',
  'C3+ Aldehydes',
  'Aerosol Sodium Accumulation Mode',
  'Aerosol Sodium Coarse Mode',
  'Aerosol Ammonium Aitken Mode',
  'Aerosol Ammonium Accumulation Mode',
  'Aerosol Ammonium Coarse Mode',
  'Aerosol Nitrate Aitken Mode',
  'Aerosol Nitrate Accumulation Mode',
  'Aerosol Nitrate Coarse Mode',
  'Oligomers from semi-volatile anthropogenic SOA species',
  'Oligomers from semi-volatile biogenic SOA species',
  'SOA from in-cloud oxidation of dialdehydes',
  'Aerosol Primary Organic Mass Aitken Mode',
  'Aerosol Primary Organic Mass Accumulation Mode',
  'Aerosol Sulfate Aitken Mode',
  'Aerosol Sulfate Accumulation Mode',
  'Aerosol Sulfate Coarse Mode',
  'Aerosol Soil',
  'SOA from sesquiterpenes',
  'Low-volatility SOA from mono-substituted aromatics',
  'High-volatility SOA from mono-substituted aromatics',
  'Non-volatile SOA from mono-substituted aromatics (low-NOx)',
  'Low-volatility SOA from monoterpenes',
  'High-volatility SOA from monoterpenes',
  'Low-volatility SOA from poly-substituted aromatics',
  'High-volatility SOA from poly-substituted aromatics',
  'Non-volatile SOA from poly-substituted aromatics (low-NOx)',
  'cl2?',
  'Carbon Monoxide',
  'Formic Acid',
  'fmcl?',
  'Formaldehyde',
  'Peroxide',
  'Hydrochloric Acid',
  'Nitric Acid',
  'hocl?',
  'Nitrous Acid',
  'hplus?',
  'Methanol',
  'Methyl Hydroperoxide',
  'Dinitrate Pentoxide',
  'Ammonia',
  'Nitrogen Oxide',
  'Nitrogen Dioxide',
  'Nitrogen Trioxide',
  'Organic Nitrate',
  'Ozone',
  'Peroxyacetic And Higher Peroxycarboxylic Acids',
  'Peroxy Acetyl Nitrate',
  'C3+ PANs',
  'Peroxynitric Acid',
  'C2+ Organic Hydroperoxide',
  'Sulfur Dioxide',
  'Sulfuric Acid'
);


my @_amad_conus_wetdep2_variables = (
  'a25j', 'aacd', 'aalkj', 'abnz1j', 'abnz2j', 'abnz3j', 'aclj', 'aclk',
  'acors', 'aeci', 'aecj', 'aiso1j', 'aiso2j', 'aiso3j', 'ald2', 'aldx',
  'anaj', 'anak', 'anh4i', 'anh4j', 'anh4k', 'ano3i', 'ano3j', 'ano3k',
  'aolgaj', 'aolgbj', 'aorgcj', 'aorgpai', 'aorgpaj', 'aso4i', 'aso4j',
  'aso4k', 'asoil', 'asqtj', 'atol1j', 'atol2j', 'atol3j', 'atrp1j',
  'atrp2j', 'axyl1j', 'axyl2j', 'axyl3j', 'cl2', 'cloud_bottom', 'co',
  'facd', 'fmcl', 'form', 'h2o2', 'hcl', 'hno3', 'hocl', 'hono', 'hplus',
  'meoh', 'mepx', 'n2o5', 'nh3', 'no', 'no2', 'no3', 'np_cldfrac',
  'np_cloudtop', 'ntr', 'o3', 'pacd', 'pan', 'panx', 'plcl', 'pna',
  'pr_cldfrac', 'pr_cloudtop', 'rain_flag', 'rooh', 'so2', 'sulf'
);

my @_amad_conus_wetdep2_units = (
  'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha',
  'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha',
  'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha',
  'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha',
  'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha',
  'kg/ha', 'kg/ha', 'kg/ha',
  'layer',
  'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha',
  'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha',
  'kg/ha',
  '-', 'layer-number',
  'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha', 'kg/ha',
  'Pa', 'kg/ha', '-', 'layer', '1', 'kg/ha', 'kg/ha', 'kg/ha'
);

my @_amad_conus_wetdep2_descriptions = (
  'Accumulation Mode Unspecified Anthropogenic Mass',
  'Acetic And Higher Carboxylic Acids',
  'SOA from alkanes',
  'Low-volatility SOA from benzene',
  'High-volatility SOA from benzene',
  'Non-volatile SOA from benzene (low-NOx)',
  'Aerosol Chlorine Accumulation Mode',
  'Aerosol Chlorine Coarse Mode',
  'Aerosol Course Mode Anthropogenic Mass',
  'Aerosol Elemental Carbon Mass Aitken Mode',
  'Aerosol Elemental Carbon Mass Accumulation Mode',
  'High-volatility SOA from isoprene*',
  'Low-volatility SOA from isoprene',
  'Acid-enhanced SOA from isoprene',
  'High Molecular Weight Aldehydes',
  'C3+ Aldehydes',
  'Aerosol Sodium Accumulation Mode',
  'Aerosol Sodium Coarse Mode',
  'Aerosol Ammonium Aitken Mode',
  'Aerosol Ammonium Accumulation Mode',
  'Aerosol Ammonium Coarse Mode',
  'Aerosol Nitrate Aitken Mode',
  'Aerosol Nitrate Accumulation Mode',
  'Aerosol Nitrate Coarse Mode',
  'Oligomers from semi-volatile anthropogenic SOA species',
  'Oligomers from semi-volatile biogenic SOA species',
  'SOA from in-cloud oxidation of dialdehydes',
  'Aerosol Primary Organic Mass Aitken Mode',
  'Aerosol Primary Organic Mass Accumulation Mode',
  'Aerosol Sulfate Aitken Mode',
  'Aerosol Sulfate Accumulation Mode',
  'Aerosol Sulfate Coarse Mode',
  'Aerosol Soil',
  'SOA from sesquiterpenes',
  'Low-volatility SOA from mono-substituted aromatics',
  'High-volatility SOA from mono-substituted aromatics',
  'Non-volatile SOA from mono-substituted aromatics (low-NOx)',
  'Low-volatility SOA from monoterpenes',
  'High-volatility SOA from monoterpenes',
  'Low-volatility SOA from poly-substituted aromatics',
  'High-volatility SOA from poly-substituted aromatics',
  'Non-volatile SOA from poly-substituted aromatics (low-NOx)',
  'cl2?',
  'layer containing bottom of cloud',
  'Carbon Monoxide',
  'Formic Acid',
  'fmcl',
  'Formaldehyde',
  'Peroxide',
  'Hydrochloric Acid',
  'Nitric Acid',
  'hocl?',
  'Nitrous Acid',
  'hplus?',
  'Methanol',
  'Methyl Hydroperoxide',
  'Dinitrate Pentoxide',
  'Ammonia',
  'Nitrogen Oxide',
  'Nitrogen Dioxide',
  'Nitrogen Trioxide',
  'NP cloud fraction',
  'layer containing top of NP cloud',
  'Organic Nitrate',
  'Ozone',
  'Peroxyacetic And Higher Peroxycarboxylic Acids',
  'Peroxy Acetyl Nitrate',
  'C3+ PANs',
  'pressure at lifting condensation level',
  'Peroxynitric Acid',
  'PR cloud fraction',
  'layer containing top of PR cloud',
  'Rain-event flag',
  'C2+ Organic Hydroperoxide',
  'Sulfur Dioxide',
  'Sulfuric Acid'
);



# WDT EAST and CONUS daily, monthly, yearly deposition files:

my @_wdt_conus_dep_variables = (
  'ANAK_D',
  'ANAK_W',
  'ACAK_D',
  'ACAK_W',
  'AKK_D',
  'AKK_W',
  'AMGK_D',
  'AMGK_W',
  'DDEP_NO2',
  'WDEP_NO2',
  'DDEP_NO',
  'WDEP_NO',
  'DDEP_FORM',
  'WDEP_FORM',
  'DDEP_H2O2',
  'WDEP_H2O2',
  'DDEP_N2O5',
  'WDEP_N2O5',
  'DDEP_HONO',
  'WDEP_HONO',
  'DDEP_HNO3',
  'WDEP_HNO3',
  'DDEP_ANO3IJ',
  'DDEP_ANO3K',
  'WDEP_ANO3IJK',
  'DDEP_TNO3',
  'WDEP_TNO3',
  'DDEP_NTR',
  'WDEP_NTR',
  'DDEP_PANT',
  'WDEP_PANT',
  'DDEP_NH3',
  'DDEP_NH3_Nat',
  'DDEP_NH3_Ag',
  'DDEP_NH3_Wat',
  'DDEP_NH3_Emis',
  'DDEP_NH3_Dep',
  'DDEP_NH3_Stom',
  'DDEP_NH3_Cut',
  'DDEP_NH3_Soil',
  'WDEP_NH3',
  'DDEP_ANH4IJ',
  'DDEP_ANH4K',
  'WDEP_ANH4IJK',
  'DDEP_NHX',
  'WDEP_NHX',
  'DDEP_SO2',
  'DDEP_ASO4IJ',
  'DDEP_ASO4K',
  'WDEP_ASO4IJK',
  'WDEP_TSO4',
  'DDEP_AECIJ',
  'DDEP_AOCIJ',
  'DDEP_SSSO4J',
  'DDEP_SSSO4K',
  'WDEP_SSSO4JK',
  'DDEP_ANAJ',
  'DDEP_ANAK',
  'DDEP_ANAJK',
  'WDEP_ANAJK',
  'TDEP_ANAJK',
  'DDEP_ACLJ',
  'DDEP_ACLK',
  'DDEP_ACLJK',
  'WDEP_TCL',
  'TDEP_CL',
  'DDEP_CAJ',
  'WDEP_CAJ',
  'DDEP_CAJK',
  'WDEP_CAJK',
  'TDEP_CA',
  'DDEP_FEJ',
  'WDEP_FEJ',
  'DDEP_ALJ',
  'WDEP_ALJ',
  'DDEP_SIJ',
  'WDEP_SIJ',
  'DDEP_TIJ',
  'WDEP_TIJ',
  'DDEP_MGJ',
  'WDEP_MGJ',
  'DDEP_MGJK',
  'WDEP_MGJK',
  'TDEP_MG',
  'DDEP_KJ',
  'WDEP_KJ',
  'DDEP_KJK',
  'WDEP_KJK',
  'TDEP_K',
  'DDEP_MNJ',
  'WDEP_MNJ',
  'DDEP_O3',
  'WDEP_O3',
  'WDEP_PNA',
  'RT',
  'DD_OXN_NOX',
  'WD_OXN_NOX',
  'DD_OXN_TNO3',
  'WD_OXN_TNO3',
  'DD_OXN_PANT',
  'WD_OXN_PANT',
  'DD_OXN_ORGN',
  'WD_OXN_ORGN',
  'DD_OXN_OTHR',
  'WD_OXN_OTHR',
  'DD_OXN_TOT',
  'WD_OXN_TOT',
  'TD_OXN_TOT',
  'DD_OXN_TOTMEQ',
  'WD_OXN_TOTMEQ',
  'TD_OXN_TOTMEQ',
  'DD_REDN_TOT',
  'WD_REDN_TOT',
  'TD_REDN_TOT',
  'DD_REDN_TOTMEQ',
  'WD_REDN_TOTMEQ',
  'TD_REDN_TOTMEQ',
  'TD_N_TOT',
  'TD_N_TOTMEQ',
  'DD_S_TOT',
  'WD_S_TOT',
  'TD_S_TOT',
  'DD_S_TOTMEQ',
  'WD_S_TOTMEQ',
  'TD_S_TOTMEQ',
  'DD_S_SeaS',
  'WD_S_SeaS',
  'TD_S_SeaS',
  'DD_S_SeaSMEQ',
  'WD_S_SeaSMEQ',
  'TD_S_SeaSMEQ'
);

my @_wdt_conus_dep_units = (
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'cm',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'meq/m2',
  'meq/m2',
  'meq/m2',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'meq/m2',
  'meq/m2',
  'meq/m2',
  'kg/ha',
  'meq/m2',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'meq/m2',
  'meq/m2',
  'meq/m2',
  'kg/ha',
  'kg/ha',
  'kg/ha',
  'meq/m2',
  'meq/m2',
  'meq/m2'
);

my @_wdt_conus_dep_descriptions = (
  '0.8373*ASEACAT[1]+0.0626*ASOIL[1]+0.0023*ACORS[1]',
  '0.8373*ASEACAT[2]+0.0626*ASOIL[2]+0.0023*ACORS[2]',
  '0.0320*ASEACAT[1]+0.0838*ASOIL[1]+0.0562*ACORS[1]',
  '0.0320*ASEACAT[2]+0.0838*ASOIL[2]+0.0562*ACORS[2]',
  '0.0310*ASEACAT[1]+0.0242*ASOIL[1]+0.0176*ACORS[1]',
  '0.0310*ASEACAT[2]+0.0242*ASOIL[2]+0.0176*ACORS[2]',
  '0.0997*ASEACAT[1]+0.0032*ACORS[1]',
  '0.0997*ASEACAT[2]+0.0032*ACORS[2]',
  'NO2[1]',
  'NO2[2]',
  'NO[1]',
  'NO[2]',
  'FORM[1]',
  'FORM[2]',
  'H2O2[1]',
  'H2O2[2]',
  'N2O5[1]',
  'N2O5[2]',
  'HONO[1]',
  'HONO[2]',
  'HNO3[1]',
  'HNO3[2]',
  'ANO3I[1] + ANO3J[1]',
  'ANO3K[1]',
  'ANO3I[2] + ANO3J[2] + ANO3K[2]',
  'ANO3I[1] + ANO3J[1] + ANO3K[1] + 0.984*HNO3[1]',
  'ANO3I[2] + ANO3J[2] + ANO3K[2] + 0.984*HNO3[2]',
  'NTR[1]',
  'NTR[2]',
  'PAN[1] + PANX[1] + OPAN[1]',
  'PAN[2] + PANX[2] + OPAN[2]',
  'NH3[1]',
  'NH3_Nat[1]',
  'NH3_Ag[1]',
  'NH3_Wat[1]',
  'NH3_Emis[1]',
  'NH3_Dep[1]',
  'NH3_Stom[1]',
  'NH3_Cut[1]',
  'NH3_Soil[1]',
  'NH3[2]',
  'ANH4I[1] + ANH4J[1]',
  'ANH4K[1]',
  'ANH4I[2] + ANH4J[2] + ANH4K[2]',
  'ANH4I[1] + ANH4J[1] + ANH4K[1] + 1.059*NH3_Dep[1]',
  'ANH4I[2] + ANH4J[2] + ANH4K[2] + 1.059*NH3[2]',
  'SO2[1]',
  'ASO4I[1] + ASO4J[1]',
  'ASO4K[1]',
  'ASO4I[2] + ASO4J[2] + ASO4K[2]',
  'ASO4I[2] + ASO4J[2] + ASO4K[2] + 1.5*SO2[2]',
  'AECI[1] +AECJ[1]',
  '(AXYL1J[1]+AXYL2J[1]+AXYL3J[1])/2.0+(ATOL1J[1]+ATOL2J[1]+ATOL3J[1])/2.0+(ABNZ1J[',
  '0.19579876*ANAJ[1]',
  '0.19579876*ANAK_D[0]',
  '0.19579876*ANAJ[2] + 0.19579876*ANAK_W[0]',
  'ANAJ[1]',
  'ANAK_D[0]',
  'ANAJ[1] + ANAK_D[0]',
  'ANAJ[2] + ANAK_W[0]',
  'DDEP_ANAJK[0] + WDEP_ANAJK[0]',
  'ACLJ[1]',
  'ACLK[1]',
  'ACLJ[1] + ACLK[1]',
  '0.972*HCL[2] + ACLJ[2] + ACLK[2]',
  'DDEP_ACLJK[0] + WDEP_TCL[0]',
  'ACAJ[1]',
  'ACAJ[2]',
  'ACAJ[1]+ACAK_D[0]',
  'ACAJ[2]+ACAK_W[0]',
  'DDEP_CAJK[0]+WDEP_CAJK[0]',
  'AFEJ[1]',
  'AFEJ[2]',
  'AALJ[1]',
  'AALJ[2]',
  'ASIJ[1]',
  'ASIJ[2]',
  'ATIJ[1]',
  'ATIJ[2]',
  'AMGJ[1]',
  'AMGJ[2]',
  'AMGJ[1]+AMGK_D[0]',
  'AMGJ[2]+AMGK_W[0]',
  'DDEP_MGJK[0]+WDEP_MGJK[0]',
  'AKJ[1]',
  'AKJ[2]',
  'AKJ[1]+AKK_D[0]',
  'AKJ[2]+AKK_D[0]',
  'DDEP_KJK[0]+WDEP_KJK[0]',
  'AMNJ[1]',
  'AMNJ[2]',
  'O3[1]',
  'O3[2]',
  'PNA[2]',
  'RN[3] + RC[3]',
  '0.30435*NO2[1] + 0.46667*NO[1]',
  '0.30435*NO2[2] + 0.46667*NO[2]',
  '0.22222*HNO3[1] + 0.22581*ANO3I[1] + 0.22581*ANO3J[1] + 0.22581*ANO3K[1]',
  '0.22581*WDEP_TNO3[0]',
  '0.11570*PAN[1] + 0.11570*PANX[1] + 0.11570*OPAN[1]',
  '0.11570*PAN[2] + 0.11570*PANX[2] + 0.11570*OPAN[2]',
  '0.10770*NTR[1]',
  '0.10770*NTR[2]',
  '0.25926*N2O5[1] + 0.29787*HONO[1]',
  '0.25926*N2O5[2] + 0.29787*HONO[2] + 0.177720*PNA[2]',
  'DD_OXN_NOX[0] + DD_OXN_TNO3[0] + DD_OXN_PANT[0] + DD_OXN_ORGN[0] + DD_OXN_OTHR[0',
  'WD_OXN_NOX[0] + WD_OXN_TNO3[0] + WD_OXN_PANT[0] + WD_OXN_ORGN[0] + WD_OXN_OTHR[0',
  'DD_OXN_TOT[0] + WD_OXN_TOT[0]',
  '7.14*DD_OXN_TOT[0]',
  '7.14*WD_OXN_TOT[0]',
  'DD_OXN_TOTMEQ[0] + WD_OXN_TOTMEQ[0]',
  '0.7777*DDEP_NHX[0]',
  '0.7777*WDEP_NHX[0]',
  'DD_REDN_TOT[0] + WD_REDN_TOT[0]',
  '7.14*DD_REDN_TOT[0]',
  '7.14*WD_REDN_TOT[0]',
  'DD_REDN_TOTMEQ[0] + WD_REDN_TOTMEQ[0]',
  'TD_OXN_TOT[0] + TD_REDN_TOT[0]',
  'TD_OXN_TOTMEQ[0] + TD_REDN_TOTMEQ[0]',
  '0.5*SO2[1] + 0.33333*ASO4I[1] + 0.33333*ASO4J[1] + 0.33333*ASO4K[1]',
  '0.33333*WDEP_TSO4[0]',
  'DD_S_TOT[0] + WD_S_TOT[0]',
  '6.24*DD_S_TOT[0]',
  '6.24*WD_S_TOT[0]',
  'DD_S_TOTMEQ[0] + WD_S_TOTMEQ[0]',
  '0.33333*DDEP_SSSO4J[0] + 0.33333*DDEP_SSSO4K[0]',
  '0.33333*WDEP_SSSO4JK[0]',
  'DD_S_SeaS[0] + WD_S_SeaS[0]',
  '6.24*DD_S_SeaS[0]',
  '6.24*WD_S_SeaS[0]',
  'DD_S_SeaSMEQ[0] + WD_S_SeaSMEQ[0]'
);



# LISTOS 1333.3km data 2018-07-01 .. 2028-8-31:

my @_listos_lis_conc_variables = (
  'CO',
  'FORM',
  'NO2',
  'O3',
  'PAN',
  'W_VEL'
);

my @_listos_lis_conc_units = (
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'm_s-1'
);

my @_listos_lis_conc_descriptions = (
  'Carbon Monoxide',
  'Formaldehyde',
  'Nitrogen Dioxide',
  'Ozone',
  'Instantaneous molar mixing ratio peroxyacyl nitrates',
  'Derived vertical velocity component'
);

my @_listos_lis_metcro3d_variables = (
  'JACOBF',
  'JACOBM',
  'DENSA_J',
  'WHAT_JD',
  'TA',
  'QV',
  'PRES',
  'DENS',
  'ZH',
  'ZF',
  'QC',
  'QR',
  'QI',
  'QS',
  'QG',
  'WWIND'
);

my @_listos_lis_metcro3d_units = (
  'm',
  'm',
  'kg_m-2',
  'kg_m-1_s-1',
  'K',
  'kg_kg-1',
  'Pa',
  'kg_m-3',
  'm',
  'm',
  'kg_kg-1',
  'kg_kg-1',
  'kg_kg-1',
  'kg_kg-1',
  'kg_kg-1',
  'm_s-1'
);

my @_listos_lis_metcro3d_descriptions = (
  'Jacobian at layer face scaled by MSFX2',
  'Jacobian at layer middle scaled by MSFX2',
  'J-weighted air density (dry) scaled by MSFX2',
  'J- and density weighted vert contravariant-W',
  'air temperature',
  'water vapor mixing ratio',
  'pressure',
  'density of air (dry)',
  'mid-layer height above ground',
  'full-layer height above ground',
  'Cloud water mixing ratio',
  'Rain water mixing ratio',
  'Ice mixing ratio',
  'Snow mixing ratio',
  'Graupel mixing ratio',
  'Vertical component of wind velocity'
);



my @_listos_lis_metdot3d_variables = (
  'UWIND',
  'VWIND',
  'WIND' # Pseudo-variable implies all available wind vector components.
);

my @_listos_lis_metdot3d_units = (
  'm_s-1',
  'm_s-1',
  'm_s-1'
);

my @_listos_lis_metdot3d_descriptions = (
  'U-comp. of true wind at dot point',
  'V-comp. of true wind at dot point',
  'U,V-comp. of true wind at dot point'
);

















# OAQPS CONUS:

my @_oaqps_conus_aconc_variables = (
  'AFEJ',
  'AIR_DENS',
  'ALD2',
  'AORGAJ',
  'AORGBJ',
  'AUNSPEC1IJ',
  'AUNSPEC2IJ',
  'BENZENE',
  'CO',
  'ETHA',
  'ETH',
  'FORM',
  'H2O2',
  'HNO3_UGM3',
  'HNO3',
  'HONO',
  'HOX',
  'ISOP',
  'N2O5',
  'NH3_UGM3',
  'NH3',
  'NHX',
  'NO2',
  'NO',
  'NOX',
  'NOY',
  'NTR',
  'O3',
  'OH',
  'PANS',
  'PBLH',
  'PM10',
  'PM1',
  'PM25_CA',
  'PM25_CL',
  'PM25_EC',
  'PM25_FRM',
  'PM25_HP',
  'PM25_K',
  'PM25_MG',
  'PM25_NA',
  'PM25_NH4',
  'PM25_NO3',
  'PM25_OC',
  'PM25_OM',
  'PM25_SO4',
  'PM25_SOIL',
  'PM25to10_CL',
  'PM25to10_NA',
  'PM25to10_NH4',
  'PM25to10_NO3',
  'PM25to10_SO4',
  'PM25to10',
  'PM25',
  'PM25_UNSPCRS',
  'PM25_UNSPEC1',
  'PMACC_MASS',
  'PMAIT_MASS',
  'PMAMS_CL',
  'PMAMS_NH4',
  'PMAMS_NO3',
  'PMAMS_OA',
  'PMAMS_SO4',
  'PMC_CA',
  'PMC_K',
  'PMC_MASS',
  'PMC_MG',
  'PMC_NA',
  'PMC_NH4',
  'PMC_NO3',
  'PMC_SO4',
  'PMF_AL',
  'PMF_CA',
  'PMF_CLDGLY',
  'PMF_CL',
  'PMF_EC',
  'PMF_FRM',
  'PMF_HPLUS',
  'PMF_K',
  'PMF_MASS',
  'PMF_MG',
  'PMF_MN',
  'PMF_NA',
  'PMF_NCOM',
  'PMF_NH4',
  'PMF_NO3_PPB',
  'PMF_NO3',
  'PMF_OC',
  'PMF_OMOC',
  'PMF_OM',
  'PMF_POA',
  'PMF_POC',
  'PMF_SI',
  'PMF_SO4',
  'PMF_SOA',
  'PMF_SOC',
  'PMF_SOIL_IMPV',
  'PMF_TI',
  'PM_MASS',
  'precip',
  'RH',
  'SFC_TMP',
  'SO2_UGM3',
  'SO2',
  'SOL_RAD',
  'TERP',
  'TNO3',
  'TOL',
  'WDIR10',
  'WSPD10',
  'XYL'
);

my @_oaqps_conus_aconc_units = (
  'ug m-3',
  'kg m-3',
  'ppbV',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ug m-3',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ug m-3',
  'ppbV',
  'ug m-3',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'm',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ugC m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'umol m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ppbV',
  'ug m-3',
  'ugC m-3',
  'ug ug-1',
  'ug m-3',
  'ug m-3',
  'ugC m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ugC m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'cm',
  '%',
  'C',
  'ug m-3',
  'ppbV',
  'W m-2',
  'ppbV',
  'ug m-3',
  'ppbV',
  'deg',
  'm s-1',
  'ppbV'
);

my @_oaqps_conus_aconc_descriptions = (
  'Fine Particle Iron PMF_FE',
  'Air Density',
  'Acetaldehyde',
  'PMF_ASOA[3]',
  'PMF_BSOA[3]',
  'PMF_UN_IMPV1[3]',
  'PMF_UN_IMPV2[3]',
  'Benzene',
  'Carbon Monoxide',
  'Ethane',
  'Ethene',
  'Formaldehyde',
  'Hydrogen Peroxide',
  'Nitric Acid (concentration)',
  'Nitric Acid',
  'Nitrous Acid',
  'Hydroxyl Radical (OH) + Hydroperoxy Radical (HO2)',
  'Isoprene',
  'Dinitrogen Pentoxide',
  'Ammonia (concentration)',
  'Ammonia',
  'Inorganic Nitrogen (ammonia gas plus particulate ammonium)',
  'Nitrogen Dioxide',
  'Nitric Oxide',
  'Nitrogen Oxides (NO + NO2)',
  'Total Reative Nitrogen (NO + NO2 + HNO3 + PAN + other organic nitrates)',
  'Monofunctional Organic Nitrates (NTR1) + Multifunctional Organic Nitrates (NTR2)',
  'Ozone',
  'Hydroxyl Radical',
  'Peroxyacylnitrate (PAN) + peroxyacylnitrates with 3 or morecarbons (PANX) + pero',
  'Planetary Boundary Layer Height',
  'Particulate Matter up to 10 micrometers in Size',
  'PM1 (sharp 1 micrometer cutoff computed using modeled size distribution)',
  'PM2.5 Calcium  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Chloride  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Elemental Carbon  (sharp cutoff computed using modeled size distribution)',
  'FRM Equivalent PM2.5 (computed using modeled size distribution)',
  'Hydronium Ion (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Potassium  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Magnesium  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Sodium  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Ammonium  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Nitrate  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Organic Carbon  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Organic Matter  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Sulfate  (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Lumped Crustal Species (sharp cutoff computed using modeled size distribut',
  'Coarse Mode Chlorine (Total CL - PM25_CL)',
  'Coarse Mode Sodium (Total NA - PM25_NA)',
  'Coarse Mode Ammonium (Total NH4 - PM25_NH4)',
  'Coarse Mode Nitrate (Total Particle NO3 - PM25_NO3)',
  'Coarse Mode Sulfate (Total Particle SO4 - PM25_SO4)',
  'Coarse Mode Particulate Matter (Total PM - PM25_TOT)',
  'PM25_UNSPCRS[3]',
  'Other PM2.5 Species (Total - (CL+EC+NA+NH4+NO3+OC+SOIL+SO4))',
  'Total PM2.5 (sharp cutoff computed using modeled size distribution)',
  'Accumulation Particle Mass',
  'Aitken Particle Mass',
  'PMAMS_CL[3]',
  'PMAMS_NH4[3]',
  'PMAMS_NO3[3]',
  'PMAMS_OA[3]',
  'PMAMS_SO4[3]',
  'Coarse Particle Calcium',
  'Coarse Particle Potassium',
  'Coarse Particle Mass',
  'Coarse Particle Magnesium',
  'Coarse Particle Sodium',
  'Coarse Particle Ammonium',
  'Coarse Particle Nitrate',
  'Coarse Particle Sulfate',
  'Fine Particle Aluminum',
  'Fine Particle Calcium',
  'Glyoxal and methylglyoxal SOA produced in cloud water',
  'Fine Particle Chloride',
  'Fine Particle Elemental Carbon',
  'FRM Equivalent Particulate Matter (Fine Mode)',
  'Fine Particle Hydronium Ion',
  'Fine Particle Potassium',
  'Fine Particle Mass',
  'Fine Particle Magnesium',
  'Fine Particle Manganese',
  'Fine Particle Sodium',
  'Fine Particle Non-Carbon Organic Mass (OM - OC)',
  'Fine Particle Ammonium',
  'Fine Particle Nitrate (mixing ratio)',
  'Fine Particle Nitrate',
  'Fine Particle Organic Carbon (C only)',
  'Fine Particle OM/OC Ratio',
  'Fine Particle Organic Matter (C,H,O,N, etc)',
  'Fine Particle Primary Organic Matter',
  'Fine Particle Primary Organic Carbon',
  'Fine Particle Silicon',
  'Fine Particle Sulfate',
  'Fine Particle Secondary Organic Matter',
  'Fine Particle Secondary Organic Carbon',
  'Fine Particle Lumped Crustal Species calculated with IMPROVE method',
  'Fine Particle Titanium',
  'Total Particle Mass',
  'Precipitation',
  'Relative Humidity',
  'Surface Temperature',
  'Sulfur Dioxide (concentration)',
  'Sulfur Dioxide',
  'Solar Radiation',
  'Monoterpenes',
  'Total Nitrate',
  'Toluene and Other Monoalkyl Aromatics',
  '10-m Wind Speed',
  '10-m Wind Direction',
  'Xylene and Other Polyalkyl Aromatics except Naphthalene'
);



my @_oaqps_conus_conc_variables = (
  'CO',
  'FORM',
  'NH3',
  'NO2',
  'O3',
  'PRES',
  'RH',
  'SO2',
  'TA'
);

my @_oaqps_conus_conc_units = (
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'Pa',
  '%',
  'ppbV',
  'K'
);

my @_oaqps_conus_conc_descriptions = (
  'Carbon Monoxide',
  'Formaldehyde',
  'Ammonia',
  'Nitrogen Dioxide',
  'Ozone',
  'Air Pressure',
  'Relative Humidity',
  'Sulfur Dioxide',
  'Air Temperature'
);


my @_oaqps_conus_integrated_variables = (
  'CO',
  'FORM',
  'NH3',
  'NO2',
  'O3',
  'SO2'
);

my @_oaqps_conus_integrated_units = (
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV'
);

my @_oaqps_conus_integrated_descriptions = (
  'Vertical layer integrated Carbon Monoxide',
  'Vertical layer integrated Formaldehyde',
  'Vertical layer integrated Ammonia',
  'Vertical layer integrated Nitrogen Dioxide',
  'Vertical layer integrated Ozone',
  'Vertical layer integrated Sulfur Dioxide'
);


my @_oaqps_conus_dep_variables = (
  'AFEJ',
  'AIR_DENS',
  'ALD2',
  'AORGAJ',
  'AORGBJ',
  'AUNSPEC1IJ',
  'AUNSPEC2IJ',
  'BENZENE',
  'CO',
  'ETHA',
  'ETH',
  'FORM',
  'H2O2',
  'HNO3',
  'HNO3_UGM3',
  'HONO',
  'HOX',
  'ISOP',
  'N2O5',
  'NH3',
  'NH3_UGM3',
  'NHX',
  'NO2',
  'NO',
  'NOX',
  'NOY',
  'NTR',
  'O3',
  'OH',
  'PANS',
  'PBLH',
  'PM10',
  'PM1',
  'PM25_CA',
  'PM25_CL',
  'PM25_EC',
  'PM25_FRM',
  'PM25_HP',
  'PM25_K',
  'PM25_MG',
  'PM25_NA',
  'PM25_NH4',
  'PM25_NO3',
  'PM25_OC',
  'PM25_OM',
  'PM25_SO4',
  'PM25_SOIL',
  'PM25to10_CL',
  'PM25to10',
  'PM25to10_NA',
  'PM25to10_NH4',
  'PM25to10_NO3',
  'PM25to10_SO4',
  'PM25',
  'PM25_UNSPCRS',
  'PM25_UNSPEC1',
  'PMACC_MASS',
  'PMAIT_MASS',
  'PMAMS_CL',
  'PMAMS_NH4',
  'PMAMS_NO3',
  'PMAMS_OA',
  'PMAMS_SO4',
  'PMC_CA',
  'PMC_K',
  'PMC_MASS',
  'PMC_MG',
  'PMC_NA',
  'PMC_NH4',
  'PMC_NO3',
  'PMC_SO4',
  'PMF_AL',
  'PMF_CA',
  'PMF_CLDGLY',
  'PMF_CL',
  'PMF_EC',
  'PMF_FRM',
  'PMF_HPLUS',
  'PMF_K',
  'PMF_MASS',
  'PMF_MG',
  'PMF_MN',
  'PMF_NA',
  'PMF_NCOM',
  'PMF_NH4',
  'PMF_NO3',
  'PMF_NO3_PPB',
  'PMF_OC',
  'PMF_OM',
  'PMF_OMOC',
  'PMF_POA',
  'PMF_POC',
  'PMF_SI',
  'PMF_SO4',
  'PMF_SOA',
  'PMF_SOC',
  'PMF_SOIL_IMPV',
  'PMF_TI',
  'PM_MASS',
  'precip',
  'RH',
  'SFC_TMP',
  'SO2',
  'SO2_UGM3',
  'SOL_RAD',
  'TERP',
  'TNO3',
  'TOL',
  'WDIR10',
  'WSPD10',
  'XYL'
);


my @_oaqps_conus_dep_units = (
  'ug m-3',
  'kg m-3',
  'ppbV',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ug m-3',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ug m-3',
  'ug m-3',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'm',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ugC m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'umol m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ppbV',
  'ug m-3',
  'ugC m-3',
  'ug ug-1',
  'ug m-3',
  'ug m-3',
  'ugC m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ugC m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'cm',
  '%',
  'C',
  'ppbV',
  'ug m-3',
  'W m-2',
  'ppbV',
  'ug m-3',
  'ppbV',
  'deg',
  'm s-1',
  'ppbV'
);


my @_oaqps_conus_dep_descriptions = (
  'Fine Particle Iron PMF_FE',
  'Air Density',
  'Acetaldehyde',
  'PMF_ASOA3',
  'PMF_BSOA3',
  'PMF_UN_IMPV13',
  'PMF_UN_IMPV23',
  'Benzene',
  'Carbon Monoxide',
  'Ethane',
  'Ethene',
  'Formaldehyde',
  'Hydrogen Peroxide',
  'Nitric Acid',
  'Nitric Acid (concentration)',
  'Nitrous Acid',
  'Hydroxyl Radical (OH) + Hydroperoxy Radical (HO2)',
  'Isoprene',
  'Dinitrogen Pentoxide',
  'Ammonia',
  'Ammonia (concentration)',
  'Inorganic Nitrogen (ammonia gas plus particulate ammonium)',
  'Nitrogen Dioxide',
  'Nitric Oxide',
  'Nitrogen Oxides (NO + NO2)',
  'Total Reative Nitrogen (NO + NO2 + HNO3 + PAN + other organic nitrates)',
  'Monofunctional Organic Nitrates (NTR1) + Multifunctional Organic Nitrates (NTR2)',
  'Ozone',
  'Hydroxyl Radical',
  'Peroxyacylnitrate (PAN) + peroxyacylnitrates with 3 or morecarbons (PANX) + pero',
  'Planetary Boundary Layer Height',
  'Particulate Matter up to 10 micrometers in Size',
  'PM1 (sharp 1 micrometer cutoff computed using modeled size distribution)',
  'PM2.5 Calcium (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Chloride (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Elemental Carbon (sharp cutoff computed using modeled size distribution)',
  'FRM Equivalent PM2.5 (computed using modeled size distribution)',
  'Hydronium Ion (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Potassium (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Magnesium (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Sodium (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Ammonium (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Nitrate (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Organic Carbon (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Organic Matter (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Sulfate (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Lumped Crustal Species (sharp cutoff computed using modeled size distribut',
  'Coarse Mode Chlorine (Total CL - PM25_CL)',
  'Coarse Mode Particulate Matter (Total PM - PM25_TOT)',
  'Coarse Mode Sodium (Total NA - PM25_NA)',
  'Coarse Mode Ammonium (Total NH4 - PM25_NH4)',
  'Coarse Mode Nitrate (Total Particle NO3 - PM25_NO3)',
  'Coarse Mode Sulfate (Total Particle SO4 - PM25_SO4)',
  'Total PM2.5 (sharp cutoff computed using modeled size distribution)',
  'PM25_UNSPCRS3',
  'Other PM2.5 Species (Total - (CL+EC+NA+NH4+NO3+OC+SOIL+SO4))',
  'Accumulation Particle Mass',
  'Aitken Particle Mass',
  'PMAMS_CL3',
  'PMAMS_NH43',
  'PMAMS_NO33',
  'PMAMS_OA3',
  'PMAMS_SO43',
  'Coarse Particle Calcium',
  'Coarse Particle Potassium',
  'Coarse Particle Mass',
  'Coarse Particle Magnesium',
  'Coarse Particle Sodium',
  'Coarse Particle Ammonium',
  'Coarse Particle Nitrate',
  'Coarse Particle Sulfate',
  'Fine Particle Aluminum',
  'Fine Particle Calcium',
  'Glyoxal and methylglyoxal SOA produced in cloud water',
  'Fine Particle Chloride',
  'Fine Particle Elemental Carbon',
  'FRM Equivalent Particulate Matter (Fine Mode)',
  'Fine Particle Hydronium Ion',
  'Fine Particle Potassium',
  'Fine Particle Mass',
  'Fine Particle Magnesium',
  'Fine Particle Manganese',
  'Fine Particle Sodium',
  'Fine Particle Non-Carbon Organic Mass (OM - OC)',
  'Fine Particle Ammonium',
  'Fine Particle Nitrate',
  'Fine Particle Nitrate (mixing ratio)',
  'Fine Particle Organic Carbon (C only)',
  'Fine Particle Organic Matter (C,H,O,N, etc)',
  'Fine Particle OM/OC Ratio',
  'Fine Particle Primary Organic Matter',
  'Fine Particle Primary Organic Carbon',
  'Fine Particle Silicon',
  'Fine Particle Sulfate',
  'Fine Particle Secondary Organic Matter',
  'Fine Particle Secondary Organic Carbon',
  'Fine Particle Lumped Crustal Species calculated with IMPROVE method',
  'Fine Particle Titanium',
  'Total Particle Mass',
  'Precipitation',
  'Relative Humidity',
  'Surface Temperature',
  'Sulfur Dioxide',
  'Sulfur Dioxide (concentration)',
  'Solar Radiation',
  'Monoterpenes',
  'Total Nitrate',
  'Toluene and Other Monoalkyl Aromatics',
  '10-m Wind Speed',
  '10-m Wind Direction',
  'Xylene and Other Polyalkyl Aromatics except Naphthalene'
);



my @_oaqps_conus_lstaconc_variables = (
  'AFEJ',
  'AIR_DENS',
  'ALD2',
  'AORGAJ',
  'AORGBJ',
  'AUNSPEC1IJ',
  'AUNSPEC2IJ',
  'BENZENE',
  'CO',
  'ETHA',
  'ETH',
  'FORM',
  'H2O2',
  'HNO3',
  'HNO3_UGM3',
  'HONO',
  'HOX',
  'ISOP',
  'N2O5',
  'NH3',
  'NH3_UGM3',
  'NHX',
  'NO2',
  'NO',
  'NOX',
  'NOY',
  'NTR',
  'O3',
  'OH',
  'PANS',
  'PBLH',
  'PM10',
  'PM1',
  'PM25_CA',
  'PM25_CL',
  'PM25_EC',
  'PM25_FRM',
  'PM25_HP',
  'PM25_K',
  'PM25_MG',
  'PM25_NA',
  'PM25_NH4',
  'PM25_NO3',
  'PM25_OC',
  'PM25_OM',
  'PM25_SO4',
  'PM25_SOIL',
  'PM25to10_CL',
  'PM25to10_NA',
  'PM25to10_NH4',
  'PM25to10_NO3',
  'PM25to10_SO4',
  'PM25to10',
  'PM25',
  'PM25_UNSPCRS',
  'PM25_UNSPEC1',
  'PMACC_MASS',
  'PMAIT_MASS',
  'PMAMS_CL',
  'PMAMS_NH4',
  'PMAMS_NO3',
  'PMAMS_OA',
  'PMAMS_SO4',
  'PMC_CA',
  'PMC_K',
  'PMC_MASS',
  'PMC_MG',
  'PMC_NA',
  'PMC_NH4',
  'PMC_NO3',
  'PMC_SO4',
  'PMF_AL',
  'PMF_CA',
  'PMF_CLDGLY',
  'PMF_CL',
  'PMF_EC',
  'PMF_FRM',
  'PMF_HPLUS',
  'PMF_K',
  'PMF_MASS',
  'PMF_MG',
  'PMF_MN',
  'PMF_NA',
  'PMF_NCOM',
  'PMF_NH4',
  'PMF_NO3_PPB',
  'PMF_NO3',
  'PMF_OC',
  'PMF_OMOC',
  'PMF_OM',
  'PMF_POA',
  'PMF_POC',
  'PMF_SI',
  'PMF_SO4',
  'PMF_SOA',
  'PMF_SOC',
  'PMF_SOIL_IMPV',
  'PMF_TI',
  'PM_MASS',
  'precip',
  'RH',
  'SFC_TMP',
  'SO2',
  'SO2_UGM3',
  'SOL_RAD',
  'TERP',
  'TNO3',
  'TOL',
  'WDIR10',
  'WSPD10',
  'XYL'
);


my @_oaqps_conus_lstaconc_units = (
  'ug m-3',
  'kg m-3',
  'ppbV',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ug m-3',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ug m-3',
  'ug m-3',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'ppbV',
  'm',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ugC m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'umol m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ppbV',
  'ug m-3',
  'ugC m-3',
  'ug ug-1',
  'ug m-3',
  'ug m-3',
  'ugC m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'ugC m-3',
  'ug m-3',
  'ug m-3',
  'ug m-3',
  'cm',
  '%',
  'C',
  'ppbV',
  'ug m-3',
  'W m-2',
  'ppbV',
  'ug m-3',
  'ppbV',
  'deg',
  'm s-1',
  'ppbV'
);

my @_oaqps_conus_lstaconc_descriptions = (
  'Fine Particle Iron PMF_FE',
  'Air Density',
  'Acetaldehyde',
  'Daily-average',
  'Daily-average',
  'Daily-average',
  'Daily-average',
  'Benzene',
  'Carbon Monoxide',
  'Ethane',
  'Ethene',
  'Formaldehyde',
  'Hydrogen Peroxide',
  'Nitric Acid',
  'Nitric Acid (concentration)',
  'Nitrous Acid',
  'Hydroxyl Radical (OH) + Hydroperoxy Radical (HO2)',
  'Isoprene',
  'Dinitrogen Pentoxide',
  'Ammonia',
  'Ammonia (concentration)',
  'Inorganic Nitrogen (ammonia gas plus particulate ammonium)',
  'Nitrogen Dioxide',
  'Nitric Oxide',
  'Nitrogen Oxides (NO + NO2)',
  'Total Reative Nitrogen (NO + NO2 + HNO3 + PAN + other organic nitrates)',
  'Monofunctional Organic Nitrates (NTR1) + Multifunctional Organic Nitrates (NTR2)',
  'Ozone',
  'Hydroxyl Radical',
  'Peroxyacylnitrate (PAN) + peroxyacylnitrates with 3 or morecarbons (PANX) + pero',
  'Planetary Boundary Layer Height',
  'Particulate Matter up to 10 micrometers in Size',
  'PM1 (sharp 1 micrometer cutoff computed using modeled size distribution)',
  'PM2.5 Calcium (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Chloride (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Elemental Carbon (sharp cutoff computed using modeled size distribution)',
  'FRM Equivalent PM2.5 (computed using modeled size distribution)',
  'Hydronium Ion (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Potassium (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Magnesium (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Sodium (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Ammonium (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Nitrate (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Organic Carbon (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Organic Matter (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Sulfate (sharp cutoff computed using modeled size distribution)',
  'PM2.5 Lumped Crustal Species (sharp cutoff computed using modeled size distribut',
  'Coarse Mode Chlorine (Total CL - PM25_CL)',
  'Coarse Mode Particulate Matter (Total PM - PM25_TOT)',
  'Coarse Mode Sodium (Total NA - PM25_NA)',
  'Coarse Mode Ammonium (Total NH4 - PM25_NH4)',
  'Coarse Mode Nitrate (Total Particle NO3 - PM25_NO3)',
  'Coarse Mode Sulfate (Total Particle SO4 - PM25_SO4)',
  'Total PM2.5 (sharp cutoff computed using modeled size distribution)',
  'Daily-average',
  'Other PM2.5 Species (Total - (CL+EC+NA+NH4+NO3+OC+SOIL+SO4))',
  'Accumulation Particle Mass',
  'Aitken Particle Mass',
  'Daily-average',
  'Daily-average',
  'Daily-average',
  'Daily-average',
  'Daily-average',
  'Coarse Particle Calcium',
  'Coarse Particle Potassium',
  'Coarse Particle Mass',
  'Coarse Particle Magnesium',
  'Coarse Particle Sodium',
  'Coarse Particle Ammonium',
  'Coarse Particle Nitrate',
  'Coarse Particle Sulfate',
  'Fine Particle Aluminum',
  'Fine Particle Calcium',
  'Glyoxal and methylglyoxal SOA produced in cloud water',
  'Fine Particle Chloride',
  'Fine Particle Elemental Carbon',
  'FRM Equivalent Particulate Matter (Fine Mode)',
  'Fine Particle Hydronium Ion',
  'Fine Particle Potassium',
  'Fine Particle Mass',
  'Fine Particle Magnesium',
  'Fine Particle Manganese',
  'Fine Particle Sodium',
  'Fine Particle Non-Carbon Organic Mass (OM - OC)',
  'Fine Particle Ammonium',
  'Fine Particle Nitrate',
  'Fine Particle Nitrate (mixing ratio)',
  'Fine Particle Organic Carbon (C only)',
  'Fine Particle Organic Matter (C,H,O,N, etc)',
  'Fine Particle OM/OC Ratio',
  'Fine Particle Primary Organic Matter',
  'Fine Particle Primary Organic Carbon',
  'Fine Particle Silicon',
  'Fine Particle Sulfate',
  'Fine Particle Secondary Organic Matter',
  'Fine Particle Secondary Organic Carbon',
  'Fine Particle Lumped Crustal Species calculated with IMPROVE method',
  'Fine Particle Titanium',
  'Total Particle Mass',
  'Precipitation',
  'Relative Humidity',
  'Surface Temperature',
  'Sulfur Dioxide',
  'Sulfur Dioxide (concentration)',
  'Solar Radiation',
  'Monoterpenes',
  'Total Nitrate',
  'Toluene and Other Monoalkyl Aromatics',
  '10-m Wind Speed',
  '10-m Wind Direction',
  'Xylene and Other Polyalkyl Aromatics except Naphthalene'
);



my @_oaqps_conus_metdot3d_variables = (
  'UHAT_JD',
  'UWINDC',
  'UWIND',
  'VHAT_JD',
  'VWINDC',
  'VWIND'
);

my @_oaqps_conus_metdot3d_units = (
  'kg m-1 s-1',
  'm s-1',
  'm s-1',
  'kg m-1 s-1',
  'm s-1',
  'm s-1'
);

my @_oaqps_conus_metdot3d_descriptions = (
  '(contravariant_U*Jacobian*Density) at square pt',
  'U-comp. of true wind at W-E faces',
  'U-comp. of true wind at dot point',
  '(contravariant_V*Jacobian*Density) at triangle pt',
  'V-comp. of true wind at S-N faces',
  'V-comp. of true wind at dot point'
);


my @_oaqps_conus_metcro3d_variables = (
  'CLDFRA_DP',
  'CLDFRA_SH',
  'DENSA_J',
  'DENS',
  'JACOBF',
  'JACOBM',
  'PRES',
  'PV',
  'QC_CU',
  'QC',
  'QG',
  'QI_CU',
  'QI',
  'QR',
  'QS',
  'QV',
  'TA',
  'WHAT_JD',
  'WWIND',
  'ZF',
  'ZH'
);

my @_oaqps_conus_metcro3d_units = (
  '-',
  '-',
  'kg m-2',
  'kg m-3',
  'm',
  'm',
  'Pa',
  'm2 K mg-1 s-1',
  'kg kg-1',
  'kg kg-1',
  'kg kg-1',
  'kg kg-1',
  'kg kg-1',
  'kg kg-1',
  'kg kg-1',
  'kg kg-1',
  'K',
  'kg m-1 s-1',
  'm s-1',
  'm',
  'm'
);

my @_oaqps_conus_metcro3d_descriptions = (
  'subgrid deep cloud fraction',
  'subgrid shallow cloud fraction',
  'J-weighted air density (dry) scaled by MSFX2',
  'density of air (dry)',
  'Jacobian at layer face scaled by MSFX2',
  'Jacobian at layer middle scaled by MSFX2',
  'pressure',
  'potential vorticity (m2 K kg-1 s-1 * E-6)',
  'Cloud water mixing ratio',
  'subgrid cloud water mixing ratio from KF',
  'Graupel mixing ratio',
  'subgrid cloud ice mixing ratio from KF',
  'Ice mixing ratio',
  'Rain water mixing ratio',
  'Snow mixing ratio',
  'water vapor mixing ratio',
  'air temperature',
  'J- and density weighted vert contravariant-W',
  'vertical velocity',
  'full-layer height above ground',
  'mid-layer height above ground'
);


my @_oaqps_conus_wwind_variables = (
  'WWIND'
);

my @_oaqps_conus_wwind_units = (
  'm/s'
);

my @_oaqps_conus_wwind_descriptions = (
  'Vertical wind component'
);



# Metadata by source, domain and file.

my @sources = (
  'amad', 'cdc', 'discover', 'wdt', 'equates', 'listos', 'oaqps'
);

my @domains = ( 'hemi', 'conus', 'east', 'md', 'conus4km', 'lis' );

my @files = (
  'aod', 'aconc', 'aerodiam', 'aerovis', 'conc', 'depv', 'drydep', 'emis',
  'ext', 'lstaconc',
  'metcro3d', 'metdot3d', 'pm', 'pm25', 'wetdep1', 'wetdep2', 'metcro2d', 'noy',
  'adep', 'mdep', 'ddep',
  'photdiag1', 'photdiag2', 'soilinp', 'ssemis',
  'b3gts_s', 'media', 'ltngdiag',
  'aod2pm25',
  'dep', 'integrated'
);

my %metadata_by_year = (
  2002 => {
    'cdc'  => { 'east'  => 'yes' },
    'wdt'  => { 'conus' => 'yes' },
    'equates' => { 'conus' => 'yes', 'hemi' => 'yes' }
  },
  2003 => {
    'cdc'  => { 'east'  => 'yes' },
    'wdt'  => { 'conus' => 'yes' },
    'equates' => { 'conus' => 'yes', 'hemi' => 'yes' }
  },
  2004 => {
    'cdc'  => { 'east'  => 'yes' },
    'wdt'  => { 'conus' => 'yes' },
    'equates' => { 'conus' => 'yes', 'hemi' => 'yes' }
  },
  2005 => {
    'cdc'  => { 'east'  => 'yes' },
    'wdt'  => { 'conus' => 'yes' },
    'equates' => { 'conus' => 'yes', 'hemi' => 'yes' }
  },
  2006 => {
    'cdc'  => { 'east'  => 'yes' },
    'wdt'  => { 'conus' => 'yes' },
    'equates' => { 'conus' => 'yes', 'hemi' => 'yes' }
  },
  2007 => {
    'cdc' => { 'conus'  => 'yes' },
    'wdt' => { 'conus'  => 'yes' },
    'equates' => { 'conus' => 'yes', 'hemi' => 'yes' }
  },
  2008 => {
    'cdc'  => { 'conus' => 'yes' },
    'wdt'  => { 'conus' => 'yes' },
    'equates' => { 'conus' => 'yes', 'hemi' => 'yes' }
  },
  2009 => {
    'cdc'  => { 'conus' => 'yes' },
    'wdt'  => { 'conus' => 'yes' },
    'equates' => { 'conus' => 'yes', 'hemi' => 'yes' }
  },
  2010 => {
    'cdc'  => { 'conus' => 'yes' },
    'wdt'  => { 'conus' => 'yes' },
    'equates' => { 'conus' => 'yes', 'hemi' => 'yes' }
  },
  2011 => {
    'cdc'  => { 'conus' => 'yes' },
    'wdt'  => { 'conus' => 'yes' },
    'discover' => { 'conus' => 'yes', 'east' => 'yes', 'md' => 'yes' },
    'equates' => { 'conus' => 'yes', 'hemi' => 'yes' }
  },
  2012 => {
    'cdc'  => { 'conus' => 'yes' },
    'wdt'  => { 'conus' => 'yes' },
    'equates' => { 'conus' => 'yes', 'hemi' => 'yes' }
  },
  2013 => {
    'equates' => { 'conus' => 'yes', 'hemi' => 'yes' }
  },
  2014 => {
    'equates' => { 'conus' => 'yes', 'hemi' => 'yes' }
  },
  2015 => {
    'equates' => { 'conus' => 'yes', 'hemi' => 'yes' }
  },
  2016 => {
    'equates' => { 'conus' => 'yes', 'hemi' => 'yes' }
  },
  2017 => {
    'equates' => { 'conus' => 'yes', 'hemi' => 'yes' }
  },
  2018 => {
    'equates' => { 'conus' => 'yes', 'hemi' => 'yes' },
    'listos' => { 'lis' => 'yes' }
  },
  2019 => {
    'equates' => { 'conus' => 'yes', 'hemi' => 'yes' }
  },
  2022 => {
    'oaqps' => { 'conus' => 'yes' }
  },
  2025 => {
    'amad' => { 'conus' => 'yes' },
    'wdt'  => { 'conus' => 'yes' }
  }
);

my %metadata = (
  'cdc' => {
    'east' => {
      'directory'         => '/data/CMAQ/CDC/EAST',
      'begin_date'        => '2002-01-01',
      'end_date'          => '2006-12-31',
      'ellipsoid'         => '6370000 6370000',
      'minimum_longitude' => -111,
      'maximum_longitude' => -65,
      'minimum_latitude'  => 23,
      'maximum_latitude'  => 51,
      'aconc' => {
        'data_file'       => 'ACONC.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_cdc_east_aconc_variables,
        'units'           => \@_cdc_east_aconc_units,
        'descriptions'    => \@_cdc_east_aconc_descriptions
      },
      'pm25' => {
        'data_file'       => 'pm25.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_cdc_east_pm25_variables,
        'units'           => \@_cdc_east_pm25_units,
        'descriptions'    => \@_cdc_east_pm25_descriptions
      }
    },
    'conus' => {
      'directory'         => '/data/CMAQ/CDC/CONUS',
      'begin_date'        => '2007-01-01',
      'end_date'          => '2012-12-31',
      'ellipsoid'         => '6370000 6370000',
      'minimum_longitude' => -135,
      'maximum_longitude' => -54,
      'minimum_latitude'  => 20,
      'maximum_latitude'  => 57,
      'aconc' => {
        'data_file'       => 'ACONC.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_cdc_conus_aconc_variables,
        'units'           => \@_cdc_conus_aconc_units,
        'descriptions'    => \@_cdc_conus_aconc_descriptions
      },
      'pm25' => {
        'data_file'       => 'pm25.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_cdc_conus_pm25_variables,
        'units'           => \@_cdc_conus_pm25_units,
        'descriptions'    => \@_cdc_conus_pm25_descriptions
      }
    }
  },
  'amad' => {
    'hemi' => {
      'directory'         => '/data/CMAQ/AMAD/HEMI',
      'begin_date'        => '2006-01-01',
      'end_date'          => '2006-12-31',
      'ellipsoid'         => '6370000 6370000',
      'minimum_longitude' => -180,
      'maximum_longitude' => 180,
      'minimum_latitude'  => -16,
      'maximum_latitude'  => 90,
      'aerovis' => {
        'data_file'       => 'AEROVIS.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_amad_hemi_aerovis_variables,
        'units'           => \@_amad_hemi_aerovis_units,
        'descriptions'    => \@_amad_hemi_aerovis_descriptions
      }
    },
    'conus' => {
      'directory'         => '/data/CMAQ/AMAD/CONUS',
      'begin_date'        => '2002-01-01',
      'end_date'          => '2012-12-31',
      'ellipsoid'         => '6370000 6370000',
      'minimum_longitude' => -135,
      'maximum_longitude' => -54,
      'minimum_latitude'  => 20,
      'maximum_latitude'  => 57,
      'aconc' => {
        'data_file'       => 'ACONC.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_amad_conus_aconc_variables,
        'units'           => \@_amad_conus_aconc_units,
        'descriptions'    => \@_amad_conus_aconc_descriptions
      },
      'aerodiam' => {
        'data_file'       => 'AERODIAM.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_amad_conus_aerodiam_variables,
        'units'           => \@_amad_conus_aerodiam_units,
        'descriptions'    => \@_amad_conus_aerodiam_descriptions
      },
      'aerovis' => {
        'data_file'       => 'AEROVIS.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_amad_conus_aerovis_variables,
        'units'           => \@_amad_conus_aerovis_units,
        'descriptions'    => \@_amad_conus_aerovis_descriptions
      },
      'aod' => {
        'data_file'       => 'aod.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_amad_conus_aod_variables,
        'units'           => \@_amad_conus_aod_units,
        'descriptions'    => \@_amad_conus_aod_descriptions
      },
      'b3gts_s' => {
        'data_file'       => 'B3GTS_S.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_amad_conus_b3gts_s_variables,
        'units'           => \@_amad_conus_b3gts_s_units,
        'descriptions'    => \@_amad_conus_b3gts_s_descriptions
      },
      'conc' => {
        'data_file'       => 'CONC.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_amad_conus_conc_variables,
        'units'           => \@_amad_conus_conc_units,
        'descriptions'    => \@_amad_conus_conc_descriptions
      },
      'depv' => {
        'data_file'       => 'DEPV.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_amad_conus_depv_variables,
        'units'           => \@_amad_conus_depv_units,
        'descriptions'    => \@_amad_conus_depv_descriptions
      },
      'drydep' => {
        'data_file'       => 'DRYDEP.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_amad_conus_drydep_variables,
        'units'           => \@_amad_conus_drydep_units,
        'descriptions'    => \@_amad_conus_drydep_descriptions
      },
      'emis' => {
        'data_file'       => 'EMIS.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_amad_conus_emis_variables,
        'units'           => \@_amad_conus_emis_units,
        'descriptions'    => \@_amad_conus_emis_descriptions
      },
      'ext' => {
        'data_file'       => 'ext.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_amad_conus_ext_variables,
        'units'           => \@_amad_conus_ext_units,
        'descriptions'    => \@_amad_conus_ext_descriptions
      },
      'ltngdiag' => {
        'data_file'       => 'LTNGDIAG.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_amad_conus_ltngdiag_variables,
        'units'           => \@_amad_conus_ltngdiag_units,
        'descriptions'    => \@_amad_conus_ltngdiag_descriptions
      },
      'media' => {
        'data_file'       => 'MEDIA.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_amad_conus_media_variables,
        'units'           => \@_amad_conus_media_units,
        'descriptions'    => \@_amad_conus_media_descriptions
      },
      'metcro2d' => {
        'data_file'       => 'METCRO2D',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_amad_conus_metcro2d_variables,
        'units'           => \@_amad_conus_metcro2d_units,
        'descriptions'    => \@_amad_conus_metcro2d_descriptions
      },
      'metcro3d' => {
        'data_file'       => 'METCRO3D',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_amad_conus_metcro3d_variables,
        'units'           => \@_amad_conus_metcro3d_units,
        'descriptions'    => \@_amad_conus_metcro3d_descriptions
      },
      'metdot3d' => {
        'data_file'       => 'METDOT3D',
        'elevation_file'  => 'dot_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_amad_conus_metdot3d_variables,
        'units'           => \@_amad_conus_metdot3d_units,
        'descriptions'    => \@_amad_conus_metdot3d_descriptions
      },
      'noy' => {
        'data_file'       => 'noy.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_amad_conus_noy_variables,
        'units'           => \@_amad_conus_noy_units,
        'descriptions'    => \@_amad_conus_noy_descriptions
      },
      'photdiag1' => {
        'data_file'       => 'PHOTDIAG1.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_amad_conus_photdiag1_variables,
        'units'           => \@_amad_conus_photdiag1_units,
        'descriptions'    => \@_amad_conus_photdiag1_descriptions
      },
      'photdiag2' => {
        'data_file'       => 'PHOTDIAG2.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_amad_conus_photdiag2_variables,
        'units'           => \@_amad_conus_photdiag2_units,
        'descriptions'    => \@_amad_conus_photdiag2_descriptions
      },
      'pm' => {
        'data_file'       => 'pm.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_amad_conus_pm_variables,
        'units'           => \@_amad_conus_pm_units,
        'descriptions'    => \@_amad_conus_pm_descriptions
      },
      'pm25' => {
        'data_file'       => 'pm25.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_amad_conus_pm25_variables,
        'units'           => \@_amad_conus_pm25_units,
        'descriptions'    => \@_amad_conus_pm25_descriptions
      },
      'soilinp' => {
        'data_file'       => 'SOILINP.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_amad_conus_soilinp_variables,
        'units'           => \@_amad_conus_soilinp_units,
        'descriptions'    => \@_amad_conus_soilinp_descriptions
      },
      'wetdep1' => {
        'data_file'       => 'WETDEP1.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_amad_conus_wetdep1_variables,
        'units'           => \@_amad_conus_wetdep1_units,
        'descriptions'    => \@_amad_conus_wetdep1_descriptions
      },
      'wetdep2' => {
        'data_file'       => 'WETDEP2.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_amad_conus_wetdep2_variables,
        'units'           => \@_amad_conus_wetdep2_units,
        'descriptions'    => \@_amad_conus_wetdep2_descriptions
      }
    }
  },
  'equates' => {
    'conus' => {
      'directory'         => '/data/CMAQ/EQUATES/CONUS',
      'begin_date'        => '2002-01-01',
      'end_date'          => '2017-12-31',
      'ellipsoid'         => '6370000 6370000',
      'minimum_longitude' => -135,
      'maximum_longitude' => -54,
      'minimum_latitude'  => 20,
      'maximum_latitude'  => 57,
      'aconc' => {
        'data_file'       => 'ACONC.ncf',
        'layers'          => 1,
        'variables'       => \@_equates_conus_aconc_variables,
        'units'           => \@_equates_conus_aconc_units,
        'descriptions'    => \@_equates_conus_aconc_descriptions
      },
      'conc' => {
        'data_file'       => 'CONC.ncf',
        'layers'          => 35,
        'variables'       => \@_equates_conus_conc_variables,
        'units'           => \@_equates_conus_conc_units,
        'descriptions'    => \@_equates_conus_conc_descriptions
      },
      'dep' => {
        'data_file'       => 'DEP.ncf',
        'layers'          => 1,
        'variables'       => \@_equates_conus_dep_variables,
        'units'           => \@_equates_conus_dep_units,
        'descriptions'    => \@_equates_conus_dep_descriptions
      },
      'ddep' => {
        'data_file'       => 'DDEP.ncf',
        'layers'          => 1,
        'variables'       => \@_equates_conus_dep_variables,
        'units'           => \@_equates_conus_dep_units,
        'descriptions'    => \@_equates_conus_dep_descriptions
      },
      'mdep' => {
        'data_file'       => 'MDEP.ncf',
        'layers'          => 1,
        'variables'       => \@_equates_conus_dep_variables,
        'units'           => \@_equates_conus_dep_units,
        'descriptions'    => \@_equates_conus_dep_descriptions
      },
      'adep' => {
        'data_file'       => 'ADEP.ncf',
        'layers'          => 1,
        'variables'       => \@_equates_conus_dep_variables,
        'units'           => \@_equates_conus_dep_units,
        'descriptions'    => \@_equates_conus_dep_descriptions
      },
      'emis' => {
        'data_file'       => 'EMIS.ncf',
        'layers'          => 1,
        'variables'       => \@_equates_conus_emis_variables,
        'units'           => \@_equates_conus_emis_units,
        'descriptions'    => \@_equates_conus_emis_descriptions
      },
      'integrated' => {
        'data_file'       => 'INTEGRATED.ncf',
        'layers'          => 1,
        'variables'       => \@_equates_conus_integrated_variables,
        'units'           => \@_equates_conus_integrated_units,
        'descriptions'    => \@_equates_conus_integrated_descriptions
      },
      'metcro3d' => {
        'data_file'       => 'METCRO3D',
        'layers'          => 35,
        'variables'       => \@_equates_conus_metcro3d_variables,
        'units'           => \@_equates_conus_metcro3d_units,
        'descriptions'    => \@_equates_conus_metcro3d_descriptions
      },
      'metdot3d' => {
        'data_file'       => 'METDOT3D',
        'layers'          => 35,
        'variables'       => \@_equates_conus_metdot3d_variables,
        'units'           => \@_equates_conus_metdot3d_units,
        'descriptions'    => \@_equates_conus_metdot3d_descriptions
      },
      'wwind' => {
        'data_file'       => 'WWIND.ncf',
        'layers'          => 35,
        'variables'       => \@_equates_conus_wwind_variables,
        'units'           => \@_equates_conus_wwind_units,
        'descriptions'    => \@_equates_conus_wwind_descriptions
      },
      'lstaconc' => {
        'data_file'       => 'LSTACONC.ncf',
        'layers'          => 1,
        'variables'       => \@_equates_conus_lstaconc_variables,
        'units'           => \@_equates_conus_lstaconc_units,
        'descriptions'    => \@_equates_conus_lstaconc_descriptions
      }
    },
    'hemi' => {
      'directory'         => '/data/CMAQ/EQUATES/HEMI',
      'begin_date'        => '2002-01-01',
      'end_date'          => '2017-12-31',
      'ellipsoid'         => '6370000 6370000',
      'minimum_longitude' => -180,
      'maximum_longitude' => 180,
      'minimum_latitude'  => 90,
      'maximum_latitude'  => -16,
      'aconc' => {
        'data_file'       => 'ACONC.ncf',
        'layers'          => 1,
        'variables'       => \@_equates_hemi_aconc_variables,
        'units'           => \@_equates_hemi_aconc_units,
        'descriptions'    => \@_equates_hemi_aconc_descriptions
      },
      'conc' => {
        'data_file'       => 'CONC.ncf',
        'layers'          => 44,
        'variables'       => \@_equates_hemi_conc_variables,
        'units'           => \@_equates_hemi_conc_units,
        'descriptions'    => \@_equates_hemi_conc_descriptions
      },
      'dep' => {
        'data_file'       => 'DEP.ncf',
        'layers'          => 1,
        'variables'       => \@_equates_hemi_dep_variables,
        'units'           => \@_equates_hemi_dep_units,
        'descriptions'    => \@_equates_hemi_dep_descriptions
      },
      'emis' => {
        'data_file'       => 'EMIS.ncf',
        'layers'          => 44,
        'variables'       => \@_equates_hemi_emis_variables,
        'units'           => \@_equates_hemi_emis_units,
        'descriptions'    => \@_equates_hemi_emis_descriptions
      },
      'integrated' => {
        'data_file'       => 'INTEGRATED.ncf',
        'layers'          => 1,
        'variables'       => \@_equates_hemi_integrated_variables,
        'units'           => \@_equates_hemi_integrated_units,
        'descriptions'    => \@_equates_hemi_integrated_descriptions
      },
      'metcro3d' => {
        'data_file'       => 'METCRO3D',
        'layers'          => 44,
        'variables'       => \@_equates_hemi_metcro3d_variables,
        'units'           => \@_equates_hemi_metcro3d_units,
        'descriptions'    => \@_equates_hemi_metcro3d_descriptions
      },
      'metdot3d' => {
        'data_file'       => 'METDOT3D',
        'layers'          => 44,
        'variables'       => \@_equates_hemi_metdot3d_variables,
        'units'           => \@_equates_hemi_metdot3d_units,
        'descriptions'    => \@_equates_hemi_metdot3d_descriptions
      },
      'wwind' => {
        'data_file'       => 'WWIND.ncf',
        'layers'          => 35,
        'variables'       => \@_equates_hemi_wwind_variables,
        'units'           => \@_equates_hemi_wwind_units,
        'descriptions'    => \@_equates_hemi_wwind_descriptions
      }
    }
  },
  'discover' => {
    'conus' => {
      'directory'         => '/data/CMAQ/DISCOVER/CONUS',
      'begin_date'        => '2011-07-01',
      'end_date'          => '2011-07-31',
      'ellipsoid'         => '6370000 6370000',
      'minimum_longitude' => -126,
      'maximum_longitude' => -60,
      'minimum_latitude'  => 25,
      'maximum_latitude'  => 60,
      'aconc' => {
        'data_file'       => 'ACONC.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_conus_aconc_variables,
        'units'           => \@_discover_conus_aconc_units,
        'descriptions'    => \@_discover_conus_aconc_descriptions
      },
      'aerodiam' => {
        'data_file'       => 'AERODIAM.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_discover_conus_aerodiam_variables,
        'units'           => \@_discover_conus_aerodiam_units,
        'descriptions'    => \@_discover_conus_aerodiam_descriptions
      },
      'aerovis' => {
        'data_file'       => 'AEROVIS.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_conus_aerovis_variables,
        'units'           => \@_discover_conus_aerovis_units,
        'descriptions'    => \@_discover_conus_aerovis_descriptions
      },
      'conc' => {
        'data_file'       => 'CONC.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_discover_conus_conc_variables,
        'units'           => \@_discover_conus_conc_units,
        'descriptions'    => \@_discover_conus_conc_descriptions
      },
      'depv' => {
        'data_file'       => 'DEPV.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_conus_depv_variables,
        'units'           => \@_discover_conus_depv_units,
        'descriptions'    => \@_discover_conus_depv_descriptions
      },
      'drydep' => {
        'data_file'       => 'DRYDEP.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_conus_drydep_variables,
        'units'           => \@_discover_conus_drydep_units,
        'descriptions'    => \@_discover_conus_drydep_descriptions
      },
      'dustemis' => {
        'data_file'       => 'DUSTEMIS.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_conus_dustemis_variables,
        'units'           => \@_discover_conus_dustemis_units,
        'descriptions'    => \@_discover_conus_dustemis_descriptions
      },
      'emis' => {
        'data_file'       => 'EMIS.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_conus_emis_variables,
        'units'           => \@_discover_conus_emis_units,
        'descriptions'    => \@_discover_conus_emis_descriptions
      },
      'metcro2d' => {
        'data_file'       => 'METCRO2D',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_conus_metcro2d_variables,
        'units'           => \@_discover_conus_metcro2d_units,
        'descriptions'    => \@_discover_conus_metcro2d_descriptions
      },
      'metcro3d' => {
        'data_file'       => 'METCRO3D',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_discover_conus_metcro3d_variables,
        'units'           => \@_discover_conus_metcro3d_units,
        'descriptions'    => \@_discover_conus_metcro3d_descriptions
      },
      'noy' => {
        'data_file'       => 'noy.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_discover_conus_noy_variables,
        'units'           => \@_discover_conus_noy_units,
        'descriptions'    => \@_discover_conus_noy_descriptions
      },
      'photdiag1' => {
        'data_file'       => 'PHOTDIAG1.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_conus_photdiag1_variables,
        'units'           => \@_discover_conus_photdiag1_units,
        'descriptions'    => \@_discover_conus_photdiag1_descriptions
      },
      'photdiag2' => {
        'data_file'       => 'PHOTDIAG2.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_discover_conus_photdiag2_variables,
        'units'           => \@_discover_conus_photdiag2_units,
        'descriptions'    => \@_discover_conus_photdiag2_descriptions
      },
      'pm25' => {
        'data_file'       => 'pm25.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_discover_conus_pm25_variables,
        'units'           => \@_discover_conus_pm25_units,
        'descriptions'    => \@_discover_conus_pm25_descriptions
      },
      'soilinp' => {
        'data_file'       => 'SOILINP.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_conus_soilinp_variables,
        'units'           => \@_discover_conus_soilinp_units,
        'descriptions'    => \@_discover_conus_soilinp_descriptions
      },
      'ssemis' => {
        'data_file'       => 'SSEMIS.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_conus_ssemis_variables,
        'units'           => \@_discover_conus_ssemis_units,
        'descriptions'    => \@_discover_conus_ssemis_descriptions
      },
      'wetdep1' => {
        'data_file'       => 'WETDEP1.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_conus_wetdep1_variables,
        'units'           => \@_discover_conus_wetdep1_units,
        'descriptions'    => \@_discover_conus_wetdep1_descriptions
      },
      'wetdep2' => {
        'data_file'       => 'WETDEP2.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_conus_wetdep2_variables,
        'units'           => \@_discover_conus_wetdep2_units,
        'descriptions'    => \@_discover_conus_wetdep2_descriptions
      }
    },
    'east' => {
      'directory'         => '/data/CMAQ/DISCOVER/EAST',
      'begin_date'        => '2011-07-01',
      'end_date'          => '2011-07-31',
      'ellipsoid'         => '6370000 6370000',
      'minimum_longitude' => -86,
      'maximum_longitude' => -69,
      'minimum_latitude'  => 35,
      'maximum_latitude'  => 43,
      'aconc' => {
        'data_file'       => 'ACONC.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_east_aconc_variables,
        'units'           => \@_discover_east_aconc_units,
        'descriptions'    => \@_discover_east_aconc_descriptions
      },
      'aerodiam' => {
        'data_file'       => 'AERODIAM.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_discover_east_aerodiam_variables,
        'units'           => \@_discover_east_aerodiam_units,
        'descriptions'    => \@_discover_east_aerodiam_descriptions
      },
      'aerovis' => {
        'data_file'       => 'AEROVIS.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_east_aerovis_variables,
        'units'           => \@_discover_east_aerovis_units,
        'descriptions'    => \@_discover_east_aerovis_descriptions
      },
      'conc' => {
        'data_file'       => 'CONC.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_discover_east_conc_variables,
        'units'           => \@_discover_east_conc_units,
        'descriptions'    => \@_discover_east_conc_descriptions
      },
      'depv' => {
        'data_file'       => 'DEPV.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_east_depv_variables,
        'units'           => \@_discover_east_depv_units,
        'descriptions'    => \@_discover_east_depv_descriptions
      },
      'drydep' => {
        'data_file'       => 'DRYDEP.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_east_drydep_variables,
        'units'           => \@_discover_east_drydep_units,
        'descriptions'    => \@_discover_east_drydep_descriptions
      },
      'emis' => {
        'data_file'       => 'EMIS.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_east_emis_variables,
        'units'           => \@_discover_east_emis_units,
        'descriptions'    => \@_discover_east_emis_descriptions
      },
      'metcro2d' => {
        'data_file'       => 'METCRO2D',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_east_metcro2d_variables,
        'units'           => \@_discover_east_metcro2d_units,
        'descriptions'    => \@_discover_east_metcro2d_descriptions
      },
      'metcro3d' => {
        'data_file'       => 'METCRO3D',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_discover_east_metcro3d_variables,
        'units'           => \@_discover_east_metcro3d_units,
        'descriptions'    => \@_discover_east_metcro3d_descriptions
      },
      'noy' => {
        'data_file'       => 'noy.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_discover_east_noy_variables,
        'units'           => \@_discover_east_noy_units,
        'descriptions'    => \@_discover_east_noy_descriptions
      },
      'pm25' => {
        'data_file'       => 'pm25.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_discover_east_pm25_variables,
        'units'           => \@_discover_east_pm25_units,
        'descriptions'    => \@_discover_east_pm25_descriptions
      },
      'soilinp' => {
        'data_file'       => 'SOILINP.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_east_soilinp_variables,
        'units'           => \@_discover_east_soilinp_units,
        'descriptions'    => \@_discover_east_soilinp_descriptions
      },
      'ssemis' => {
        'data_file'       => 'SSEMIS.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_east_ssemis_variables,
        'units'           => \@_discover_east_ssemis_units,
        'descriptions'    => \@_discover_east_ssemis_descriptions
      },
      'wetdep1' => {
        'data_file'       => 'WETDEP1.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_east_wetdep1_variables,
        'units'           => \@_discover_east_wetdep1_units,
        'descriptions'    => \@_discover_east_wetdep1_descriptions
      },
      'wetdep2' => {
        'data_file'       => 'WETDEP2.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_east_wetdep2_variables,
        'units'           => \@_discover_east_wetdep2_units,
        'descriptions'    => \@_discover_east_wetdep2_descriptions
      }
    },
    'md' => {
      'directory'         => '/data/CMAQ/DISCOVER/MD',
      'begin_date'        => '2011-07-02',
      'end_date'          => '2011-07-31',
      'ellipsoid'         => '6370000 6370000',
      'minimum_longitude' => -79,
      'maximum_longitude' => -74,
      'minimum_latitude'  => 37,
      'maximum_latitude'  => 40,
      'aconc' => {
        'data_file'       => 'ACONC.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_md_aconc_variables,
        'units'           => \@_discover_md_aconc_units,
        'descriptions'    => \@_discover_md_aconc_descriptions
      },
      'aerodiam' => {
        'data_file'       => 'AERODIAM.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_discover_md_aerodiam_variables,
        'units'           => \@_discover_md_aerodiam_units,
        'descriptions'    => \@_discover_md_aerodiam_descriptions
      },
      'aerovis' => {
        'data_file'       => 'AEROVIS.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_md_aerovis_variables,
        'units'           => \@_discover_md_aerovis_units,
        'descriptions'    => \@_discover_md_aerovis_descriptions
      },
      'conc' => {
        'data_file'       => 'CONC.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_discover_md_conc_variables,
        'units'           => \@_discover_md_conc_units,
        'descriptions'    => \@_discover_md_conc_descriptions
      },
      'depv' => {
        'data_file'       => 'DEPV.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_md_depv_variables,
        'units'           => \@_discover_md_depv_units,
        'descriptions'    => \@_discover_md_depv_descriptions
      },
      'drydep' => {
        'data_file'       => 'DRYDEP.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_md_drydep_variables,
        'units'           => \@_discover_md_drydep_units,
        'descriptions'    => \@_discover_md_drydep_descriptions
      },
      'emis' => {
        'data_file'       => 'EMIS.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_md_emis_variables,
        'units'           => \@_discover_md_emis_units,
        'descriptions'    => \@_discover_md_emis_descriptions
      },
      'metcro2d' => {
        'data_file'       => 'METCRO2D',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_md_metcro2d_variables,
        'units'           => \@_discover_md_metcro2d_units,
        'descriptions'    => \@_discover_md_metcro2d_descriptions
      },
      'metcro3d' => {
        'data_file'       => 'METCRO3D',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_discover_md_metcro3d_variables,
        'units'           => \@_discover_md_metcro3d_units,
        'descriptions'    => \@_discover_md_metcro3d_descriptions
      },
      'noy' => {
        'data_file'       => 'noy.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_discover_md_noy_variables,
        'units'           => \@_discover_md_noy_units,
        'descriptions'    => \@_discover_md_noy_descriptions
      },
      'pm25' => {
        'data_file'       => 'pm25.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 35,
        'variables'       => \@_discover_md_pm25_variables,
        'units'           => \@_discover_md_pm25_units,
        'descriptions'    => \@_discover_md_pm25_descriptions
      },
      'soilinp' => {
        'data_file'       => 'SOILINP.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_md_soilinp_variables,
        'units'           => \@_discover_md_soilinp_units,
        'descriptions'    => \@_discover_md_soilinp_descriptions
      },
      'ssemis' => {
        'data_file'       => 'SSEMIS.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_md_ssemis_variables,
        'units'           => \@_discover_md_ssemis_units,
        'descriptions'    => \@_discover_md_ssemis_descriptions
      },
      'wetdep1' => {
        'data_file'       => 'WETDEP1.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_md_wetdep1_variables,
        'units'           => \@_discover_md_wetdep1_units,
        'descriptions'    => \@_discover_md_wetdep1_descriptions
      },
      'wetdep2' => {
        'data_file'       => 'WETDEP2.ncf',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_discover_md_wetdep2_variables,
        'units'           => \@_discover_md_wetdep2_units,
        'descriptions'    => \@_discover_md_wetdep2_descriptions
      }
    }
  },
  'wdt' => {
    'conus' => {
      'directory'         => '/data/CMAQ/WDT/CONUS',
      'begin_date'        => '2002-01-01',
      'end_date'          => '2025-12-31',
      'ellipsoid'         => '6370000 6370000',
      'minimum_longitude' => -126,
      'maximum_longitude' => -60,
      'minimum_latitude'  => 25,
      'maximum_latitude'  => 60,
      'adep' => {
        'data_file'       => 'ADEP',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_wdt_conus_dep_variables,
        'units'           => \@_wdt_conus_dep_units,
        'descriptions'    => \@_wdt_conus_dep_descriptions
      },
      'mdep' => {
        'data_file'       => 'MDEP',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_wdt_conus_dep_variables,
        'units'           => \@_wdt_conus_dep_units,
        'descriptions'    => \@_wdt_conus_dep_descriptions
      },
      'ddep' => {
        'data_file'       => 'DDEP',
        'elevation_file'  => 'cro_elevation.ncf',
        'layers'          => 1,
        'variables'       => \@_wdt_conus_dep_variables,
        'units'           => \@_wdt_conus_dep_units,
        'descriptions'    => \@_wdt_conus_dep_descriptions
      }
    }
  },
  'listos' => {
    'lis' => {
      'directory'         => '/data/CMAQ/LISTOS/2018',
      'begin_date'        => '2018-07-01',
      'end_date'          => '2018-08-31',
      'ellipsoid'         => '6370000 6370000',
      'minimum_longitude' => -76.8,
      'maximum_longitude' => -70.6,
      'minimum_latitude'  => 38.4,
      'maximum_latitude'  => 43.4,
      'conc' => {
        'data_file'       => 'CONC.ncf',
        'layers'          => 35,
        'variables'       => \@_listos_lis_conc_variables,
        'units'           => \@_listos_lis_conc_units,
        'descriptions'    => \@_listos_lis_conc_descriptions
      },
      'metcro3d' => {
        'data_file'       => 'METCRO3D',
        'layers'          => 35,
        'variables'       => \@_listos_lis_metcro3d_variables,
        'units'           => \@_listos_lis_metcro3d_units,
        'descriptions'    => \@_listos_lis_metcro3d_descriptions
      },
      'metdot3d' => {
        'data_file'       => 'METDOT3D',
        'layers'          => 36,
        'variables'       => \@_listos_lis_metdot3d_variables,
        'units'           => \@_listos_lis_metdot3d_units,
        'descriptions'    => \@_listos_lis_metdot3d_descriptions
      }
    }
  },
  'oaqps' => {
    'conus' => {
      'directory'         => '/data/CMAQ/OAQPS/CONUS',
      'begin_date'        => '2022-01-01',
      'end_date'          => '2022-12-31',
      'ellipsoid'         => '6370000 6370000',
      'minimum_longitude' => -135,
      'maximum_longitude' => -54,
      'minimum_latitude'  => 20,
      'maximum_latitude'  => 57,
      'aconc' => {
        'data_file'       => 'ACONC.ncf',
        'layers'          => 1,
        'variables'       => \@_oaqps_conus_aconc_variables,
        'units'           => \@_oaqps_conus_aconc_units,
        'descriptions'    => \@_oaqps_conus_aconc_descriptions
      },
      'conc' => {
        'data_file'       => 'CONC.ncf',
        'layers'          => 35,
        'variables'       => \@_oaqps_conus_conc_variables,
        'units'           => \@_oaqps_conus_conc_units,
        'descriptions'    => \@_oaqps_conus_conc_descriptions
      },
      'dep' => {
        'data_file'       => 'DEP.ncf',
        'layers'          => 1,
        'variables'       => \@_oaqps_conus_dep_variables,
        'units'           => \@_oaqps_conus_dep_units,
        'descriptions'    => \@_oaqps_conus_dep_descriptions
      },
      'integrated' => {
        'data_file'       => 'INTEGRATED.ncf',
        'layers'          => 1,
        'variables'       => \@_oaqps_conus_integrated_variables,
        'units'           => \@_oaqps_conus_integrated_units,
        'descriptions'    => \@_oaqps_conus_integrated_descriptions
      },
      'metcro3d' => {
        'data_file'       => 'METCRO3D',
        'layers'          => 35,
        'variables'       => \@_oaqps_conus_metcro3d_variables,
        'units'           => \@_oaqps_conus_metcro3d_units,
        'descriptions'    => \@_oaqps_conus_metcro3d_descriptions
      },
      'metdot3d' => {
        'data_file'       => 'METDOT3D',
        'layers'          => 35,
        'variables'       => \@_oaqps_conus_metdot3d_variables,
        'units'           => \@_oaqps_conus_metdot3d_units,
        'descriptions'    => \@_oaqps_conus_metdot3d_descriptions
      },
      'wwind' => {
        'data_file'       => 'WWIND.ncf',
        'layers'          => 35,
        'variables'       => \@_oaqps_conus_wwind_variables,
        'units'           => \@_oaqps_conus_wwind_units,
        'descriptions'    => \@_oaqps_conus_wwind_descriptions
      },
      'lstaconc' => {
        'data_file'       => 'LSTACONC.ncf',
        'layers'          => 1,
        'variables'       => \@_oaqps_conus_lstaconc_variables,
        'units'           => \@_oaqps_conus_lstaconc_units,
        'descriptions'    => \@_oaqps_conus_lstaconc_descriptions
      }
    }
  }
);


################################## VARIABLES #################################


# Parsed from the URL query string:

my $service  = ''; # wcs.
my $version  = ''; # 1.0.0.
my $request  = ''; # getcapabilities or describecoverage or getcoverage.
my $coverage = ''; # Saved until time has been parsed.
my $variable = ''; # o3, ...
my $format   = ''; # xdr, ascii, netcdf, ioapi.
my $compress = ''; # 1 = | gzip -c otherwise don't compress (default).
my $nolonlats = ''; # 1 = omit lonlat variables in XDR output. 0 is default.
my $noelevation = ''; # 1 = omit ELEVATION variable in output. 0 is default.
my $aggregate = ''; # NONE, DAILY_MEAN, DAILY_MAX, DAILY_MAX8. NONE is default.
my $integrate = ''; # 1 = integrate layers. 0 is default.
my $time     = ''; # E.g., 2001-08-29t00:00:00z/2001-08-31t23:59:59z.
my $bbox     = ''; # E.g., -90,28,-80,32,1,1. Where 1,1 means layer 1 only.
my $key           = ''; # Key required for retrieval of non-proxy data.
my $just_check_key = 0; # Just check key and output one line result: 0 or 1.

# Derived from the above parsed values:

my $directory          = ''; # E.g., /rsig/CMAQ.
my $data_file          = ''; # CONC.ncf,... METDOT3D.
my $elevation_file     = ''; # cro_elevation.ncf, or dot_elevation.ncf.
my $elevation_files    = ''; # /data/CMAQ/AMAD/CONUS/20050826/cro_elevation.ncf
my $data_files         = ''; # /data/CMAQ/EQUATES/CONUS/20170101/CONC.ncf
my $gridcro2d_file     = ''; # /data/CMAQ/EQUATES/CONUS/20170101/GRIDCRO2D
my $metcro3d_files     = ''; # /data/CMAQ/EQUATES/CONUS/20170101/METCRO3D
my $wwind_files        = ''; # /data/CMAQ/EQUATES/CONUS/20170101/METCRO3D
my $ellipsoid          = ''; # E.g., '6370000 6370000'.
my @bounds = split( /,/, '-180,-90,180,90' );
my $layers             = ''; # E.g., 14.
my $starting_timestamp = 0;  # yyyymmddhh, e.g., 2005082600.
my $ending_timestamp   = 0;  # yyyymmddhh, e.g., 2005082600.
my $hours              = 0;  # E.g., 5 days = 5 x 24 = 120.
my $command            = ''; # Subset command to run.


################################## ROUTINES ##################################


main();


sub main {
  my $result = 0;

  if ( ! parse_url() ) {
    print "Content-type: text/plain; charset=iso-8859-1\n\n"; # For webserver

    if ( $just_check_key ) {
      print "0\n"; # 0 indicates failed to validate key.
    }
  } elsif ( $just_check_key ) {
    print "Content-type: text/plain; charset=iso-8859-1\n\n"; # For webserver
    print "1\n"; # 1 indicates validated key.
  } elsif ( $request eq 'getcapabilities' ) {
    print "Content-type: text/xml; charset=iso-8859-1\n\n"; # For webserver
    print_capabilities();
    $result = 1;
  } elsif ( $request eq 'describecoverage' ) {
    print "Content-type: text/xml; charset=iso-8859-1\n\n"; # For webserver
    print_coverage_description();
    $result = 1;
  } elsif ( $request eq 'getcoverage' ) {
    print "Content-type: $content_types{ $format }; charset=iso-8859-1\n\n";

    if ( index( $coverage, 'oaqps.' ) == 0 && $key ne $valid_oaqps_key ) {
      $result = 0;
    } else {
      compute_time_range();
      compute_input_files();
      $result = construct_command();
      $result = $result && execute_command( $command );
    }
  } elsif ( $request eq 'getmetadata' ) {
    print "Content-type: text/plain; charset=iso-8859-1\n\n"; # For webserver
    compute_time_range();
    compute_input_files();

    if ( $data_files ne '' ) {
      $result = construct_command();

      if ( $result ) {
        print $metadata_content;
        $data_files =~ tr/ /\n/;
        $elevation_files =~ tr/ /\n/;

        if ( $format eq 'original' ) {
          print $metadata_content_original;
          print "$data_files\n";
          print "$elevation_files\n";

          if ( $integrate ) {
            $metcro3d_files =~ tr/ /\n/;
            print "$metcro3d_files\n";
          }

          print "\n";
        } else {
          print $metadata_content_processed;
          print "$data_files\n";
          print "$elevation_files\n";

          if ( $integrate ) {
            $metcro3d_files =~ tr/ /\n/;
            print "$metcro3d_files\n";
          }

          print "\n$command\n\n";
        }
      }
    }
  }

  $result = 1 - $result; # UNIX: zero is success, non-zero is failure.
  debug( "exit result = $result" );
  exit $result;
}



# Print web server capabilities metadata.

sub print_capabilities {
  print '<?xml version="1.0" encoding="UTF-8" ?>' . "\n";
  print '<WCS_Capabilities version="1.0.0" ';
  print 'xmlns="https://www.opengeospatial.org/standards/wcs" ';
  print 'xmlns:gml="https://www.opengis.net//gml" ';
  print 'xmlns:xlink="https://www.w3.org/1999/xlink">';
  print '
    <Service>
        <metadataLink xlink:type="simple" xlink:href="https://www.epa.gov/air-research/community-multi-scale-air-quality-cmaq-modeling-system-air-quality-management" metadataType="other" />
        <description>EPA CMAQ Web Server 1.0.0</description>
        <name>EPA_CMAQ_OGC_WCS_1.0.0</name>
        <label>EPA CMAQ Web Server 1.0.0</label>
        <keywords>
            <keyword>EPA</keyword>
            <keyword>CMAQ</keyword>
            <keyword>interoperability</keyword>
        </keywords>
        <responsibleParty>
            <individualName>Todd Plessel</individualName>
            <organisationName>EPA Vislab</organisationName>
            <contactInfo>
                <onlineResource xlink:type="simple" xlink:href="mailto:plessel.todd@epa.gov" />
            </contactInfo>
        </responsibleParty>
        <fees>NONE</fees>
        <accessConstraints>NONE</accessConstraints>
    </Service>
    <Capability>
        <Request>
            <GetCapabilities>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/cmaqserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/cmaqserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </GetCapabilities>
            <DescribeCoverage>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/cmaqserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/cmaqserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </DescribeCoverage>
            <GetCoverage>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/cmaqserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/cmaqserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </GetCoverage>
        </Request>
        <Exception>
            <Format>text/xml; charset="utf-8"</Format>
        </Exception>
    </Capability>
    <ContentMetadata version="1.0.0">';
  print "\n";

  foreach my $source ( @sources ) {
    my $source_metadata = $metadata{ $source };

    foreach my $domain ( @domains ) {
      my $domain_metadata = $source_metadata->{ $domain };

      if ( $domain_metadata ) {
        my $min_lon   = $domain_metadata->{ minimum_longitude };
        my $max_lon   = $domain_metadata->{ maximum_longitude };
        my $min_lat   = $domain_metadata->{ minimum_latitude };
        my $max_lat   = $domain_metadata->{ maximum_latitude };

        foreach my $file ( @files ) {
          my $file_metadata = $domain_metadata->{ $file };

          if ( $file_metadata ) {
            my $max_level      = $file_metadata->{ layers };
            my $variables      = $file_metadata->{ variables };
            my $units          = $file_metadata->{ units };
            my $descriptions   = $file_metadata->{ descriptions };
            my $variable_count = @$variables;

            for ( my $variable_index = 0; $variable_index < $variable_count;
                  ++$variable_index ) {
              my $this_variable    = @$variables[ $variable_index ];
              my $this_units       = @$units[ $variable_index ];
              my $this_description = @$descriptions[ $variable_index ];
              print "        <CoverageOfferingBrief>\n";
              print "            <name>$source.$domain.$file.$this_variable</name>\n";
              print "            <label>$this_variable($this_units)</label>\n";
              print "            <description>$max_level level(s) of CMAQ modeled $this_description</description>\n";
              print '            <lonLatEnvelope srsName="WGS84(DD)">';
              print "\n";
              print "                <gml:pos>$min_lon $min_lat</gml:pos>\n";
              print "                <gml:pos>$max_lon $max_lat</gml:pos>\n";
              print "            </lonLatEnvelope>\n";
              print "        </CoverageOfferingBrief>\n";
            }
          }
        }
      }
    }
  }

  print "    </ContentMetadata>\n";
  print "</WCS_Capabilities>\n";
}



# Print web server coverage description metadata.

sub print_coverage_description {
  print '<?xml version="1.0" encoding="UTF-8" ?>';
  print '<CoverageDescription version="1.0.0" ';
  print 'xmlns="https://www.opengeospatial.org/standards/wcs" ';
  print 'xmlns:gml="https://www.opengis.net/gml" ';
  print 'xmlns:xlink="https://www.w3.org/1999/xlink">';
  print "\n";

  foreach my $source ( @sources ) {
    my $source_metadata = $metadata{ $source };

    foreach my $domain ( @domains ) {
      my $domain_metadata = $source_metadata->{ $domain };

      if ( $domain_metadata ) {
        my $min_lon    = $domain_metadata->{ minimum_longitude };
        my $max_lon    = $domain_metadata->{ maximum_longitude };
        my $min_lat    = $domain_metadata->{ minimum_latitude };
        my $max_lat    = $domain_metadata->{ maximum_latitude };
        my $begin_date = $domain_metadata->{ begin_date };
        my $end_date   = $domain_metadata->{ end_date };

        foreach my $file ( @files ) {
          my $file_metadata = $domain_metadata->{ $file };

          if ( $file_metadata ) {
            my $max_level      = $file_metadata->{ layers };
            my $variables      = $file_metadata->{ variables };
            my $units          = $file_metadata->{ units };
            my $descriptions   = $file_metadata->{ descriptions };
            my $variable_count = @$variables;

            for ( my $variable_index = 0; $variable_index < $variable_count;
                  ++$variable_index ) {
              my $this_variable    = @$variables[ $variable_index ];
              my $this_units       = @$units[ $variable_index ];
              my $this_description = @$descriptions[ $variable_index ];
              my $full_variable = "$source.$domain.$file.$this_variable";

              if ( $coverage eq '' || $coverage eq $full_variable ) {
                print "    <CoverageOffering>\n";
                print "        <name>$source.$domain.$file.$this_variable</name>\n";
                print "        <label>$this_variable($this_units)</label>\n";
                print "        <description>Levels 0-$max_level of CMAQ modelled $this_description</description>\n";
                print "        <domainSet>\n";
                print "            <spatialDomain>\n";
                print '                <gml:Envelope srsName="WGS84(DD)">';
                print "\n";
                print "                    <gml:pos>$min_lon $min_lat</gml:pos>\n";
                print "                    <gml:pos>$max_lon $max_lat</gml:pos>\n";
                print "                </gml:Envelope>\n";
                print "            </spatialDomain>\n";
                print "            <temporalDomain>\n";
                print "                <timePeriod>\n";
                print "                    <beginPosition>$begin_date";
                print "T00:00:00Z</beginPosition>\n";
                print "                    <endPosition>$end_date";
                print "T23:59:59Z</endPosition>\n";
                print "                    <timeResolution>PT1H</timeResolution>\n";
                print "                </timePeriod>\n";
                print "            </temporalDomain>\n";
                print "        </domainSet>\n";
                print "        <rangeSet>\n";
                print "            <RangeSet>\n";
                print "                <name>$source.$domain.$file.$this_variable</name>\n";
                print "                <label>$this_variable($this_units)</label>\n";
                print "                <description>Levels 0-$max_level of CMAQ modelled $this_description</description>";
                print '
                <nullValues>
                    <singleValue>-9999.0</singleValue>
                </nullValues>
            </RangeSet>
        </rangeSet>
        <supportedCRSs>
            <requestResponseCRSs>CRS:84</requestResponseCRSs>
            <nativeCRSs>CRS:84</nativeCRSs>
        </supportedCRSs>
        <supportedFormats>
            <formats>ASCII XDR NetCDF-COARDS NetCDF-IOAPI</formats>
        </supportedFormats>
        <supportedInterpolations>
            <interpolationMethod>none</interpolationMethod>
        </supportedInterpolations>
    </CoverageOffering>
';
              }
            }
          }
        }
      }
    }
  }

  print "</CoverageDescription>\n";
}



# Parse URL parameters into variables.

sub parse_url {
  use CGI qw/ untaint /;     # Load Safe untainting CGI routines.
  $CGI::DISABLE_UPLOADS = 1; # Disable uploads.
  $CGI::POST_MAX = 1024;     # Limit posts to 1024 bytes.
  my $query = new CGI;       # Parse QUERY_STRING.
  %ENV = ();                 # Unset all environment variables.
  my @names = $query->param; # Extract names of parameters.
  my $count = @names;
  my $result = 0;
  debug( "$program_name @names ($count)" );

  for ( my $parameter = 0; $parameter < $count; ++$parameter) {
    $_ = $names[ $parameter ];                # $_ is tainted.
    s/[^A-Za-z]/_/go;                         # Untaint $_.
    my $option = $_;                          # $option is untainted.
    $_ = $query->param( $option );            # $_ is tainted.
    s/[^\w\-.,:\/]/_/go;                      # Untaint $_.
    my $value = $_;                           # $value is untainted.
    my $lowercase_option = lc( $option );
    my $lowercase_value  = lc( $value );
    debug( "$lowercase_option $lowercase_value" );

    if ( $parsers{ $lowercase_option } ) {
      $result = $parsers{ $lowercase_option }->( $lowercase_value );
    } else {
      print STDERR "\nInvalid option #$parameter\n";
      $result = 0;
    }

    if ( ! $result ) {
      $parameter = $count; # Finish looping.
    }
  }

  $result = $result && required_options_specified();
  return $result;
}



# Parse service option.

sub parse_service_option {
  my $value = shift;
  my $result = parse_option( $service, $value, 'SERVICE', 'wcs' );
  return $result;
}



# Parse version option.

sub parse_version_option {
  my $value = shift;
  my $result = parse_option( $version, $value, 'VERSION', '1.0.0' );
  return $result;
}



# Parse request option.

sub parse_request_option {
  my $value = shift;
  my $result = parse_option( $request, $value, 'REQUEST',
              'getcoverage getcapabilities describecoverage getmetadata' );
  return $result;
}



# Parse format option:

sub parse_format_option {
  my $value = shift;
  my $result =
    parse_option( $format, $value, 'FORMAT',
                  'xdr ascii netcdf-coards netcdf-ioapi netcdf ioapi original' );
  return $result;
}



# Parse coverage option. Actually defer until time (year) has been specified.

sub parse_coverage_option {
  my $value = shift;
  my $result = $coverage eq '';

  if ( $result ) {
    $coverage = $value;
  } else {
    print STDERR "\nRedundant COVERAGE option\n";
  }

  return $result;
}



# Parse deferred coverage option now that the year has been specified.
# inputs:  $time, $coverage.
# outputs: $variable, $directory, $ellipsoid, $layers, $data_file,
#          $elevation_file.
# returns: 1 if successful, else 0.

sub reparse_coverage_option {
  my $result = 0;
  my $found = 0;
  my $year  = substr( $time, 0, 4 );
  my $year_metadata = $metadata_by_year{ $year };

  debug( "reparse_coverage_option: coverage = '$coverage', time = '$time'\n");

  if ( ! $year_metadata ) {
    print STDERR "\nNo data available for year.\n";
  } else {
    my @selected_variables = split( /\,/, $coverage );
    my $variable_count = @selected_variables;
    $variable = $selected_variables[ 0 ];
    my @parts = split( /\./, $variable );
    my $part_count = @parts;

    if ( $part_count == 4 ) { # E.g., COVERAGE=cdc.east.metdot3d.uwind,vwind
      my $source = $parts[ 0 ]; # E.g., 'cdc'.
      my $domain = $parts[ 1 ]; # E.g., 'east'.
      my $file   = $parts[ 2 ]; # E.g., 'metdot3d'.
      $variable  = $parts[ 3 ]; # E.g., 'uwind'.
      my $has_source = $year_metadata->{ $source };

      if ( ! $has_source ) {
        print STDERR "\nNo data available for year from source.\n";
      } else {
        my $has_domain = $has_source->{ $domain };

        if ( ! $has_domain ) {
          print STDERR "\nNo data available for source domain.\n";
        } else {

          # Append all remaining variables, e.g.,
          # COVERAGE=cdc.east.metdot3d.uwind,vwind
          # COVERAGE=cdc.east.metdot3d.uwind,cdc.east.metdot3d.vwind

          for ( my $i = 1; $i < $variable_count; ++$i ) {
            my $v = $selected_variables[ $i ];
            my @v_parts = split( /\./, $v ); # 'cdc.east.metdot3d.vwind'
            my $v_part_count = @v_parts;
            my $last_part = $v_parts[ $v_part_count - 1 ];
            $variable = "$variable $last_part"; # E.g., 'uwind vwind'.
          }

          # Now variable is, e.g., 'uwind vwind'.

          @parts      = split( / /, $variable );
          $part_count = @parts;
          debug( "$year $source $domain $file $variable" );
          my $source_metadata = $metadata{ $source };

          if ( $source_metadata ) {
            my $domain_metadata = $source_metadata->{ $domain };

            if ( $domain_metadata ) {
              my $file_metadata = $domain_metadata->{ $file };

              if ( $file_metadata ) {
                my $variables = $file_metadata->{ variables };
                my $variable_count = @$variables;
                $variable = '';
                $found = 0;
                debug( "variables = $variables" );
                debug( "variable_count = $variable_count" );

                foreach my $v ( @parts ) {
                  $found = 0;
                  debug( "v = $v" );

                  for ( my $variable_index = 0;
                        $found == 0 && $variable_index < $variable_count;
                        ++$variable_index ) {
                    my $this_variable = @$variables[ $variable_index ];
                    #debug( "this_variable = $this_variable" );

                    if ( $v eq lc( $this_variable ) ) {
                      $found = 1;

                      if ( $variable eq '' ) {
                        $variable = $this_variable;
                      } else {
                        $variable .= " $this_variable";
                      }
                    }
                  }
                }

                if ( $found ) {
                  my $v_directory      = $domain_metadata->{ directory };
                  my $v_ellipsoid      = $domain_metadata->{ ellipsoid };
                  my $v_data_file      = $file_metadata->{ data_file };
                  my $v_layers         = $file_metadata->{ layers };

                  if ( $directory eq '' ) {
                    $directory      = $v_directory;
                    $ellipsoid      = $v_ellipsoid;
                    $layers         = $v_layers;
                    $data_file      = $v_data_file;
                  } elsif ( $v_directory      ne $directory ||
                            $v_ellipsoid      ne $ellipsoid ||
                            $v_layers         ne $layers    ||
                            $v_data_file      ne $data_file ) {
                    print STDERR "\nInvalid COVERAGE option\n";
                    $found = 0;
                  }
                }
              }
            }
          }
        }
      }
    }

    if ( $found == 0 ) {
      $variable = '';
      print STDERR "\nInvalid COVERAGE option\n";
    } else {
      debug( "reparse_coverage_option results:\n" );
      debug( "directory      = '$directory'\n" );
      debug( "ellipsoid      = '$ellipsoid'\n" );
      debug( "layers         = '$layers'\n" );
      debug( "data_file      = '$data_file'\n" );
      debug( "elevation_file = '$elevation_file'\n" );
      debug( "variable       = '$variable'\n" );
      $result = 1;
    }
  }

  return $result;
}



# Parse time option.

sub parse_time_option {
  my $value = shift;
  my $result = 0;

  if ( $time ne '' ) {
    print STDERR "\nRedundant TIME option\n";
  } else {
    $time = $value;
    my $is_valid = is_valid_time( $time );

    if ( ! $is_valid ) {
      print STDERR "\nInvalid TIME option\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse bbox option.

sub parse_bbox_option {
  my $value = shift;
  my $result = 0;

  if ( $bbox ne '' ) {
    print STDERR "\nRedundant BBOX option\n";
  } else {
    $bbox = $value;
    @bounds = split( /,/, $bbox );
    my $bounds_count = @bounds;

    if ( $bounds_count != 4 && $bounds_count != 6 ) {
      print STDERR "\nInvalid BBOX option (requires 4 or 6 numbers).\n";
    } elsif ( ! in_range( $bounds[ 0 ], -180.0, 180.0 ) ) {
      print STDERR "\nInvalid BBOX option (1st number)\n";
    } elsif ( ! in_range( $bounds[ 1 ], -90.0, 90.0 ) ) {
      print STDERR "\nInvalid BBOX option (2nd number)\n";
    } elsif ( ! in_range( $bounds[ 2 ], $bounds[ 0 ], 180.0 ) ) {
      print STDERR "\nInvalid BBOX option (3rd number)\n";
    } elsif ( ! in_range( $bounds[ 3 ], $bounds[ 1 ], 90.0 ) ) {
      print STDERR "\nInvalid BBOX option (4th number)\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse compress option.

sub parse_compress_option {
  my $value = shift;
  my $result = 0;

  if ( $compress ne '' ) {
    print STDERR "\nRedundant COMPRESS option\n";
  } else {
    $compress = $value;
    my $is_valid = $compress == 0 || $compress == 1;

    if ( ! $is_valid ) {
      print STDERR "\nInvalid COMPRESS option\n";
    } else {
      $result = 1;
#if ( $coverage eq 'cmaq.equates.hemi.aconc.precip' ) {
#print STDERR "TEMP HACK\n";
#print "Content-Encoding: gzip\n";
#print "Vary: Accept-Encoding\n";
#}
    }
  }

  return $result;
}



# Parse nolonlats option.

sub parse_nolonlats_option {
  my $value = shift;
  my $result = 0;

  if ( $nolonlats ne '' ) {
    print STDERR "\nRedundant NOLONLATS option\n";
  } else {
    $nolonlats = $value;
    my $is_valid = $nolonlats == 0 || $nolonlats == 1;

    if ( ! $is_valid ) {
      print STDERR "\nInvalid NOLONLATS option\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse noelevation option.

sub parse_noelevation_option {
  my $value = shift;
  my $result = 0;

  if ( $noelevation ne '' ) {
    print STDERR "\nRedundant NOELEVATION option\n";
  } else {
    $noelevation = $value;
    my $is_valid = $noelevation == 0 || $noelevation == 1;

    if ( ! $is_valid ) {
      print STDERR "\nInvalid NOELEVATION option\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse aggregate option.

sub parse_aggregate_option {
  my $value = shift;
  my $result =
    parse_option( $aggregate, $value, 'AGGREGATE',
                  'none daily_mean daily_max daily_max8 all' );
}



# Parse integrate option.

sub parse_integrate_option {
  my $value = shift;
  my $result = parse_option( $integrate, $value, 'INTEGRATE', '0 1' );
}


# Parse key option:

sub parse_key_option {
  my $value = shift;
  my $result = 0;

  if ( $key ne '' ) {
    print STDERR "\nRedundant KEY option\n";
  } else {

    if ( $value =~ m#^([\w-]+)$# )
    {
      $key = uc( $value );
      $result = $key eq $valid_oaqps_key;
    }

    if ( ! $result ) {
      print STDERR "\nInvalid KEY option.\n";
      # Ignore invalid key value so Barron's code can use a placeholder value.
      $key = '';
      $result = 1;
    }
  }

  return $result;
}



# Parse check_key option:

sub parse_check_key_option {
  my $value = shift;
  my $result = 0;
  $just_check_key = 1;

  if ( $key ne '' ) {
    print STDERR "\nRedundant CHECK_KEY/KEY option\n";
  } else {

    if ( $value =~ m#^([\w-]+)$# )
    {
      $key = uc( $value );
      $result = $key eq $valid_oaqps_key;
    }
  }

  return $result;
}

# Check that all required 'options' have been specified:

sub required_options_specified {
  my $result = 0;

  if ( $just_check_key ) {
    $result = 1;
  } elsif ( $service eq '' ) {
    print STDERR "\nMissing option: 'SERVICE'\n";
  } elsif ( $version eq '' ) {
    print STDERR "\nMissing option: 'VERSION'\n";
  } elsif ( $request eq '' ) {
    print STDERR "\nMissing option: 'REQUEST'\n";
  } elsif ( $request eq 'getcoverage' || $request eq 'getmetadata' ) {

    if ( $format eq '' ) {
      print STDERR "\nMissing option: 'FORMAT'\n";
    } elsif ( $time eq '' ) {
      print STDERR "\nMissing option: 'TIME'\n";
    } elsif ( $bbox eq '' ) {
      print STDERR "\nMissing option: 'BBOX'\n";
    } elsif ( $coverage eq '' ) {
      print STDERR "\nMissing option: 'COVERAGE'\n";
    } else {
      $result = reparse_coverage_option();
    }
  } else {
    $result = 1;
  }

  return $result;
}



# Compute starting_timestamp and hours.
# inputs:  $time = '2001-08-26t00:00:00z/2001-08-31t23:59:59z'
# outputs: $starting_timestamp = 2005082600
#          $ending_timestamp   = 2005083123
#          $hours = 120

sub compute_time_range {
  my $yyyy1 = substr( $time, 0, 4 );
  my $mm1   = substr( $time, 5, 2 );
  my $dd1   = substr( $time, 8, 2 );
  my $hh1   = substr( $time, 11, 2 );
  my $i     = index( $time, '/' );

  $starting_timestamp = integer_timestamp( $yyyy1, $mm1, $dd1, $hh1 );
  $ending_timestamp = $starting_timestamp;
  $hours = 1;

  if ( $i != -1 ) {
    ++$i;
    my $yyyy2 = substr( $time, $i + 0, 4 );
    my $mm2   = substr( $time, $i + 5, 2 );
    my $dd2   = substr( $time, $i + 8, 2 );
    my $hh2   = substr( $time, $i + 11, 2 );
    $ending_timestamp = integer_timestamp( $yyyy2, $mm2, $dd2, $hh2 );
    my $yyyy  = $yyyy1;
    my $mm    = $mm1;
    my $dd    = $dd1;
    my $hh    = $hh1;

    while ( integer_timestamp( $yyyy, $mm, $dd, $hh ) !=
            integer_timestamp( $yyyy2, $mm2, $dd2, $hh2 ) ) {
      increment_timestamp( $yyyy, $mm, $dd, $hh );
      ++$hours;
    }
  }
}



# Compute list of input data and elevation files.
# Initializes:
#   $elevation_files
#   $data_files
#   $gridcro2d_file
#   $metcro3d_files
#   $wwind_files


sub compute_input_files {
  my $months_per_year = 12;
  my $hours_per_day   = 24;
  my $hh              = $starting_timestamp % 100;
  my $yyyymmdd        = int( $starting_timestamp / 100 );
  my $yyyy            = int( $yyyymmdd / 10000 );
  my $mm              = int( $yyyymmdd / 100 ) % 100;
  my $dd              = $yyyymmdd % 100;
  my $last_timestep   = $hh + $hours - 1;
  my $days            = int( 1 + $last_timestep / $hours_per_day );
  my $isDaily = 0;
  my $isMonthly = 0;
  my $isYearly  = 0;
  my $isDep = 0;

  if ( index( $coverage, '.adep.' ) != -1 ||
       index( $coverage, '.soilinp.' ) != -1 ) {
    $isYearly = 1;
    $isDep = 1;
  } elsif ( index( $coverage, '.mdep.' ) != -1 ) {
    $isMonthly = 1;
    $isDep = 1;
  } elsif ( index( $coverage, '.ddep.' ) != -1 ) {
    $isDaily = 1;
    $isDep = 1;
  } elsif ( index ( $coverage, '.lst' ) != -1 ) {
    $isDaily = 1;
  }

  $data_files      = '';
  $elevation_files = '';
  $gridcro2d_file  = '';
  $metcro3d_files  = '';
  $wwind_files     = '';

  #----------------------------------------------------------------------------
  # UGLY.
  # Per CMAQ Team on 2021-09-13:
  # 2002-2017 EQUATES METDOT3D has UWIND, VWIND but the corresponding METCRO3D
  # file is missing WWIND!
  # Instead the WWIND.ncf files here are pre-process/extracted from
  # CCTM_CONC and contain W_VEL - a derived vertical wind (computed by CMAQ).
  # Daily WWIND.ncf files contain 25 timesteps of W_VEL.
  # (Hour 0 to hour 0 of the next day.)
  # However the first timestep of each file has BADVAL3 for W_VEL!
  # But the previous day file timestep 25 is the same as the next day file
  # timestep 0 but with valid W_VEL values.
  # Therefore, if we prepend the previous WWIND.ncf file it should yield
  # valid W_VEL values over multiple days (with the new CMAQSubset).
  # There is no file for 20011231 so 20020101 timestep 0 is BADVAL3.
  # The new CMAQSubset will check for and convert these BADVAL3 values to 0
  # (when specified in -wwind option, but not as scalar data in -files option).

  my $yyyy_1 = $yyyy;
  my $mm_1   = $mm;
  my $dd_1   = $dd;
  decrement_date_day( $yyyy_1, $mm_1, $dd_1 );

  my $full_directory_1 =
    sprintf("$directory/%04d%02d%02d", $yyyy_1, $mm_1, $dd_1 );
  my $previous_wwind_file = "$full_directory_1/WWIND.ncf";

  if ( -f $previous_wwind_file ) {
    $wwind_files = $previous_wwind_file;

    # If selected data file is WWIND.ncf then include previous file too:

    if ( $data_file eq 'WWIND.ncf' ) {
      $data_files = $previous_wwind_file;
    }
  }

  #----------------------------------------------------------------------------

  while ( $days-- ) {
    my $days_this_month = days_in_month( $yyyy, $mm );

    my $mm0 = $mm;
    my $dd0 = $dd;

    if ( $isYearly ) {
      $mm0 = 1;
      $dd0 = 1;
    } elsif ( $isMonthly ) {
      $dd0 = 1;
    }

    my $full_directory = sprintf("$directory/%04d%02d%02d", $yyyy, $mm0, $dd0);

    # Over 1,000 sub-directories causes slow access with wildcards
    # so use year sub-directories instead.

    if ( index( $directory, '/EQUATES/' ) != -1 ||
         index( $directory, '/OAQPS/' ) != -1 ) {
      $full_directory =
        sprintf( "$directory/%04d/%04d%02d%02d", $yyyy, $yyyy, $mm0, $dd0 );
    }

    my $next_data_file = "$full_directory/$data_file";

    if ( -f $next_data_file ) {
      my $next_elevation_file = "$full_directory/$elevation_file";
      my $next_gridcro2d_file = "$full_directory/GRIDCRO2D";
      my $next_metcro3d_file  = "$full_directory/METCRO3D";
      my $next_wwind_file     = "$full_directory/WWIND.ncf";

      if ( index( $data_files, $next_data_file ) == -1 ) {
        $data_files .= " $next_data_file";
      }

      if ( ! $isDep && ! $isDaily && -f $next_elevation_file &&
           index( $elevation_files, $next_elevation_file ) == -1 ) {
        $elevation_files .= " $next_elevation_file";
      }

      if ( ! $isDep && ! $isDaily && $gridcro2d_file eq '' && -f $next_gridcro2d_file ) {
        $gridcro2d_file = $next_gridcro2d_file;
      }

      if ( ! $isDep && ! $isDaily && -f $next_metcro3d_file &&
           index( $metcro3d_files, $next_metcro3d_file ) == -1 &&
           index( $directory, 'DISCOVER' ) == -1 ) { # METCRO3D lacks ZH/ZF!
        $metcro3d_files .= " $next_metcro3d_file";
      }

      if ( ! $isDep && ! $isDaily && -f $next_wwind_file &&
           index( $wwind_files, $next_wwind_file ) == -1 ) {
        $wwind_files .= " $next_wwind_file";
      }
    }

    ++$dd;

    if ( $dd > $days_this_month ) {
      $dd = 1;
      ++$mm;

      if ( $mm > $months_per_year ) {
        $mm = 1;
        ++$yyyy;
      }
    }
  }
}



# Construct command.

sub construct_command {
  my $result = 1;

  if ( $format eq 'original' ) {
    $command =
      "/bin/gtar -zcO $data_files $elevation_files $metcro3d_files" .
      "$gridcro2d_file $wwind_files";
  } else {
    my $first_timestep = $starting_timestamp % 100;
    my $last_timestep  = $first_timestep + $hours - 1;
    my $is_equates = index( $coverage, 'equates.' ) == 0;

    # EQUATES contains some mixed-case variable names (e.g., PM25to10)
    # so the @_equates_*_*_variables metadata arrays must contain the
    # names as they are in the NetCDF file (because simply changing the
    # coverage to UPPERCASE here won't work).

    my $capitalized_variable = $is_equates ? $variable : uc( $variable );

    my $bounds_count = @bounds;
    my $format_option = "-format $format";
    my $time_option = '';

    # CMAQSubset -integrate and -wwind options cannot be used together.

    if ( index( $coverage, '.ddep.' ) != -1 ) {
      my $yyyymmdd= int( $starting_timestamp / 100 );
      my $dd = $yyyymmdd % 100 - 1;
      my $days0 = int( $hours / 24 );
      my $days = $days0 > 0 ? $days0 : 0;
      $first_timestep = $dd;
      $last_timestep  = $first_timestep + $days;
    }

    # Set time option unless monthly or yearly files:

    if ( index( $coverage, '.mdep.' ) == -1 &&
         index( $coverage, '.adep.' ) == -1 &&
         index( $coverage, '.soilinp.' ) == -1 ) {
      $time_option = " -time $starting_timestamp $ending_timestamp";
    }

    # Rename non-standard mixed-case variable names in AEROVIZ, WDT and PM files:

    if ( $capitalized_variable eq 'DCV_MIE' ) {
      $capitalized_variable = 'DCV_Mie';
    } elsif ( $capitalized_variable eq 'EXT_MIE' ) {
      $capitalized_variable = 'EXT_Mie';
    } elsif ( $capitalized_variable eq 'DCV_RECON' ) {
      $capitalized_variable = 'DCV_Recon';
    } elsif ( $capitalized_variable eq 'EXT_RECON' ) {
      $capitalized_variable = 'EXT_Recon';
    } elsif ( $capitalized_variable eq 'EXT_MIE' ) {
      $capitalized_variable = 'EXT_Mie';
    } elsif ( $capitalized_variable eq 'DCV_RECON' ) {
      $capitalized_variable = 'DCV_Recon';
    } elsif ( $capitalized_variable eq 'DDEP_NH3_NAT' ) {
      $capitalized_variable = 'DDEP_NH3_Nat';
    } elsif ( $capitalized_variable eq 'DDEP_NH3_AG' ) {
      $capitalized_variable = 'DDEP_NH3_Ag';
    } elsif ( $capitalized_variable eq 'DDEP_NH3_WAT' ) {
      $capitalized_variable = 'DDEP_NH3_Wat';
    } elsif ( $capitalized_variable eq 'DDEP_NH3_EMIS' ) {
      $capitalized_variable = 'DDEP_NH3_Emis';
    } elsif ( $capitalized_variable eq 'DDEP_NH3_DEP' ) {
      $capitalized_variable = 'DDEP_NH3_Dep';
    } elsif ( $capitalized_variable eq 'DDEP_NH3_STOM' ) {
      $capitalized_variable = 'DDEP_NH3_Stom';
    } elsif ( $capitalized_variable eq 'DDEP_NH3_CUT' ) {
      $capitalized_variable = 'DDEP_NH3_Cut';
    } elsif ( $capitalized_variable eq 'DDEP_NH3_SOIL' ) {
      $capitalized_variable = 'DDEP_NH3_Soil';
    } elsif ( $capitalized_variable eq 'DD_S_SEAS' ) {
      $capitalized_variable = 'DD_S_SeaS';
    } elsif ( $capitalized_variable eq 'WD_S_SEAS' ) {
      $capitalized_variable = 'WD_S_SeaS';
    } elsif ( $capitalized_variable eq 'TD_S_SEAS' ) {
      $capitalized_variable = 'TD_S_SeaS';
    } elsif ( $capitalized_variable eq 'DD_S_SEASMEQ' ) {
      $capitalized_variable = 'DD_S_SeaSMEQ';
    } elsif ( $capitalized_variable eq 'WD_S_SEASMEQ' ) {
      $capitalized_variable = 'WD_S_SeaSMEQ';
    } elsif ( $capitalized_variable eq 'TD_S_SEASMEQ' ) {
      $capitalized_variable = 'TD_S_SeaSMEQ';
    } elsif ( index( lc( $coverage ), 'amad.conus.pm.' ) != -1 ) { # pm file:

      if ( $capitalized_variable eq 'PRECIP' ) {
        $capitalized_variable = 'precip';
      } elsif ( $capitalized_variable eq 'A' ) {
        $capitalized_variable = 'a';
      } elsif ( $capitalized_variable eq 'K_PRIME' ) {
        $capitalized_variable = 'K_prime';
      } elsif ( $capitalized_variable eq 'SQRT_KI' ) {
        $capitalized_variable = 'sqrt_Ki';
      } elsif ( $capitalized_variable eq 'MAX_NO3_LOSS' ) {
        $capitalized_variable = 'max_NO3_loss';
      } elsif ( $capitalized_variable eq 'PM25_NO3_LOSS' ) {
        $capitalized_variable = 'PM25_NO3_loss';
      } elsif ( $capitalized_variable eq 'ANO3IJ_LOSS' ) {
        $capitalized_variable = 'ANO3IJ_loss';
      } elsif ( $capitalized_variable eq 'PM25_NH4_LOSS' ) {
        $capitalized_variable = 'PM25_NH4_loss';
      } elsif ( $capitalized_variable eq 'ANH4IJ_LOSS' ) {
        $capitalized_variable = 'ANH4IJ_loss';
      } elsif ( $capitalized_variable eq 'GAMMA1' ) {
        $capitalized_variable = 'Gamma1';
      } elsif ( $capitalized_variable eq 'GAMMA2' ) {
        $capitalized_variable = 'Gamma2';
      } elsif ( $capitalized_variable eq 'HP_L1' ) {
        $capitalized_variable = 'Hp_L1';
      } elsif ( $capitalized_variable eq 'HP_L2' ) {
        $capitalized_variable = 'Hp_L2';
      }
    }

    my $my_xdrconvert = '';

    if ( $format eq 'netcdf-coards' ) {
      $format_option = '-format coards';
    } elsif ( $format eq 'netcdf-ioapi' ) {
      $format_option = '-format ioapi';
    }

    my $my_compressor = '';

    if ( $compress ne '' && $compress == 1 ) {
      $my_compressor = " | $compressor";
    }

    # Output LONGITUDE, LATITUDE by default (if NOLONLATS option is omitted).
    # New CMAQSubset requires -lonlat to do so.

    my $lonlats_option = '-lonlat';

    if ( $nolonlats ne '' ) {

      if ( $nolonlats == 1 ) {
        $lonlats_option = ''; # Omit option so no LONGITUDE, LATITUDE output.
      }
    }

    my $aggregate_option = '';

    if ( $time_option ne '' && $aggregate ne '' && $aggregate ne 'none' ) {

      if ( $aggregate eq 'all' ) {
        $aggregate_option = " -aggregate sum ";
      } else {
        $aggregate_option = " -aggregate $aggregate ";
      }
    }

    my $layer_option = '';

    if ( $bounds_count == 6 ) {
      my $lower_layer = '';
      my $upper_layer = '';

      if ( in_range( $bounds[ 4 ], 1, $layers ) ) {
        $lower_layer = int( $bounds[ 4 ] );
      } else {
        print STDERR "\nInvalid lower layer\n";
        $result = 0;
      }

      if ( in_range( $bounds[ 5 ], $bounds[ 4 ], $layers ) ) {
        $upper_layer = int( $bounds[ 5 ] );
      } else {
        print STDERR "\nInvalid upper layer\n";
        $result = 0;
      }

      $layer_option = "-layer $lower_layer $upper_layer";
    }

    # Output ELEVATION by default (if NOELEVATIONS option is omitted).
    # New CMAQSubset requires -elevation to do so.
    # -elevation = compute from vglvls[] if no ht/zf files are available.

    my $elevation_option = '-elevation';

    if ( $noelevation ne '' ) {

      if ( $noelevation == 1 ) {
        $elevation_option = ''; # Omit option so no ELEVATION output.
      }
    }

    if ( $elevation_option ne '' ) {

      if ( $gridcro2d_file ne '' ) {
        $elevation_option .= " -ht $gridcro2d_file ";
      }

      if ( $metcro3d_files ne '' ) {
        $elevation_option .= " -zf $metcro3d_files ";
      }
    }

    my $integrate_or_wwind_option = '';

    if ( index( $coverage, '.metdot3d.wind' ) > 0 ) {

      # METCRO3D.WWIND is not present but CCTM_CONC has W_VEL which are
      # available on maple as WWIND.ncf.

      if ( ! $is_equates ) {
        $integrate_or_wwind_option = " -wwind $metcro3d_files ";
      } else {

        if ( "$wwind_files" ne '' ) {
          $integrate_or_wwind_option = " -wwind $wwind_files ";
        }
      }

      $capitalized_variable = 'UWIND VWIND'; # WWIND implicit from -wwind metcro3d.

    } elsif ( $integrate ne '' && $integrate == 1 && $layers > 1 ) {

      if ( $metcro3d_files ne '' ) { # Requires -zf files.
        $integrate_or_wwind_option = " -integrate_layers ";

        if ( index( $elevation_option, ' -zf ' ) == -1 ) { # Not already -zf
          $integrate_or_wwind_option .= " -zf $metcro3d_files ";
        }
      }
    }

    my $bounds_option =
      "-bounds $bounds[ 0 ] $bounds[ 1 ] $bounds[ 2 ] $bounds[ 3 ]";

    my $files_option = "-tmpdir /data/tmp -files $data_files";

    if ( $result ) {
      $command =
        "$subsetter" .
        " $files_option" .
        " $elevation_option " .
        " $integrate_or_wwind_option " .
        " $format_option" .
        ' -desc https://www.epa.gov/cmaq,CMAQSubset' .
        " -ellipsoid $ellipsoid" .
        " $lonlats_option" .
        " -variable $capitalized_variable" .
        " $aggregate_option" .
        " $time_option" .
        " $layer_option" .
        " $bounds_option" .
        "$my_xdrconvert$my_compressor";
    }
  }

  return $result;
}



############################### HELPER ROUTINES ##############################



# debug( message );

sub debug {
  my $message = shift;

  if ( $debugging ) {
    print STDERR "\n$message\n";
  }
}



# Execute command and echo its output to STDOUT. E.g., execute_command( 'ls' );

sub execute_command {
  my $command = shift;
  my $result = 0;
  my $the_pipe = 0;

  # Untaint command (match expression is arbitrary as far as -T is concerned):

  if ( $command =~ m#^(/[\w-]+/[\w -/.:,'@|]+)$# ) {
    $command = $1; # Re-assign first match, which is enough to satisfy -T.
    debug( "$0 executing command = $command" );
    %ENV = (); # Unset all environment variables prior to popen.
    # Complicated, supposedly safer way to open a readable pipe to command:
    my $pid = open( the_pipe, "-|" );

    if ( ! defined( $pid ) ) {
      die "Couldn't open pipe to subprocess";
    } elsif ( $pid ) { # Parent process.

      while ( <the_pipe> ) {
        print;
      }

      close( the_pipe ) or die $!;
      $result = ! $?;
    } else { # Child process.
      exec( $command ) or die "can't exec program: $!";
    }
  } else {
    print STDERR "\n$0: command contains invalid characters.\n";
  }

  return $result;
}



# my $result = parse_option( $option, $value, $option_name, $valid_values );
# my $result = parse_option( $variable, $value, 'COVERAGE', 'ozone pm25' );

sub parse_option {
  my ( $option, $value, $option_name, $valid_values ) = @_;
  my $result = 0;

  if ( $option ne '' ) {
    print STDERR "\nRedundant $option_name option\n";
  } else {
    $result = index( " $valid_values ", " $value " ) != -1;

    if ( $result ) {
      $_[ 0 ] = $value;
    } else {
      print STDERR "\nInvalid $option_name option\n";
    }
  }

  return $result;
}



# my $ok = in_range( $value, $minimum, $maximum );

sub in_range {
  my ( $value, $minimum, $maximum ) = @_;
  my $result = $value >= $minimum && $value <= $maximum;
  return $result;
}



# my $is_valid = is_valid_time( '2001-08-26t20:00:00z/2001-08-27t23:59:59z' );

sub is_valid_time {
  my $time = shift;
  my $result = 0;
  my $length = length( $time );

  if ( $length == 41 ) {
    $result = is_valid_time( substr( $time, 0, 20 ) );
    $result = $result && substr( $time, 20, 1 ) eq '/';
    $result = $result && is_valid_time( substr( $time, 21, 20 ) );
    $result = $result && substr( $time, 0, 20 ) le substr( $time, 21, 20 );
  } elsif ( $length == 20 ) {
    my $year   = substr( $time, 0, 4 );
    my $month  = substr( $time, 5, 2 );
    my $day    = substr( $time, 8, 2 );
    my $hour   = substr( $time, 11, 2 );
    my $minute = substr( $time, 14, 2 );
    my $second = substr( $time, 17, 2 );
    $result = in_range( $year, 1900, 3000 );
    $result = $result && in_range( $month, 1, 12 );
    $result = $result && in_range( $day, 1, days_in_month( $year, $month ) );
    $result = $result && in_range( $hour, 0, 23 );
    $result = $result && in_range( $minute, 0, 59 );
    $result = $result && in_range( $second, 0, 59 );
    $result = $result && substr( $time, 4, 1 ) eq '-';
    $result = $result && substr( $time, 7, 1 ) eq '-';
    $result = $result && substr( $time, 10, 1 ) eq 't';
    $result = $result && substr( $time, 13, 1 ) eq ':';
    $result = $result && substr( $time, 16, 1 ) eq ':';
    $result = $result && substr( $time, 19, 1 ) eq 'z';
  }

  return $result;
}



# increment_timestamp( $yyyy, $mm, $dd, $hh );

sub increment_timestamp {
  my ( $yyyy, $mm, $dd, $hh ) = @_;
  my $hours_per_day   = 23;
  my $months_per_year = 12;
  my $days_this_month = days_in_month( $yyyy, $mm );
  ++$hh;

  if ( $hh > $hours_per_day ) {
    $hh = 0;
    ++$dd;

    if ( $dd > $days_this_month ) {
      $dd = 1;
      ++$mm;

      if ( $mm > $months_per_year ) {
        $mm = 1;
        ++$yyyy;
      }
    }
  }

  $_[ 0 ] = $yyyy;
  $_[ 1 ] = $mm;
  $_[ 2 ] = $dd;
  $_[ 3 ] = $hh;
}



# decrement_date_day( $yyyy, $mm, $dd );

sub decrement_date_day {
  my ( $yyyy, $mm, $dd ) = @_;
  --$dd;

  if ( $dd < 1 ) {
    --$mm;

    if ( $mm < 1 ) {
      $mm = 12;
      --$yyyy;
    }

    $dd = days_in_month( $yyyy, $mm );
  }

  $_[ 0 ] = $yyyy;
  $_[ 1 ] = $mm;
  $_[ 2 ] = $dd;
}



# my $yyyymmddhh = integer_timestamp( $yyyy, $mm, $dd, $hh );

sub integer_timestamp {
  my ( $yyyy, $mm, $dd, $hh ) = @_;
  my $result = int( $yyyy * 1000000 + $mm * 10000 + $dd * 100 + $hh );
  return $result;
}



# my $leap = is_leap_year( $year );

sub is_leap_year {
  my $year = shift;
  my $result = $year % 4 == 0 && ( $year % 100 != 0 || $year % 400 == 0 );
  return $result;
}



# my $days = days_in_month( $year, $month );

sub days_in_month {
  my $year  = shift;
  my $month = shift;

  # 30 days hath September, April, June and November...

  my @days_per_month = ( 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 );
  my $result = $days_per_month[ $month - 1 ];

  if ( $month == 2 ) {

    if ( is_leap_year( $year ) ) {
      ++$result;
    }
  }

  return $result;
}


# my $ddd = day_of_year( $year, $month, $day );

sub day_of_year {
  my $year  = shift;
  my $month = shift;
  my $day   = shift;
  my $result = 0;

  for ( my $mm = 1; $mm < $month; ++$mm ) {
    my $days = days_in_month( $year, $mm );
    $result += $days;
  }

  $result += $day;
  return $result;
}


