#!/usr/bin/perl -wT

##############################################################################
# PURPOSE: dvserver - Serve a USGS/EPA daily value station data, subsetted by
#          longitude-latitude box, in ASCII format for use by
#          EstuaryDataMapper (via wget).
#
# NOTES:   Server is WCS-compliant:
#          https://www.opengeospatial.org/standards/wcs
#          https://datafed.net/xs/OpenGIS/wcs/1.0.0/
#          and modeled after a similar webserver application:
#          https://webapps.datafed.net/ogc_EPA.wsfl
#
#          Connects to external web service USGS Daily Value:
#          https://waterservices.usgs.gov/rest/DV-Test-Tool.html
#          https://waterservices.usgs.gov/nwis/dv/?format=waterml&indent=on
#          Contact: Jim Kreft jkreft@usgs.gov 608-821-3919
#
#          Example usage:
#
#          wget -q -T 0 -O - 'https://ofmpub.epa.gov/rsig/dvserver?\
#                     SERVICE=wcs&\
#                     VERSION=1.0.0&\
#                     REQUEST=GetCoverage&\
#                     COVERAGE=salinity&\
#                     TIME=2007-08-08T00:00:00Z/2007-08-09T23:59:59Z&\
#                     BBOX=-82,26,-81.5,26.5&\
#                     FORMAT=ascii'
#
# HISTORY: 2016-07-12 plessel.todd@epa.gov 1-919-541-5500
#
# STATUS:  unreviewed tested
##############################################################################


use strict;
package main;
$| = 1; # Turn off output buffering so messages appear in correct order.
alarm( 3600 ); # Kill process after 1 hour. Legitimate usage could be an hour!
# Restrict PATH and ENV.
delete @ENV{ 'PATH', 'IFS', 'CDPATH', 'ENV', 'BASH_ENV' };


############################## TUNABLE CONSTANTS #############################


my $debugging = 0; # 1 = print debug messages to STDERR logs/error_log.

# Server where this program is installed:

my $server_path = 'https://YOUR_WEBSERVER_HOST/cgi-bin';

my $bindir = '/rsig/current/code/bin/Linux.x86_64';
#my $wget = "$bindir/wget -q -t 1 -T 0 -O -";
my $wget = '/usr/bin/curl -k --silent --max-time 3600 --retry 0 -L --tcp-nodelay';

my $wget_command =
  "$wget " . "'" .
  'https://waterservices.usgs.gov/nwis/dv/?format=waterml&indent=on';

# Query string parsing routine dispatch table:

my %parsers = (
  'service'  => \&parse_service_option,
  'version'  => \&parse_version_option,
  'request'  => \&parse_request_option,
  'coverage' => \&parse_coverage_option,
  'time'     => \&parse_time_option,
  'bbox'     => \&parse_bbox_option,
  'format'   => \&parse_format_option
);

# Webserver content types for each output format:

my %content_types = (
  'ascii'         => 'text/plain',
  'bin'           => 'application/octet-stream',
  'xdr'           => 'application/octet-stream',
  'netcdf-coards' => 'application/netcdf',
  'netcdf-ioapi'  => 'application/netcdf'
);

# Full URL path to this program:

my @pathed_program_parts = split( /\//, $0 );
my $program_name = $pathed_program_parts[ @pathed_program_parts - 1 ];
my $program = "$server_path/$program_name";

# Metadata:
# name - this is the COVERAGE= name used by this script.
#        '?' means currently unimplmented by the remote web service.
# units - units for the parameter, e.g., m3/s.
# description - Parameter description.
# parameters - Comma-separated list of parameter names used by the called
#              remote web service:
# https://waterservices.usgs.gov/rest/DV-Test-Tool.html
# https://waterservices.usgs.gov/nwis/dv/?format=waterml&indent=on
# https://help.waterdata.usgs.gov/parameter_cd?group_cd=%

my @metadata = (
##{
##  'name' => 'station',
##  'units' => '-',
##  'description' => 'Station-ID.',
##  'parameters' => ''
##},
  {
    'name' => 'discharge',
    'units' => 'm3/s',
    'description' => 'Stream flow.',
    'parameters' => '00060'
  }
);


################################## VARIABLES #################################


# Parsed from the URL query string:

my $service  = ''; # wcs.
my $version  = ''; # 1.0.0.
my $request  = ''; # getcapabilities or describecoverage or getcoverage.
my $coverage = ''; # Saved until time has been parsed.
my $variable = ''; # o3, ...
my $format   = ''; # ascii.
my $time     = ''; # E.g., 2001-08-29t00:00:00z/2001-08-31t23:59:59z.
my $bbox     = ''; # E.g., -90,28,-80,32,1,1. Where 1,1 means layer 1 only.

# Derived from the above parsed values:

my @bounds = split( /,/, '-180,-90,180,90' );
my $starting_timestamp = 0;  # yyyymmddhh, e.g., 2005082600.
my $ending_timestamp   = 0;  # yyyymmddhh, e.g., 2005082600.
my $hours              = 0;  # E.g., 5 days = 5 x 24 = 120.
my $days               = 0;  # E.g., 5.
my $ending_yyyymmdd    = 0;  # yyyymmdd, e.g., 20050826.
my $coverage_units = '';
my @stations_info = ();

################################## ROUTINES ##################################


main();


sub main {
  my $result = 0;

  if ( ! parse_url() ) {
    print "Content-type: text/plain; charset=iso-8859-1\n\n"; # For webserver
  } elsif ( $request eq 'getcapabilities' ) {
    print "Content-type: text/xml; charset=iso-8859-1\n\n"; # For webserver
    print_capabilities();
    $result = 1;
  } elsif ( $request eq 'describecoverage' ) {
    print "Content-type: text/xml; charset=iso-8859-1\n\n"; # For webserver
    print_coverage_description();
    $result = 1;
  } elsif ( $request eq 'getcoverage' ) {
    compute_time_range();
    print "Content-type: $content_types{ $format }; charset=iso-8859-1\n\n";
    my @output = do_query();
    my $count = @output;
    debug( "Call to remote web service yielded $count values." );

    print "$count\n"; # Print number of data lines to follow.

    if ( $count ) {
      $result = 1;

      # Print header line:

      if ( $coverage eq 'station' ) {
        print "start(yyyymmdd)\tlongitude(deg)\tlatitude(deg)" .
              "\tstation_id(-)\tstation_name(-)\n";
      } else {
        print "timestamp(UTC)\tlongitude(deg)\tlatitude(deg)" .
              "\tdepth(m)\tstation_id(-)\t$coverage($coverage_units)" .
              "\tstation_name(-)\n";
      }

      # Print data lines:

      for ( my $i = 0; $i < $count; ++$i ) {
        print "$output[ $i ]\n";
      }
    }
  }

  $result = 1 - $result; # UNIX: zero is success, non-zero is failure.
  debug( "exit result = $result" );
  exit $result;
}



# Print web server capabilities metadata.

sub print_capabilities {
  print '<?xml version="1.0" encoding="UTF-8" ?>' . "\n";
  print '<WCS_Capabilities version="1.0.0" ';
  print 'xmlns="https://www.opengeospatial.org/standards/wcs" ';
  print 'xmlns:gml="https://www.opengis.net//gml" ';
  print 'xmlns:xlink="https://www.w3.org/1999/xlink">';
  print '
    <Service>
        <metadataLink xlink:type="simple" xlink:href=" https://www.epa.gov/rsig" metadataType="other" />
        <description>EPA DV Web Server 1.0.0</description>
        <name>EPA_DV_OGC_WCS_1.0.0</name>
        <label>EPA DV Web Server 1.0.0</label>
        <keywords>
            <keyword>EPA</keyword>
            <keyword>DV</keyword>
            <keyword>interoperability</keyword>
        </keywords>
        <responsibleParty>
            <individualName>Todd Plessel</individualName>
            <organisationName>EPA Vislab</organisationName>
            <contactInfo>
                <onlineResource xlink:type="simple" xlink:href="mailto:plessel.todd@epa.gov" />
            </contactInfo>
        </responsibleParty>
        <fees>NONE</fees>
        <accessConstraints>NONE</accessConstraints>
    </Service>
    <Capability>
        <Request>
            <GetCapabilities>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/dvserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/dvserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </GetCapabilities>
            <DescribeCoverage>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/dvserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/dvserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </DescribeCoverage>
            <GetCoverage>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/dvserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/dvserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </GetCoverage>
        </Request>
        <Exception>
            <Format>text/xml; charset="utf-8"</Format>
        </Exception>
    </Capability>
    <ContentMetadata version="1.0.0">';
  print "\n";

  my $variable_count = @metadata;

  for ( my $variable = 0; $variable < $variable_count; ++$variable ) {
    my $name = $metadata[ $variable ]->{ name };

    if ( $name ne '?' ) {
      my $units = $metadata[ $variable ]->{ units };
      my $description = $metadata[ $variable ]->{ description };
      print "        <CoverageOfferingBrief>\n";
      print "            <name>$name</name>\n";
      print "            <label>$name($units)</label>\n";
      print "            <description>$description</description>\n";
      print '            <lonLatEnvelope srsName="WGS84(DD)">';
      print "\n";
      print "                <gml:pos>-126 22</gml:pos>\n";
      print "                <gml:pos>-65 50</gml:pos>\n";
      print "            </lonLatEnvelope>\n";
      print "        </CoverageOfferingBrief>\n";
    }
  }

  print "    </ContentMetadata>\n";
  print "</WCS_Capabilities>\n";
}



# Print web server coverage description metadata.

sub print_coverage_description {
  print '<?xml version="1.0" encoding="UTF-8" ?>';
  print '<CoverageDescription version="1.0.0" ';
  print 'xmlns="https://www.opengeospatial.org/standards/wcs" ';
  print 'xmlns:gml="https://www.opengis.net/gml" ';
  print 'xmlns:xlink="https://www.w3.org/1999/xlink">';
  print "\n";

  my $variable_count = @metadata;

  for ( my $variable = 0; $variable < $variable_count; ++$variable ) {
    my $name = $metadata[ $variable ]->{ name };

    if ( $name ne '?' ) {
      my $units = $metadata[ $variable ]->{ units };
      my $description = $metadata[ $variable ]->{ description };

      if ( $coverage eq '' || $coverage eq $name ) {
        print "    <CoverageOffering>\n";
        print "        <name>$name</name>\n";
        print "        <label>$name($units)</label>\n";
        print "        <description>$description</description>\n";
        print "        <domainSet>\n";
        print "            <spatialDomain>\n";
        print '                <gml:Envelope srsName="WGS84(DD)">';
        print "\n";
        print "                    <gml:pos>-126 22</gml:pos>\n";
        print "                    <gml:pos>-65 50</gml:pos>\n";
        print "                </gml:Envelope>\n";
        print "            </spatialDomain>\n";
        print "            <temporalDomain>\n";
        print "                <timePeriod>\n";
        print "                    <beginPosition>19940501";
        print "T00:00:00Z</beginPosition>\n";
        print "                    <endPosition>20151213";
        print "T23:59:59Z</endPosition>\n";
        print "                    <timeResolution>PT1Y</timeResolution>\n";
        print "                </timePeriod>\n";
        print "            </temporalDomain>\n";
        print "        </domainSet>\n";
        print "        <rangeSet>\n";
        print "            <RangeSet>\n";
        print "                <name>$name</name>\n";
        print "                <label>$name($units)</label>\n";
        print "                <description>$description</description>";
        print '
                <nullValues>
                    <singleValue>-99</singleValue>
                </nullValues>
            </RangeSet>
        </rangeSet>
        <supportedCRSs>
            <requestResponseCRSs>CRS:84</requestResponseCRSs>
            <nativeCRSs>CRS:84</nativeCRSs>
        </supportedCRSs>
        <supportedFormats>
            <formats>ASCII</formats>
        </supportedFormats>
        <supportedInterpolations>
            <interpolationMethod>mean mode</interpolationMethod>
        </supportedInterpolations>
    </CoverageOffering>
';

      }
    }
  }

  print "</CoverageDescription>\n";
}



# Parse URL parameters into variables.

sub parse_url {
  use CGI qw/ untaint /;     # Load Safe untainting CGI routines.
  $CGI::DISABLE_UPLOADS = 1; # Disable uploads.
  $CGI::POST_MAX = 1024;     # Limit posts to 1024 bytes.
  my $query = new CGI;       # Parse QUERY_STRING.
  %ENV = ();                 # Unset all environment variables.
  my @names = $query->param; # Extract names of parameters.
  my $count = @names;
  my $result = 0;
  debug( "$program_name @names ($count)" );

  for ( my $parameter = 0; $parameter < $count; ++$parameter) {
    $_ = $names[ $parameter ];                # $_ is tainted.
    s/[^A-Za-z]/_/go;                         # Untaint $_.
    my $option = $_;                          # $option is untainted.
    $_ = $query->param( $option );            # $_ is tainted.
    s/[^\w\-.,:\/]/_/go;                      # Untaint $_.
    my $value = $_;                           # $value is untainted.
    my $lowercase_option = lc( $option );
    my $lowercase_value  = lc( $value );
    debug( "$lowercase_option $lowercase_value" );

    if ( $parsers{ $lowercase_option } ) {
      $result = $parsers{ $lowercase_option }->( $lowercase_value );
    } else {
      print STDERR "\nInvalid option: '$option'\n";
      $result = 0;
    }

    if ( ! $result ) {
      $parameter = $count; # Finish looping.
    }
  }

  $result = $result && required_options_specified();
  return $result;
}



# Parse service option.

sub parse_service_option {
  my $value = shift;
  my $result = parse_option( $service, $value, 'SERVICE', 'wcs' );
  return $result;
}



# Parse version option.

sub parse_version_option {
  my $value = shift;
  my $result = parse_option( $version, $value, 'VERSION', '1.0.0' );
  return $result;
}



# Parse request option.

sub parse_request_option {
  my $value = shift;
  my $result = parse_option( $request, $value, 'REQUEST',
                             'getcoverage getcapabilities describecoverage' );
  return $result;
}



# Parse format option:

sub parse_format_option {
  my $value = shift;
  my $result =
    parse_option( $format, $value, 'FORMAT', 'ascii' );
  return $result;
}



# Parse coverage option.

sub parse_coverage_option {
  my $value = shift;
  my $result = 0;

  if ( $coverage ne '' ) {
    print STDERR "\nRedundant COVERAGE option: '$value'\n";
  } else {
    my $variable_count = @metadata;

    for ( my $variable = 0; $coverage eq '' && $variable < $variable_count;
          ++$variable ) {
      my $name = $metadata[ $variable ]->{ name };

      if ( $name ne '?' ) {

        if ( $name eq $value ) {
          $coverage = $name;
          $coverage_units = $metadata[ $variable ]->{ units };
          $result = 1;
        }
      }
    }

    if ( ! $result ) {
      print STDERR "\nInvalid COVERAGE option: '$value'\n";
    }
  }

  return $result;
}



# Parse time option.

sub parse_time_option {
  my $value = shift;
  my $result = 0;

  if ( $time ne '' ) {
    print STDERR "\nRedundant TIME option: '$value'\n";
  } else {
    $time = $value;
    my $is_valid = is_valid_time( $time );

    if ( ! $is_valid ) {
      print STDERR "\nInvalid TIME option: '$value'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse bbox option.

sub parse_bbox_option {
  my $value = shift;
  my $result = 0;

  if ( $bbox ne '' ) {
    print STDERR "\nRedundant BBOX option: '$value'\n";
  } else {
    $bbox = $value;
    @bounds = split( /,/, $bbox );
    my $bounds_count = @bounds;

    if ( $bounds_count != 4 && $bounds_count != 6 ) {
      print STDERR "\nInvalid bbox option: '$value'\n";
    } elsif ( ! in_range( $bounds[ 0 ], -180.0, 180.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 0 ]'\n";
    } elsif ( ! in_range( $bounds[ 1 ], -90.0, 90.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 1 ]'\n";
    } elsif ( ! in_range( $bounds[ 2 ], $bounds[ 0 ], 180.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 2 ]'\n";
    } elsif ( ! in_range( $bounds[ 3 ], $bounds[ 1 ], 90.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 3 ]'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}


# Check that all required 'options' have been specified:

sub required_options_specified {
  my $result = 0;

  if ( $service eq '' ) {
    print STDERR "\nMissing option: 'SERVICE'\n";
  } elsif ( $version eq '' ) {
    print STDERR "\nMissing option: 'VERSION'\n";
  } elsif ( $request eq '' ) {
    print STDERR "\nMissing option: 'REQUEST'\n";
  } elsif ( $request eq 'getcoverage' ) {

    if ( $format eq '' ) {
      print STDERR "\nMissing option: 'FORMAT'\n";
    } elsif ( $time eq '' ) {
      print STDERR "\nMissing option: 'TIME'\n";
    } elsif ( $bbox eq '' ) {
      print STDERR "\nMissing option: 'BBOX'\n";
    } elsif ( $coverage eq '' ) {
      print STDERR "\nMissing option: 'COVERAGE'\n";
    } else {
      $result = 1;
    }
  } else {
    $result = 1;
  }

  return $result;
}



# Compute starting_timestamp and hours.
# inputs:  $time = '2001-08-26t00:00:00z/2001-08-31t23:59:59z'
# outputs: $starting_timestamp = 2005082600
#          $hours = 120
#          $days = 5

sub compute_time_range {
  my $yyyy1 = substr( $time, 0, 4 );
  my $mm1   = substr( $time, 5, 2 );
  my $dd1   = substr( $time, 8, 2 );
  my $hh1   = substr( $time, 11, 2 );
  my $i     = index( $time, '/' );

  $starting_timestamp = integer_timestamp( $yyyy1, $mm1, $dd1, $hh1 );
  $ending_yyyymmdd = $starting_timestamp / 100;
  $hours = 1;
  $days = 1;

  if ( $i != -1 ) {
    ++$i;
    my $yyyy2 = substr( $time, $i + 0, 4 );
    my $mm2   = substr( $time, $i + 5, 2 );
    my $dd2   = substr( $time, $i + 8, 2 );
    my $hh2   = substr( $time, $i + 11, 2 );
    my $yyyy  = $yyyy1;
    my $mm    = $mm1;
    my $dd    = $dd1;
    my $hh    = $hh1;
    my $previous_dd = $dd1;

    while ( integer_timestamp( $yyyy, $mm, $dd, $hh ) !=
            integer_timestamp( $yyyy2, $mm2, $dd2, $hh2 ) ) {
      increment_timestamp( $yyyy, $mm, $dd, $hh );

      if ( $dd ne $previous_dd ) {
        ++$days;
        $previous_dd = $dd;
        $ending_yyyymmdd = $yyyy * 10000 + $mm * 100 + $dd;
      }

      ++$hours;
    }
  }
}



# Get query parameters and units that correspond to $coverage:

sub get_parameters_units {
  my @result = ();
  my $variable_count = @metadata;

  for ( my $variable = 0; $variable < $variable_count; ++$variable ) {
    my $name = $metadata[ $variable ]->{ name };

    if ( $coverage eq $name ) {
      @result = ( $metadata[ $variable ]->{ parameters },
                  $metadata[ $variable ]->{ units } );
      $variable = $variable_count; # Stop looping.
    }
  }

  return @result;
}



# Query remote web service to obtain sorted array of
# timestamp longitude latitude station value
# for all stations in bbox reporting value within time-range.
# my @result = do_query();

sub do_query {
  my ( $parameter, $units ) = get_parameters_units();
  my $yyyymmdd1 = substr( $starting_timestamp, 0, 8 );
  my $yyyymmdd2 = $ending_yyyymmdd;
  my $yyyy1 = substr( $yyyymmdd1, 0, 4 );
  my $mm1   = substr( $yyyymmdd1, 4, 2 );
  my $dd1   = substr( $yyyymmdd1, 6, 2 );
  my $yyyy2 = substr( $yyyymmdd2, 0, 4 );
  my $mm2   = substr( $yyyymmdd2, 4, 2 );
  my $dd2   = substr( $yyyymmdd2, 6, 2 );
  my $date_start = sprintf( "%04d-%02d-%02d", $yyyy1, $mm1, $dd1 );
  my $date_end   = sprintf( "%04d-%02d-%02d", $yyyy2, $mm2, $dd2 );

  my $command =
    $wget_command . "&parameterCd=$parameter" .
    "&startDT=$date_start&endDT=$date_end" .
    "&bBox=$bounds[0],$bounds[1],$bounds[2],$bounds[3]'";

  my $result = '';
  my $the_pipe = 0;

  # Untaint command (match expression is arbitrary as far as -T is concerned):

  if ( $command =~ m#^(/[\w-]+/[\w -/.,':?=&;\(\) %]+)$# ) {
    $command = $1; # Re-assign first match, which is enough to satisfy -T.
    debug( "$0 executing command = $command" );
    %ENV = (); # Unset all environment variables prior to popen.
    # Complicated, supposedly safer way to open a readable pipe to command:
    my $pid = open( the_pipe, "-|" );

    if ( ! defined( $pid ) ) {
      die "Couldn't open pipe to subprocess";
    } elsif ( $pid ) { # Parent process.
      debug( "reading result rows..." );
      my $line = <the_pipe>; # Read and skip header line.

      if ( defined( $line ) ) { # If remote web service returned a line.
        debug( "header line = $line\n" );
        my $id = -9999;
        my $sid = '';
        my $latitude = -9999.0;
        my $longitude = -9999.0;
        my $measure_units = '';
        my $measure = -9999.0;
        my $timestamp = '';

        while ( $line = <the_pipe> ) { # Read and process data lines.
          my $value = '';

          if ( parse_line( $line, '<ns1:siteCode ', $value ) ) {
            $sid = 'NWIS-USGS-' . $value;
            $id = int( $value );
          } elsif ( parse_line( $line, '<ns1:latitude>', $value ) ) {
            $latitude = $value;
          } elsif ( parse_line( $line, '<ns1:longitude>', $value ) ) {
            $longitude = $value;
          } elsif ( parse_line( $line, '<ns1:unitCode>', $value ) ) {
            $measure_units = $value;
          } elsif ( parse_line2( $line, ' dateTime="', $timestamp, $measure)) {

            if ( $id > -9999 && $sid ne '' &&
                 in_range( $latitude, -90.0, 90.0 ) &&
                 in_range( $longitude, -180.0, 180.0 ) &&
                 $measure_units ne '' && $measure > -9999.0 ) {
              my $converted_measure =
                matches_units( $measure_units, $units, $measure );
              debug( "$converted_measure = " .
                     "matches_units( $measure_units, $units, $measure )" );

              if ( $converted_measure > -9999.0 ) {
                $result .=
                  "$timestamp\t$longitude\t$latitude\t0" .
                  "\t$id\t$converted_measure\t$sid\n";
              }
            }
          }
        }
      }

      close( the_pipe ) or die $!;
    } else { # Child process.
      exec( $command ) or die "can't exec program: $!";
    }
  } else {
    print STDERR "\n$0: command contains invalid characters.\n";
  }

  my @sorted_result = sort split( /\n/, $result );
  return @sorted_result;
}



# Parse a line of data from remote web service.
# if ( parse_line( $line, $tag, $value ) ) { ... }

sub parse_line {  
  my ( $line, $tag, $value ) = @_;
  my $result = 0;
  my $s = index( $line, $tag );

  if ( $s != -1 ) {
    my $s2 = index( substr( $line, $s ), '>' );

    if ( $s2 != -1 ) {
      $s += $s2 + 1;
      my $e = index( substr( $line, $s ), '<' );

      if ( $e != -1 ) {
        $e += $s;
        my $count = $e - $s;
        $value = substr( $line, $s, $count );
        $value =~ s/\s+//g; # Remove any spaces.
        $_[ 2 ] = $value;
        $result = 1;
      }
    }
  }

  return $result;
}



# Parse a line of data from remote web service.
# if ( parse_line2( $line, $tag, $timestamp, $value ) ) { ... }

sub parse_line2 {  
  my ( $line, $tag, $timestamp, $value ) = @_;
  my $result = parse_line( $line, $tag, $value );

  if ( $result ) {
    $result = 0;
    my $s = index( $line, $tag );

    if ( $s != -1 ) {
      $s += length( $tag );
      my $e = index( substr( $line, $s ), 'T' );

      if ( $e != -1 ) {
        $timestamp = substr( $line, $s, 10 ); # YYYY-MM-DD.
        $timestamp =~ s/\s+//g; # Remove any spaces.
        $timestamp .= 'T00:00:00-0000';
        $_[ 2 ] = $timestamp;
        $_[ 3 ] = $value;
        $result = 1;
      }
    }
  }

  return $result;
}



# Match or convert units and measure.
# my $converted_measure = matches_units( $from_units, $to_units, $measure );

sub matches_units {
  my ( $from_units, $to_units, $measure ) = @_;
  my $result = -9999; # Missing/invalid value.

  # Various conversion scale factors:

  my $feet_to_meters = 0.3048;
  my $to_micro = 1e6;
  my $milli_to_micro = 1e3;
  my $micro_to_milli = 1e-3;

  if ( $from_units eq $to_units ) {
    $result = $measure;
  } elsif ( lc( $from_units ) eq lc( $to_units ) ) {
    $result = $measure;
  } elsif ( $to_units eq '%' && index( $from_units, '%' ) == 0 ) {
    $result = $measure;
  } elsif ( ( $from_units eq 'degF' || $from_units eq 'F' )
            && $to_units eq 'C' ) {
    $result = ( $measure - 32.0 ) * ( 5.0 / 9.0 );
  } elsif ( $from_units eq 'degC' && $to_units eq 'C' ) {
    $result = $measure;
  } elsif ( $from_units eq 'perm' && $to_units eq '/m' ) {
    $result = $measure;
  } elsif ( $from_units eq 'ft' && $to_units eq 'm' ) {
    $result = $measure * $feet_to_meters;
  } elsif ( ( $from_units eq 'cfs' || $from_units eq 'ft3/s' )
            && $to_units eq 'm3/s' ) {
    $result = $measure * $feet_to_meters * $feet_to_meters * $feet_to_meters;
  } elsif ( $from_units eq 'mg/m3' && $to_units eq 'mg/L' ) {
    $result = $measure * 1e-3;
  } elsif ( $from_units eq 'mg/lasN' && $to_units eq 'mg/L' ) {
    $result = $measure;
  } elsif ( $from_units eq 'ug/l' && $to_units eq 'mg/L' ) {
    $result = $measure * $micro_to_milli;
  } elsif ( $from_units eq 'mg/l' && $to_units eq 'ug/L' ) {
    $result = $measure * $milli_to_micro;
  } elsif ( $from_units eq 'mho/cm' && $to_units eq 'uS/cm' ) {
    $result = $measure * $to_micro;
  } elsif ( $from_units eq 'umho/cm' && $to_units eq 'uS/cm' ) {
    $result = $measure;
  } elsif ( $from_units eq 'mS/cm' && $to_units eq 'uS/cm' ) {
    $result = $measure * $milli_to_micro;
  } elsif ( $from_units eq 'PSS' && $to_units eq 'PSU' ) {
    $result = $measure;
  } elsif ( $from_units eq 'ppt' && $to_units eq 'ppm' ) {
    $result = $measure * 1e3;
  } elsif ( $from_units eq 'ppth' && $to_units eq 'ppm' ) {
    $result = $measure * 1e3;
  } elsif ( $from_units eq 'uE/m2/sec' && $to_units eq 'uE/m2/s' ) {
    $result = $measure;
  } elsif ( $to_units eq 'pH' ) {
    $result = $measure;
  } elsif ( $to_units eq '-' ) {
    $result = $measure;
  }

  if ( $result != -9999 && $to_units eq 'm' ) {

    if ( $result > 0.0 ) {
      $result = -$result; # Express depth as negative meters.
    }
  }

  return $result;
}

  
  

############################### HELPER ROUTINES ##############################



# debug( message );

sub debug {
  my $message = shift;

  if ( $debugging ) {
    print STDERR "\n$message\n";
####print STDOUT "\n$message\n";
  }
}



# my $result = parse_option( $option, $value, $option_name, $valid_values );
# my $result = parse_option( $variable, $value, 'COVERAGE', 'ozone pm25' );

sub parse_option {
  my ( $option, $value, $option_name, $valid_values ) = @_;
  my $result = 0;

  if ( $option ne '' ) {
    print STDERR "\nRedundant $option_name option: '$value'\n";
  } else {
    $result = index( " $valid_values ", " $value " ) != -1;

    if ( $result ) {
      $_[ 0 ] = $value;
    } else {
      print STDERR "\nInvalid $option_name option: '$value'\n";
    }
  }

  return $result;
}



# my $ok = in_range( $value, $minimum, $maximum );

sub in_range {
  my ( $value, $minimum, $maximum ) = @_;
  my $result = $value >= $minimum && $value <= $maximum;
  return $result;
}



# my $is_valid = is_valid_time( '2001-08-26t20:00:00z/2001-08-27t23:59:59z' );

sub is_valid_time {
  my $time = shift;
  my $result = 0;
  my $length = length( $time );

  if ( $length == 41 ) {
    $result = is_valid_time( substr( $time, 0, 20 ) );
    $result = $result && substr( $time, 20, 1 ) eq '/';
    $result = $result && is_valid_time( substr( $time, 21, 20 ) );
    $result = $result && substr( $time, 0, 20 ) le substr( $time, 21, 20 );
  } elsif ( $length == 20 ) {
    my $year   = substr( $time, 0, 4 );
    my $month  = substr( $time, 5, 2 );
    my $day    = substr( $time, 8, 2 );
    my $hour   = substr( $time, 11, 2 );
    my $minute = substr( $time, 14, 2 );
    my $second = substr( $time, 17, 2 );
    $result = in_range( $year, 1900, 3000 );
    $result = $result && in_range( $month, 1, 12 );
    $result = $result && in_range( $day, 1, days_in_month( $year, $month ) );
    $result = $result && in_range( $hour, 0, 23 );
    $result = $result && in_range( $minute, 0, 59 );
    $result = $result && in_range( $second, 0, 59 );
    $result = $result && substr( $time, 4, 1 ) eq '-';
    $result = $result && substr( $time, 7, 1 ) eq '-';
    $result = $result && substr( $time, 10, 1 ) eq 't';
    $result = $result && substr( $time, 13, 1 ) eq ':';
    $result = $result && substr( $time, 16, 1 ) eq ':';
    $result = $result && substr( $time, 19, 1 ) eq 'z';
  }

  return $result;
}



# Check if given timestamp is within the range of $time.
# my $ok = within_time_range( $timestamp, $time );

sub within_time_range {
  my ( $timestamp, $time ) = @_;
  my $length = length( $time );
  my $result = is_valid_time( $timestamp );

  if ( $result ) {

    if ( $length == 20 ) {
      $result = ( $timestamp eq substr( $time, 0, 20 ) );
    } elsif ( $length == 41 ) {
      my $first_timestamp = substr( $time, 0, 20 );
      my $last_timestamp  = substr( $time, 21, 20 );
      $result =
        ( $timestamp ge $first_timestamp && $timestamp le $last_timestamp );
    }
  }

  return $result;
}



# Compute UTC timestamp from local one.
# my $timestamp = UTC_timestamp( $yyyy_mm_dd, $hh_mm_ss, $time_zone );

sub UTC_timestamp {
  my ( $yyyy_mm_dd, $hh_mm_ss, $time_zone ) = @_;
  my $yyyy = substr( $yyyy_mm_dd, 0, 4 );
  my $mm   = substr( $yyyy_mm_dd, 5, 2 );
  my $dd   = substr( $yyyy_mm_dd, 8, 2 );
  my $hh   = substr( $hh_mm_ss, 0, 2 );
  my $mn   = substr( $hh_mm_ss, 3, 2 );
  my $ss   = substr( $hh_mm_ss, 6, 2 );

  if ( $mn eq '' ) {
    $mn = '00';
  }

  if ( $ss eq '' ) {
    $ss = '00';
  }

  my $mm_ss = "$mn:$ss";
  my $hours_to_UTC = time_zone_offset( $time_zone );
  $hh += $hours_to_UTC;
  increment_timestamp( $yyyy, $mm, $dd, $hh );
  my $result =
    sprintf( "%04d-%02d-%02dt%02d:%sz",
             $yyyy, $mm, $dd, $hh, $mm_ss );
  return $result;
}



# Compute UTC timestamp from local one.
# my $hh = time_zone_offset( $time_zone );

sub time_zone_offset {
  my $time_zone = shift;
  my @time_zone_table = (
    { 'name' => 'AST',   'offset' => 4 },
    { 'name' => 'EST',   'offset' => 5 },
    { 'name' => 'EDT',   'offset' => 4 },
    { 'name' => 'CST',   'offset' => 6 },
    { 'name' => 'CDT',   'offset' => 5 },
    { 'name' => 'MST',   'offset' => 7 },
    { 'name' => 'MDT',   'offset' => 6 },
    { 'name' => 'PST',   'offset' => 8 },
    { 'name' => 'PDT',   'offset' => 7 },
    { 'name' => 'AKST',  'offset' => 9 },
    { 'name' => 'AKDT',  'offset' => 8 },
    { 'name' => 'HAST',  'offset' => 10 },
    { 'name' => 'HASDT', 'offset' => 9 }
  );
  my $result = 0;
  my $count = @time_zone_table;

  for ( my $i = 0; $i < $count; ++$i ) {
    my $name = $time_zone_table[ $i ]->{ name };

    if ( $name eq $time_zone ) {
      my $offset = $time_zone_table[ $i ]->{ offset };
      $result = $offset;
      $i = $count; # Stop looping.
    }
  }

  return $result;
}



# increment_timestamp( $yyyy, $mm, $dd, $hh );

sub increment_timestamp {
  my ( $yyyy, $mm, $dd, $hh ) = @_;
  my $hours_per_day   = 23;
  my $months_per_year = 12;
  my $days_this_month = days_in_month( $yyyy, $mm );
  ++$hh;

  if ( $hh > $hours_per_day ) {
    $hh = 0;
    ++$dd;

    if ( $dd > $days_this_month ) {
      $dd = 1;
      ++$mm;

      if ( $mm > $months_per_year ) {
        $mm = 1;
        ++$yyyy;
      }
    }
  }

  $_[ 0 ] = $yyyy;
  $_[ 1 ] = $mm;
  $_[ 2 ] = $dd;
  $_[ 3 ] = $hh;
}



# my $yyyymmddhh = integer_timestamp( $yyyy, $mm, $dd, $hh );

sub integer_timestamp {
  my ( $yyyy, $mm, $dd, $hh ) = @_;
  my $result = int( $yyyy * 1000000 + $mm * 10000 + $dd * 100 + $hh );
  return $result;
}



# my $leap = is_leap_year( $year );

sub is_leap_year {
  my $year = shift;
  my $result = $year % 4 == 0 && ( $year % 100 != 0 || $year % 400 == 0 );
  return $result;
}



# my $days = days_in_month( $year, $month );

sub days_in_month {
  my $year  = shift;
  my $month = shift;

  # 30 days hath September, April, June and November...

  my @days_per_month = ( 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 );
  my $result = $days_per_month[ $month - 1 ];

  if ( $month == 2 ) {

    if ( is_leap_year( $year ) ) {
      ++$result;
    }
  }

  return $result;
}



# decrement_date( $yyyy, $mm, $dd );

sub decrement_date {
  my ( $yyyy, $mm, $dd ) = @_;
  --$dd;

  if ( $dd < 1 ) {
    --$mm;

    if ( $mm < 1 ) {
       --$yyyy;
       $mm = 12;
    }

    $dd = days_in_month( $yyyy, $mm );
  }

  $_[ 0 ] = $yyyy;
  $_[ 1 ] = $mm;
  $_[ 2 ] = $dd;
}



# increment_date( $yyyy, $mm, $dd );

sub increment_date {
  my ( $yyyy, $mm, $dd ) = @_;
  ++$dd;

  if ( $dd > 28 ) {
    my $days_this_month = days_in_month( $yyyy, $mm );

    if ( $dd > $days_this_month ) {
      $dd = 1;
      ++$mm;

      if ( $mm > 12 ) {
        $mm = 1;
        ++$yyyy;
      }
    }
  }

  $_[ 0 ] = $yyyy;
  $_[ 1 ] = $mm;
  $_[ 2 ] = $dd;
}



