#!/usr/bin/perl -wT

##############################################################################
# PURPOSE: ncca2server - Serve 2015 National Coastal Condition Assessment
#          ground station data, subsetted by date/time range, variable, and
#          longitude-latitude box, in ASCII, XDR, NetCDF-COARDS, and
#          NetCDF-IOAPI formats for use by other programs (e.g., via curl).
# NOTES:   Server is WCS-compliant:
#          https://www.opengeospatial.org/standards/wcs
#          https://datafed.net/xs/OpenGIS/wcs/1.0.0/
#          and modeled after a similar webserver application:
#          https://webapps.datafed.net/ogc_EPA.wsfl
#
#          Example usage:
#
#          curl --silent 'https://ofmpub.epa.gov/rsig/rsigserver?\
#                    SERVICE=wcs&\
#                    VERSION=1.0.0&\
#                    REQUEST=GetCoverage&\
#                    COVERAGE=ncca2.pacific.chlorophyll_a&\
#                    TIME=2015-07-14T00:00:00Z/2015-07-16T23:59:59Z&\
#                    BBOX=-135,20,-60,50&\
#                    FORMAT=ascii'
#
# HISTORY: 2021-11-15 plessel.todd@epa.gov 1-919-541-5500
#
# STATUS:  inchoate
##############################################################################


use strict;
package main;
$| = 1; # Turn off output buffering so messages appear in correct order.
alarm( 3600 ); # Kill process after 1 hour. Legitimate usage could be an hour!
# Restrict PATH and ENV. (But before popen, ENV is cleared!)
delete @ENV{ 'PATH', 'IFS', 'CDPATH', 'ENV', 'BASH_ENV' };


############################## TUNABLE CONSTANTS #############################


my $debugging = 0; # 1 = print debug messages to STDERR logs/error_log.

# Server where this program is installed:

my $server_path = 'https://YOUR_WEBSERVER_HOST/cgi-bin';

# Internal EPA server where the data and subset program are installed:

my $directory = '/data/land_use'; # Contains data file.
my $input_file_name_template = "$directory/ncca_water_quality_2015_REGION.csv";

# Query string parsing routine dispatch table:

my %parsers = (
  'service'       => \&parse_service_option,
  'version'       => \&parse_version_option,
  'request'       => \&parse_request_option,
  'coverage'      => \&parse_coverage_option,
  'time'          => \&parse_time_option,
  'bbox'          => \&parse_bbox_option,
  'format'        => \&parse_format_option
);

# Webserver content types for each output format:

my %content_types = (
  'ascii' => 'text/plain'
);

# Full URL path to this program:

my @pathed_program_parts = split( /\//, $0 );
my $program_name = $pathed_program_parts[ @pathed_program_parts - 1 ];
my $program = "$server_path/$program_name";


################################## VARIABLES #################################


# Parsed from the URL query string:

my $service  = ''; # wcs.
my $version  = ''; # 1.0.0.
my $request  = ''; # getcapabilities or describecoverage or getcoverage.
my $coverage = ''; # pacific.chlorophyll_a.
my $format   = ''; # xdr, ascii, netcdf.
my $time     = ''; # E.g., 2015-07-14t00:00:00z/2015-07-16t23:59:59z.
my $bbox     = ''; # E.g., -130,24,-110,50,0,0.

# Derived from the above parsed values:

my $yyyymmdd_start = 0; # E.g., 2005360.
my $yyyymmdd_end   = 0; # E.g., 2005365.
my @bounds = ();
my $region = ''; # E.g., pacific.
my $coverage_index = -1; # 0-based index into metadata that matches coverage.

# head -1 /data/land_use/ncca_water_quality_2015_gulf.csv \
# | tr ',' '\n' | awk '{ printf "#%3d %s\n", NR -1, $0}'
# 0 Site(-)
# 1 Date(yyyy-mm-dd)
# 2 VisitNo(-)
# 3 UID(-)
# 4 ESTCODE(-)
# 5 Longitude(deg)
# 6 Latitude(deg)
# 7 Depth(m)
# 8 Analyte(-)
# 9 Measure(-)
# 10 Units(-)
# 11 LRL
# 12 MDL
# 13 Method
# 14 NARS_Flag

my @regions = (
  {
   'name' => 'atlantic',
   'west' => -87.4,
   'east' => -67.3,
   'south' => 24.7,
   'north' => 44.7
  },
  {
   'name' => 'gulf',
   'west' => -97.8,
   'east' => -80.1,
   'south' => 24.7,
   'north' => 30.7
  },
  {
   'name' => 'lower_mississippi',
   'west' => -93.4,
   'east' => -88.9,
   'south' => 29,
   'north' => 30.3
  },
  {
   'name' => 'pacific',
   'west' => -124.4,
   'east' => -117.1,
   'south' => 32.6,
   'north' => 48.9
  }
);

my @metadata = (
  {
    'name' => 'station',
    'units' => '-',
    'description' => 'Site name.',
    'analyte_name' => '',
    'analyte_name_column' => -1,
    'column' => 0 # 0-based.
  },
  {
    'name' => 'uid',
    'units' => '-',
    'description' => 'Unique numeric site number.',
    'analyte_name' => '',
    'analyte_name_column' => -1,
    'column' => 3
  },
  {
    'name' => 'chlorophyll_a',
    'units' => 'ug/L',
    'description' => 'Chlorophyll-a concentration.',
    'analyte_name' => 'CHLA',
    'analyte_name_column' => 8,
    'column' => 9
  },
  {
    'name' => 'conductivity',
    'units' => 'uS/cm',
    'description' => 'Conductivity at 25C.',
    'analyte_name' => 'COND',
    'analyte_name_column' => 8,
    'column' => 9
  },
  {
    'name' => 'dissolved_inorganic_nitrogen',
    'units' => 'mg/L',
    'description' =>
      'Dissolved inorganic nitrogen concentration.',
    'analyte_name' => 'DIN',
    'analyte_name_column' => 8,
    'column' => 9
  },
  {
    'name' => 'microcystin',
    'units' => 'ug/L',
    'description' => 'Microcystin (blue-green algae toxin) concentration.',
    'analyte_name' => 'MICX',
    'analyte_name_column' => 8,
    'column' => 9
  },
  {
    'name' => 'nitrate_nitrite_n',
    'units' => 'ug/L',
    'description' => 'Nitrate + nitrite as nitrogen.',
    'analyte_name' => 'NITRATE_NITRITE_N',
    'analyte_name_column' => 8,
    'column' => 9
  },
  {
    'name' => 'nitrite_n',
    'units' => 'mg/L',
    'description' => 'Nitrite nitrogen.',
    'analyte_name' => 'NITRITE_N',
    'analyte_name_column' => 8,
    'column' => 9
  },
  {
    'name' => 'total_nitrogen',
    'units' => 'mg/L',
    'description' => 'Total nitrogen concentration.',
    'analyte_name' => 'NTL',
    'analyte_name_column' => 8,
    'column' => 9
  },
  {
    'name' => 'ph',
    'units' => 'pH',
    'description' => 'Acidity/alkalinity.',
    'analyte_name' => 'PH',
    'analyte_name_column' => 8,
    'column' => 9
  },
  {
    'name' => 'total_phosphorus',
    'units' => 'mg/L',
    'description' => 'Total phosphorus concentration.',
    'analyte_name' => 'PTL',
    'analyte_name_column' => 8,
    'column' => 9
  },
  {
    'name' => 'soluble_reactive_phosphorus',
    'units' => 'mg/L',
    'description' => 'Soluble reactive phosphorus concentration.',
    'analyte_name' => 'SRP',
    'analyte_name_column' => 8,
    'column' => 9
  },
  {
    'name' => 'total_dissolved_nitrogen',
    'units' => 'mg/L',
    'description' => 'Total dissolved nitrogen concentration.',
    'analyte_name' => 'TDN',
    'analyte_name_column' => 8,
    'column' => 9
  },
  {
    'name' => 'total_dissolved_phosphorus',
    'units' => 'mg/L',
    'description' => 'Total dissolved phosphorus concentration.',
    'analyte_name' => 'TDP',
    'analyte_name_column' => 8,
    'column' => 9
  }
);

################################## ROUTINES ##################################


main();


sub main {
  my $result = 0;

  if ( ! parse_url() ) {
    print "Content-type: text/plain; charset=iso-8859-1\n\n"; # For webserver
  } elsif ( $request eq 'getcapabilities' ) {
    print "Content-type: text/xml; charset=iso-8859-1\n\n"; # For webserver
    print_capabilities();
    $result = 1;
  } elsif ( $request eq 'describecoverage' ) {
    print "Content-type: text/xml; charset=iso-8859-1\n\n"; # For webserver
    print_coverage_description();
    $result = 1;
  } elsif ( $request eq 'getcoverage' ) {
    print "Content-type: $content_types{ $format }; charset=iso-8859-1\n\n";
    compute_time_range();
    $result = extract_subset();
  }

  $result = 1 - $result; # UNIX: zero is success, non-zero is failure.
  debug( "exit result = $result" );
  exit $result;
}



# Print web server capabilities metadata.

sub print_capabilities {
  print '<?xml version="1.0" encoding="UTF-8" ?>' . "\n";
  print '<WCS_Capabilities version="1.0.0" ';
  print 'xmlns="https://www.opengeospatial.org/standards/wcs" ';
  print 'xmlns:gml="https://www.opengis.net//gml" ';
  print 'xmlns:xlink="https://www.w3.org/1999/xlink">';
  print '
    <Service>
        <metadataLink xlink:type="simple" xlink:href="https://www.epa.gov/esd/land-sci/lcb/lcb_NCCA.html" metadataType="other" />
        <description>EPA NCCA Web Server 1.0.0</description>
        <name>EPA_NCCA_OGC_WCS_1.0.0</name>
        <label>EPA NCCA Web Server 1.0.0</label>
        <keywords>
            <keyword>EPA</keyword>
            <keyword>NCCA</keyword>
            <keyword>interoperability</keyword>
        </keywords>
        <responsibleParty>
            <individualName>Todd Plessel</individualName>
            <organisationName>EPA Vislab</organisationName>
            <contactInfo>
                <onlineResource xlink:type="simple" xlink:href="mailto:plessel.todd@epa.gov" />
            </contactInfo>
        </responsibleParty>
        <fees>NONE</fees>
        <accessConstraints>NONE</accessConstraints>
    </Service>
    <Capability>
        <Request>
            <GetCapabilities>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/NCCAserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/NCCAserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </GetCapabilities>
            <DescribeCoverage>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/NCCAserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/NCCAserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </DescribeCoverage>
            <GetCoverage>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/NCCAserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/NCCAserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </GetCoverage>
        </Request>
        <Exception>
            <Format>text/xml; charset="utf-8"</Format>
        </Exception>
    </Capability>
    <ContentMetadata version="1.0.0">';
  print "\n";

  my $variable_count = @metadata;
  my $region_count = @regions;

  for ( my $this_region = 0; $this_region < $region_count; ++$this_region ) {
    my $region_name = $regions[ $this_region ]->{ name };
    my $west = $regions[ $this_region ]->{ west };
    my $east = $regions[ $this_region ]->{ east };
    my $south = $regions[ $this_region ]->{ south };
    my $north = $regions[ $this_region ]->{ north };

    for ( my $variable = 0; $variable < $variable_count; ++$variable ) {
      my $name = $metadata[ $variable ]->{ name };

      if ( $name ne '?' ) {
        my $units = $metadata[ $variable ]->{ units };
        my $description = $metadata[ $variable ]->{ description };
        print "        <CoverageOfferingBrief>\n";
        print "            <name>$region_name.$name</name>\n";
        print "            <label>$name($units)</label>\n";
        print "            <description>$description</description>\n";
        print '            <lonLatEnvelope srsName="WGS84(DD)">';
        print "\n";
        print "                <gml:pos>$west $south</gml:pos>\n";
        print "                <gml:pos>$east $north</gml:pos>\n";
        print "            </lonLatEnvelope>\n";
        print "        </CoverageOfferingBrief>\n";
        print "            <keywords>\n";
        print "                <keyword>Domain:Meteorology</keyword>\n";
        print "                <keyword>Dataset:SURF_MET</keyword>\n";
        print "                <keyword>Platform:Network</keyword>\n";
        print "                <keyword>Instrument:Unknown</keyword>\n";
        print "                <keyword>Method:Point</keyword>\n";
        print "                <keyword>DataType:Point</keyword>\n";
        print "                <keyword>Distributor:DataFed</keyword>\n";
        print "                <keyword>Originator:PSWC</keyword>\n";
        print "                <keyword>TimeRes:Hour</keyword>\n";
        print "                <keyword>Vertical:Surface</keyword>\n";
        print "                <keyword>TopicCategory:climatologyMeteorologyAtmosphere</keyword>\n";
        print "                <keyword>Parameter:$name</keyword>\n";
        print "                <keyword>Units:$units</keyword>\n";
        print "                <type>TBD</type>\n";
        print "            </keywords>\n";
      }
    }
  }

  print "    </ContentMetadata>\n";
  print "</WCS_Capabilities>\n";
}



# Print web server coverage description metadata.

sub print_coverage_description {
  print '<?xml version="1.0" encoding="UTF-8" ?>';
  print '<CoverageDescription version="1.0.0" ';
  print 'xmlns="https://www.opengeospatial.org/standards/wcs" ';
  print 'xmlns:gml="https://www.opengis.net/gml" ';
  print 'xmlns:xlink="https://www.w3.org/1999/xlink">';
  print "\n";

  my $variable_count = @metadata;
  my $region_count = @regions;

  for ( my $this_region = 0; $this_region < $region_count; ++$this_region ) {
    my $region_name = $regions[ $this_region ]->{ name };
    my $west = $regions[ $this_region ]->{ west };
    my $east = $regions[ $this_region ]->{ east };
    my $south = $regions[ $this_region ]->{ south };
    my $north = $regions[ $this_region ]->{ north };

    for ( my $variable = 0; $variable < $variable_count; ++$variable ) {
      my $name = $metadata[ $variable ]->{ name };

      if ( $name ne '?' ) {
        my $units = $metadata[ $variable ]->{ units };
        my $description = $metadata[ $variable ]->{ description };

        if ( $coverage eq '' || $coverage eq $name ) {
          print "    <CoverageOffering>\n";
          print "        <name>$region_name.$name</name>\n";
          print "        <label>$name($units)</label>\n";
          print "        <description>$description</description>\n";
          print "        <domainSet>\n";
          print "            <spatialDomain>\n";
          print '                <gml:Envelope srsName="WGS84(DD)">';
          print "\n";
          print "                    <gml:pos>$west $south</gml:pos>\n";
          print "                    <gml:pos>$east $north</gml:pos>\n";
          print "                </gml:Envelope>\n";
          print "            </spatialDomain>\n";
          print "            <temporalDomain>\n";
          print "                <timePeriod>\n";
          print "                    <beginPosition>19980730";
          print "T00:00:00Z</beginPosition>\n";
          print "                    <timeResolution>PT1Y</timeResolution>\n";
          print "                </timePeriod>\n";
          print "            </temporalDomain>\n";
          print "        </domainSet>\n";
          print "        <rangeSet>\n";
          print "            <RangeSet>\n";
          print "                <name>$name</name>\n";
          print "                <label>$name($units)</label>\n";
          print "                <description>$description</description>";
          print '
                  <nullValues>
                      <singleValue>-99</singleValue>
                  </nullValues>
              </RangeSet>
          </rangeSet>
          <supportedCRSs>
              <requestResponseCRSs>CRS:84</requestResponseCRSs>
              <nativeCRSs>CRS:84</nativeCRSs>
          </supportedCRSs>
          <supportedFormats>
              <formats>ASCII</formats>
          </supportedFormats>
          <supportedInterpolations>
              <interpolationMethod>mean mode</interpolationMethod>
          </supportedInterpolations>
      </CoverageOffering>
';

        }
      }
    }
  }

  print "</CoverageDescription>\n";
}



# Parse URL parameters into variables.

sub parse_url {
  use CGI qw/ untaint /;     # Load Safe untainting CGI routines.
  $CGI::DISABLE_UPLOADS = 1; # Disable uploads.
  $CGI::POST_MAX = 1024;     # Limit posts to 1024 bytes.
  my $query = new CGI;       # Parse QUERY_STRING.
  %ENV = ();                 # Unset all environment variables.
  my @names = $query->param; # Extract names of parameters.
  my $count = @names;
  my $result = 0;
  debug( "@names\n$count" );

  for ( my $parameter = 0; $parameter < $count; ++$parameter) {
    $_ = $names[ $parameter ];                # $_ is tainted.
    s/[^A-Za-z]/_/go;                         # Untaint $_.
    my $option = $_;                          # $option is untainted.
    $_ = $query->param( $option );            # $_ is tainted.
    s/[^\w\-.,:\/]/_/go;                      # Untaint $_.
    my $value = $_;                           # $value is untainted.
    my $lowercase_option = lc( $option );
    my $lowercase_value  = lc( $value );
    debug( "$lowercase_option $lowercase_value" );

    if ( $parsers{ $lowercase_option } ) {
      $result = $parsers{ $lowercase_option }->( $lowercase_value );
    } else {
      print STDERR "\nInvalid option: '$option'\n";
      $result = 0;
    }

    if ( ! $result ) {
      $parameter = $count; # Finish looping.
    }
  }

  $result = $result && required_options_specified();
  return $result;
}



# Parse service option.

sub parse_service_option {
  my $value = shift;
  my $result = parse_option( $service, $value, 'SERVICE', 'wcs' );
  return $result;
}



# Parse version option.

sub parse_version_option {
  my $value = shift;
  my $result = parse_option( $version, $value, 'VERSION', '1.0.0' );
  return $result;
}



# Parse request option.

sub parse_request_option {
  my $value = shift;
  my $result = parse_option( $request, $value, 'REQUEST',
                             'getcoverage getcapabilities describecoverage' );
  return $result;
}



# Parse coverage option. Set region and coverage_index.

sub parse_coverage_option {
  my $value = shift;
  my $result = 0;
  $region = '';
  $coverage_index = -1;

  if ( $coverage ne '' ) {
    print STDERR "\nRedundant COVERAGE option: '$value'\n";
  } else {
    $coverage = $value;
    my @parts = split( /\./, $coverage );
    my $part_count = @parts;

    if ( $part_count == 2 ) {
      my $region_count = @regions;

      for ( my $this_region = 0; $region eq '' && $this_region < $region_count;
            ++$this_region ) {
        my $region_name = $regions[ $this_region ]->{ name };

        if ( $parts[ 0 ] eq $region_name ) {
          $region = $parts[ 0 ];
        }
      }

      if ( $region ne '' ) {
        my $coverage_variable = $parts[ 1 ];
        my $variable_count = @metadata;

        for ( my $variable = 0;
              $coverage_index < 0 && $variable < $variable_count;
              ++$variable ) {
          my $name = $metadata[ $variable ]->{ name };

          if ( $name eq $coverage_variable ) {
            $coverage_index = $variable;
            $result = 1;
          }
        }
      }
    }

    if ( ! $result ) {
      print STDERR "\nInvalid COVERAGE option: '$value'\n";
    }
  }

  return $result;
}



# Parse format option:

sub parse_format_option {
  my $value = shift;
  my $result = parse_option( $format, $value, 'FORMAT', 'ascii' );
  return $result;
}



# Parse time option.

sub parse_time_option {
  my $value = shift;
  my $result = 0;

  if ( $time ne '' ) {
    print STDERR "\nRedundant TIME option: '$value'\n";
  } else {
    $time = $value;
    my $is_valid = is_valid_time( $time );

    if ( ! $is_valid ) {
      print STDERR "\nInvalid TIME option: '$value'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse bbox option.

sub parse_bbox_option {
  my $value = shift;
  my $result = 0;

  if ( $bbox ne '' ) {
    print STDERR "\nRedundant BBOX option: '$value'\n";
  } else {
    $bbox = $value;
    @bounds = split( /,/, $bbox );
    my $bounds_count = @bounds;

    if ( $bounds_count != 4 && $bounds_count != 6 ) {
      print STDERR "\nInvalid bbox option: '$value'\n";
    } elsif ( ! in_range( $bounds[ 0 ], -180.0, 180.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 0 ]'\n";
    } elsif ( ! in_range( $bounds[ 1 ], -90.0, 90.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 1 ]'\n";
    } elsif ( ! in_range( $bounds[ 2 ], $bounds[ 0 ], 180.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 2 ]'\n";
    } elsif ( ! in_range( $bounds[ 3 ], $bounds[ 1 ], 90.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 3 ]'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Check that all required 'options' have been specified:

sub required_options_specified {
  my $result = 0;

  if ( $service eq '' ) {
    print STDERR "\nMissing option: 'SERVICE'\n";
  } elsif ( $version eq '' ) {
    print STDERR "\nMissing option: 'VERSION'\n";
  } elsif ( $request eq '' ) {
    print STDERR "\nMissing option: 'REQUEST'\n";
  } elsif ( $request eq 'getcoverage' ) {

    if ( $format eq '' ) {
      print STDERR "\nMissing option: 'FORMAT'\n";
    } elsif ( $time eq '' ) {
      print STDERR "\nMissing option: 'TIME'\n";
    } elsif ( $bbox eq '' ) {
      print STDERR "\nMissing option: 'BBOX'\n";
    } elsif ( $coverage eq '' ) {
      print STDERR "\nMissing option: 'COVERAGE'\n";
    } else {
      $result = 1;
    }
  } else {
    $result = 1;
  }

  return $result;
}


# Compute starting_timestamp and hours.
# inputs:  $time = '2015-07-14t00:00:00z/2015-07-16t23:59:59z'
# outputs: $yyyymmdd_start = 20150714
# outputs: $yyyymmdd_end   = 20150716

sub compute_time_range {
  $yyyymmdd_start =
    substr( $time, 0, 4 ) .
    substr( $time, 5, 2 ) .
    substr( $time, 8, 2 );
  $yyyymmdd_end = $yyyymmdd_start;

  my $ending_time = index( $time, '/' );

  if ( $ending_time != -1 ) {
    ++$ending_time;
    $yyyymmdd_end =
      substr( $time, $ending_time, 4 ) .
      substr( $time, $ending_time + 5, 2 ) .
      substr( $time, $ending_time + 8, 2 );
  }
}



# Extract data subset from *.csv files into $temp_file_name.
# Return sorted array of
# timestamp longitude latitude station value station_name
# for all stations in bbox reporting value within time-range.
# my $result = extract_subset();

sub extract_subset {
  my $result = 0;
  my $count = 0;
  my $input_file_name = $input_file_name_template;
  $input_file_name =~ s/REGION/$region/g;

  if ( open my $input_file, '<', $input_file_name ) {
  
    # Read entire input data file into memory:

    debug( "reading data file $input_file_name" );
    my @data_lines = <$input_file>;
    close $input_file;
    $count = @data_lines;
    debug( "read $count data lines" );
    debug( "start/end dates: $yyyymmdd_start $yyyymmdd_end" );

    # Extract subset of data lines:

    my $subset_data_lines = '';
    my $variable = $metadata[ $coverage_index ]->{ name };
    my $units = $metadata[ $coverage_index ]->{ units };
    my $column = $metadata[ $coverage_index ]->{ column };
    my $analyte_name = $metadata[ $coverage_index ]->{ analyte_name };
    my $analyte_name_column =
      $metadata[ $coverage_index ]->{ analyte_name_column };
    my $previous_site_name = '';
    my $lonmin = $bounds[ 0 ];
    my $latmin = $bounds[ 1 ];
    my $lonmax = $bounds[ 2 ];
    my $latmax = $bounds[ 3 ];
    debug( "coverage_index = $coverage_index" );
    debug( "$variable, $analyte_name, $analyte_name_column, $column, $units" );

    for ( my $line = 1; $line < $count; ++$line ) {
      my @data_line = split( /,/, $data_lines[ $line ] );
      my $columns = @data_line;

      if ( $columns >= 15 &&
           $data_line[  0 ] ne '' &&
           $data_line[  1 ] ne '' &&
           $data_line[  2 ] ne '' &&
           $data_line[  3 ] ne '' &&
           $data_line[  4 ] ne '' &&
           $data_line[  5 ] ne '' &&
           $data_line[  6 ] ne '' &&
           $data_line[  7 ] ne '' &&
           $data_line[  8 ] ne '' &&
           $data_line[  9 ] ne '' &&
           $data_line[ 10 ] ne '' &&
           $data_line[ 11 ] ne '' &&
           $data_line[ 12 ] ne '' &&
           $data_line[ 13 ] ne '' &&
           $data_line[ 14 ] ne '' ) {
        $data_line[ $columns - 1 ] =~ s/\v//g; # Remove \r\n.
        my $longitude = $data_line[ 5 ];
        my $latitude  = $data_line[ 6 ];

        if ( in_range( $longitude, $lonmin, $lonmax ) &&
             in_range( $latitude,  $latmin, $latmax ) ) {
          my $yyyy_mm_dd = $data_line[ 1 ]; # E.g., 2015-07-14.
          my $yyyymmdd = $yyyy_mm_dd;
          $yyyymmdd =~ s/-//g; # E.g., 20150714.

          if ( $variable eq 'station' || $variable eq 'uid' ) {
            my $site_name = $data_line[ 0 ];

            if ( $site_name ne $previous_site_name ) {
              $previous_site_name = $site_name;
              my $uid       = $data_line[ 3 ];
              my $estcode   = $data_line[ 4 ];
              my $site_description = "$site_name;$uid;ESTCODE:$estcode";
              $subset_data_lines .=
                sprintf "%d\t%9.4lf\t%9.4lf\t%s\t%s\n",
                    $yyyymmdd, $longitude, $latitude, $uid,
                    $site_description;
            }
          } else {

            if ( in_range( $yyyymmdd, $yyyymmdd_start, $yyyymmdd_end ) &&
                 $analyte_name eq $data_line[ $analyte_name_column ] &&
                 $data_line[ $column ] >= 0.0 ) {
              my $site_name = $data_line[ 0 ];
              my $uid       = $data_line[ 3 ];
              my $estcode   = $data_line[ 4 ];
              my $visit     = $data_line[ 2 ];
              my $depth     = $data_line[ 7 ];

              if ( $depth > 0.0 ) {
                $depth = $depth * -1.0;
              }

              my $measure   = $data_line[ $column ];
              my $lrl       = $data_line[ 11 ];
              my $mdl       = $data_line[ 12 ];
              my $method    = $data_line[ 13 ];
              my $nars_flag = $data_line[ 14 ];
              my $site_description = "$site_name;$uid;ESTCODE:$estcode;" .
                "lrl:$lrl;mdl:$mdl;flag:$nars_flag;method:$method";
              $subset_data_lines .=
                sprintf
                  "%sT00:00:00-0000\t" .
                  "%11.6lf\t%11.6lf\t%7.1lf\t%s\t%9.6lf\t%s\n",
                  $yyyy_mm_dd, $longitude, $latitude, $depth,
                  $uid, $measure, $site_description;
            }
          }
        }
      }
    }

    # Output the subset of data lines:

    if ( $count ) {
      my @sorted_subset = sort split( /\n/, $subset_data_lines );
      $count = @sorted_subset;

      if ( $count ) {
        print "$count\n"; # Print number of data lines to follow.

        # Print header line:

        if ( $variable eq 'station' || $variable eq 'uid' ) {
          print "start(yyyymmdd)\tlongitude(deg)\tlatitude(deg)" .
                "\tstation_id(-)\tstation_name(-)\n";
        } else {
          print "timestamp(UTC)\tlongitude(deg)\tlatitude(deg)" .
                "\tdepth(m)\tstation_id(-)\t$variable($units)" .
                "\tstation_name(-)\n";
        }

        # Print data lines:

        for ( my $i = 0; $i < $count; ++$i ) {
          print "$sorted_subset[ $i ]\n";
        }

        $result = 1;
      }
    }
  }

  return $result;
}




############################### HELPER ROUTINES ##############################



# debug( message );

sub debug {
  my $message = shift;

  if ( $debugging ) {
    print STDERR "\n$message\n";
####print STDOUT "\n$message\n";
  }
}



# Execute command and echo its output to STDOUT. E.g., execute_command( 'ls' );

sub execute_command {
  my $command = shift;
  my $result = 0;
  my $the_pipe = 0;

  # Untaint command (match expression is arbitrary as far as -T is concerned):

  if ( $command =~ m#^(/[\w-]+/[\w -/.;:,>'@|]+)$# ) {
    $command = $1; # Re-assign first match, which is enough to satisfy -T.
    debug( "$0 executing command = $command" );
    %ENV = (); # Unset all environment variables prior to popen.
    # Complicated, supposedly safer way to open a readable pipe to command:
    my $pid = open( the_pipe, "-|" );

    if ( ! defined( $pid ) ) {
      die "Couldn't open pipe to subprocess";
    } elsif ( $pid ) { # Parent process.

      while ( <the_pipe> ) {
        print;
      }

      close( the_pipe ) or die $!;
      $result = ! $?;
    } else { # Child process.
      exec( $command ) or die "can't exec program: $!";
    }
  } else {
    print STDERR "\n$0: '$command' contains invalid characters.\n";
  }

  return $result;
}



# my $result = parse_option( $option, $value, $option_name, $valid_values );
# my $result = parse_option( $variable, $value, 'COVERAGE', 'ozone pm25' );

sub parse_option {
  my ( $option, $value, $option_name, $valid_values ) = @_;
  my $result = 0;

  if ( $option ne '' ) {
    print STDERR "\nRedundant $option_name option: '$value'\n";
  } else {
    $result = index( " $valid_values ", " $value " ) != -1;

    if ( $result ) {
      $_[ 0 ] = $value;
    } else {
      print STDERR "\nInvalid $option_name option: '$value'\n";
    }
  }

  return $result;
}



# my $ok = in_range( $value, $minimum, $maximum );

sub in_range {
  my ( $value, $minimum, $maximum ) = @_;
  my $result = $value >= $minimum && $value <= $maximum;
  return $result;
}



# my $is_valid = is_valid_time( '2001-08-26t20:00:00z/2001-08-27t23:59:59z' );

sub is_valid_time {
  my $time = shift;
  my $result = 0;
  my $length = length( $time );

  if ( $length == 41 ) {
    $result = is_valid_time( substr( $time, 0, 20 ) );
    $result = $result && substr( $time, 20, 1 ) eq '/';
    $result = $result && is_valid_time( substr( $time, 21, 20 ) );
    $result = $result && substr( $time, 0, 20 ) le substr( $time, 21, 20 );
  } elsif ( $length == 20 ) {
    my $year   = substr( $time, 0, 4 );
    my $month  = substr( $time, 5, 2 );
    my $day    = substr( $time, 8, 2 );
    my $hour   = substr( $time, 11, 2 );
    my $minute = substr( $time, 14, 2 );
    my $second = substr( $time, 17, 2 );
    $result = in_range( $year, 1900, 3000 );
    $result = $result && in_range( $month, 1, 12 );
    $result = $result && in_range( $day, 1, days_in_month( $year, $month ) );
    $result = $result && in_range( $hour, 0, 23 );
    $result = $result && in_range( $minute, 0, 59 );
    $result = $result && in_range( $second, 0, 59 );
    $result = $result && substr( $time, 4, 1 ) eq '-';
    $result = $result && substr( $time, 7, 1 ) eq '-';
    $result = $result && substr( $time, 10, 1 ) eq 't';
    $result = $result && substr( $time, 13, 1 ) eq ':';
    $result = $result && substr( $time, 16, 1 ) eq ':';
    $result = $result && substr( $time, 19, 1 ) eq 'z';
  }

  return $result;
}



# my $leap = is_leap_year( $year );

sub is_leap_year {
  my $year = shift;
  my $result = $year % 4 == 0 && ( $year % 100 != 0 || $year % 400 == 0 );
  return $result;
}



# my $days = days_in_month( $year, $month );

sub days_in_month {
  my $year  = shift;
  my $month = shift;

  # 30 days hath September, April, June and November...

  my @days_per_month = ( 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 );
  my $result = $days_per_month[ $month - 1 ];

  if ( $month == 2 ) {

    if ( is_leap_year( $year ) ) {
      ++$result;
    }
  }

  return $result;
}




