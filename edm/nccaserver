#!/usr/bin/perl -wT

##############################################################################
# PURPOSE: nccaserver - Serve NCCA (National Coastal Condition Assessment)
#          ground station data, subsetted by date/time range, variable, and
#          longitude-latitude box, in ASCII, XDR, NetCDF-COARDS, and
#          NetCDF-IOAPI formats for use by other programs (e.g., via curl).
# NOTES:   Server is WCS-compliant:
#          https://www.opengeospatial.org/standards/wcs
#          https://datafed.net/xs/OpenGIS/wcs/1.0.0/
#          and modeled after a similar webserver application:
#          https://webapps.datafed.net/ogc_EPA.wsfl
#
#          Example usage:
#
#          curl --silent 'https://ofmpub.epa.gov/rsig/rsigserver?\
#                    SERVICE=wcs&\
#                    VERSION=1.0.0&\
#                    REQUEST=GetCoverage&\
#                    COVERAGE=ncca.chlorophyll_a&\
#                    TIME=2002-07-08T00:00:00Z/2002-07-10T23:59:59Z&\
#                    BBOX=-155,50,-150,62&\
#                    FORMAT=ascii'
#
# HISTORY: 2017-08-08 plessel.todd@epa.gov 1-919-541-5500
#
# STATUS:  unreviewed tested
##############################################################################


use strict;
package main;
$| = 1; # Turn off output buffering so messages appear in correct order.
alarm( 3600 ); # Kill process after 1 hour. Legitimate usage could be an hour!
# Restrict PATH and ENV. (But before popen, ENV is cleared!)
delete @ENV{ 'PATH', 'IFS', 'CDPATH', 'ENV', 'BASH_ENV' };


############################## TUNABLE CONSTANTS #############################


my $debugging = 0; # 1 = print debug messages to STDERR logs/error_log.

# Server where this program is installed:

my $server_path = 'https://YOUR_WEBSERVER_HOST/cgi-bin';

# Internal EPA server where the data and subset program are installed:

my $directory = '/data/land_use'; # Contains data file.
my $input_file_name = "$directory/ncca_water_quality_1999_2010.csv";

# Query string parsing routine dispatch table:

my %parsers = (
  'service'       => \&parse_service_option,
  'version'       => \&parse_version_option,
  'request'       => \&parse_request_option,
  'coverage'      => \&parse_coverage_option,
  'time'          => \&parse_time_option,
  'bbox'          => \&parse_bbox_option,
  'format'        => \&parse_format_option,
  'level'         => \&parse_level_option
);

# Webserver content types for each output format:

my %content_types = (
  'ascii' => 'text/plain'
);

# Full URL path to this program:

my @pathed_program_parts = split( /\//, $0 );
my $program_name = $pathed_program_parts[ @pathed_program_parts - 1 ];
my $program = "$server_path/$program_name";


################################## VARIABLES #################################


# Parsed from the URL query string:

my $service  = ''; # wcs.
my $version  = ''; # 1.0.0.
my $request  = ''; # getcapabilities or describecoverage or getcoverage.
my $coverage = ''; # no2.
my $format   = ''; # xdr, ascii, netcdf.
my $time     = ''; # E.g., 2001-08-29t00:00:00z/2001-08-30t23:59:59z.
my $bbox     = ''; # E.g., -90,28,-80,32,0,0.
my $level    = ''; # bottom, mid, surface

# Derived from the above parsed values:

my $yyyyddd_start = 0; # E.g., 2005360.
my $yyyyddd_end   = 0; # E.g., 2005365.
my @bounds = ();
my $coverage_units  = ''; # mgN/L.
my $coverage_index = 0; # 0-based index into metadata that matches coverage.

# head -1 /data/land_use/ncca_water_quality_1999_2010.csv \
# | tr ',' '\n' | awk '{ printf "%3d %s\n", NR -1, $0}'
#  0 SITE_ID
#  1 SITE_ID orig
#  2 Publication_date
#  3 VISNUM
#  4 Col_loc
#  5 site_visnum
#  6 Site_Visnum_Layer
#  7 SAMPYEAR
#  8 Col_Date
#  9 Day_of_year
# 10 Latitude
# 11 Longitude
# 12 REGION
# 13 SUBREGIONS
# 14 STATE
# 15 STATION_DEPTH (m)
# 16 SECCHI_MEAN (m)
# 17 Temp (oC)
# 18 Sal (psu)
# 19 DO (mg/L)
# 20 pH
# 21 TSS (mg/L)
# 22 CHLA (ug/L)
# 23 DIN (mg N/L)
# 24 DIP (mg P/L)
# 25 TN (mgN/L)
# 26 TP (mg P/L)
# 27 DIN/DIP (Molar)
# 28 TN/TP (Molar)
# 29 NH3 (mgN/L)
# 30 NO3NO2 (mgN/L)
# 31 NO2 (mgN/L)
# 32 NO3 (mg N/L)
# 33 TSS QA
# 34 SECCHI_MEAN QA
# 35 CHLA QACODE
# 36 DIN QA
# 37 DIP QA
# 38 TN QACODE
# 39 QA TP
# 40 QA NH3
# 41 QA NO3NO2
# 42 QA NO2
# 43 QA NO3

my @metadata = (
  {
    'name' => 'station',
    'units' => '-',
    'description' => 'Station ID.',
    'column' => 0, # 0-based.
  },
  {
    'name' => 'chlorophyll_a',
    'units' => 'ug/L',
    'description' => 'Chlorophyll-a concentration.',
    'column' => 22,
    'qa_column' => 35
  },
  {
    'name' => 'dissolved_oxygen',
    'units' => 'mg/L',
    'description' => 'Dissolved oxygen.',
    'column' => 19
  },
  {
    'name' => 'dissolved_inorganic_nitrogen',
    'units' => 'mgN/L',
    'description' =>
      'Dissolved inorganic nitrogen concentration (NO3 + NO2 + NH3).',
    'column' => 23,
    'qa_column' => 36
  },
  {
    'name' => 'dissolved_inorganic_phosphorus',
    'units' => 'mgP/L',
    'description' =>
      'Dissolved inorganic phosphorus concentration ' .
      '(aka ortho-phosphate or soluable reactive phosphorus).',
    'column' => 24,
    'qa_column' => 37
  },
  {
    'name' => 'di_nitrogen_phosphorus_ratio',
    'units' => 'mol/L',
    'description' =>
      'Molar ratio of DIN/DIP; concentration = 0.001 mg/L was used in ' .
      'calculation when DIN or DIP result was reported as less than detection ' .
      'limit.',
    'column' => 27,
    'qa_column' => '36,37'
  },
  {
    'name' => 'total_nitrogen',
    'units' => 'mgN/L',
    'description' =>
      'Dissolved total nitrogen concentration.',
    'column' => 25,
    'qa_column' => 38
  },
  {
    'name' => 'total_phosphorus',
    'units' => 'mgP/L',
    'description' =>
      'Dissolved total phosphorus concentration.',
    'column' => 26,
    'qa_column' => 39
  },
  {
    'name' => 'total_nitrogen_phosphorus_ratio',
    'units' => 'mol/L',
    'description' =>
      'Molar ratio of TN/TP; concentration = 0.001 mg/L was used in ' .
      'calculation when TN or TP result was reported as less than detection ' .
      'limit.',
    'column' => 28,
    'qa_column' => '36,37'
  },
  {
    'name' => 'nh3',
    'units' => 'mgN/L',
    'description' =>
      'Ammonium concentration; equivalent designations: ammonia or NH4.',
    'column' => 29,
    'qa_column' => 40
  },
  {
    'name' => 'no2',
    'units' => 'mgN/L',
    'description' => 'Nitrite concentration.',
    'column' => 31,
    'qa_column' => 42
  },
  {
    'name' => 'no3',
    'units' => 'mgN/L',
    'description' => 'Nitrate concentration.',
    'column' => 32,
    'qa_column' => 43
  },
  {
    'name' => 'no2_no3',
    'units' => 'mgN/L',
    'description' =>
      'NO2 + NO3 (nitrite + nitrate) concentration; ' .
      'designates that lab measured and reported results of undifferentiated ' .
      'analysis.',
    'column' => 30,
    'qa_column' => 41
  },
  {
    'name' => 'ph',
    'units' => 'pH',
    'description' => 'Acidity/alkalinity.',
    'column' => 20
  },
  {
    'name' => 'salinity',
    'units' => 'PSU',
    'description' => 'Salinity.',
    'column' => 18
  },
  {
    'name' => 'suspended_solids',
    'units' => 'mg/L',
    'description' => 'Total suspended solids concentration.',
    'column' => 21,
    'qa_column' => 33
  },
  {
    'name' => 'secchi_disk_depth',
    'units' => 'm',
    'description' => 'Depth that a Secchi disk becomes invisible.',
    'column' => 16,
    'qa_column' => 34
  },
  {
    'name' => 'temperature',
    'units' => 'C',
    'description' => 'Water temperature.',
    'column' => 17
  }
);

################################## ROUTINES ##################################


main();


sub main {
  my $result = 0;

  if ( ! parse_url() ) {
    print "Content-type: text/plain; charset=iso-8859-1\n\n"; # For webserver
  } elsif ( $request eq 'getcapabilities' ) {
    print "Content-type: text/xml; charset=iso-8859-1\n\n"; # For webserver
    print_capabilities();
    $result = 1;
  } elsif ( $request eq 'describecoverage' ) {
    print "Content-type: text/xml; charset=iso-8859-1\n\n"; # For webserver
    print_coverage_description();
    $result = 1;
  } elsif ( $request eq 'getcoverage' ) {
    print "Content-type: $content_types{ $format }; charset=iso-8859-1\n\n";
    compute_time_range();
    $result = extract_subset();
  }

  $result = 1 - $result; # UNIX: zero is success, non-zero is failure.
  debug( "exit result = $result" );
  exit $result;
}



# Print web server capabilities metadata.

sub print_capabilities {
  print '<?xml version="1.0" encoding="UTF-8" ?>' . "\n";
  print '<WCS_Capabilities version="1.0.0" ';
  print 'xmlns="https://www.opengeospatial.org/standards/wcs" ';
  print 'xmlns:gml="https://www.opengis.net//gml" ';
  print 'xmlns:xlink="https://www.w3.org/1999/xlink">';
  print '
    <Service>
        <metadataLink xlink:type="simple" xlink:href="https://www.epa.gov/esd/land-sci/lcb/lcb_NCCA.html" metadataType="other" />
        <description>EPA NCCA Web Server 1.0.0</description>
        <name>EPA_NCCA_OGC_WCS_1.0.0</name>
        <label>EPA NCCA Web Server 1.0.0</label>
        <keywords>
            <keyword>EPA</keyword>
            <keyword>NCCA</keyword>
            <keyword>interoperability</keyword>
        </keywords>
        <responsibleParty>
            <individualName>Todd Plessel</individualName>
            <organisationName>EPA Vislab</organisationName>
            <contactInfo>
                <onlineResource xlink:type="simple" xlink:href="mailto:plessel.todd@epa.gov" />
            </contactInfo>
        </responsibleParty>
        <fees>NONE</fees>
        <accessConstraints>NONE</accessConstraints>
    </Service>
    <Capability>
        <Request>
            <GetCapabilities>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/NCCAserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/NCCAserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </GetCapabilities>
            <DescribeCoverage>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/NCCAserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/NCCAserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </DescribeCoverage>
            <GetCoverage>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/NCCAserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/NCCAserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </GetCoverage>
        </Request>
        <Exception>
            <Format>text/xml; charset="utf-8"</Format>
        </Exception>
    </Capability>
    <ContentMetadata version="1.0.0">';
  print "\n";

  my $variable_count = @metadata;

  for ( my $variable = 0; $variable < $variable_count; ++$variable ) {
    my $name = $metadata[ $variable ]->{ name };

    if ( $name ne '?' ) {
      my $units = $metadata[ $variable ]->{ units };
      my $description = $metadata[ $variable ]->{ description };
      print "        <CoverageOfferingBrief>\n";
      print "            <name>$name</name>\n";
      print "            <label>$name($units)</label>\n";
      print "            <description>$description</description>\n";
      print '            <lonLatEnvelope srsName="WGS84(DD)">';
      print "\n";
      print "                <gml:pos>-180 -90</gml:pos>\n";
      print "                <gml:pos>180 90</gml:pos>\n";
      print "            </lonLatEnvelope>\n";
      print "        </CoverageOfferingBrief>\n";
      print "            <keywords>\n";
      print "                <keyword>Domain:Meteorology</keyword>\n";
      print "                <keyword>Dataset:SURF_MET</keyword>\n";
      print "                <keyword>Platform:Network</keyword>\n";
      print "                <keyword>Instrument:Unknown</keyword>\n";
      print "                <keyword>Method:Point</keyword>\n";
      print "                <keyword>DataType:Point</keyword>\n";
      print "                <keyword>Distributor:DataFed</keyword>\n";
      print "                <keyword>Originator:PSWC</keyword>\n";
      print "                <keyword>TimeRes:Hour</keyword>\n";
      print "                <keyword>Vertical:Surface</keyword>\n";
      print "                <keyword>TopicCategory:climatologyMeteorologyAtmosphere</keyword>\n";
      print "                <keyword>Parameter:$name</keyword>\n";
      print "                <keyword>Units:$units</keyword>\n";
      print "                <type>TBD</type>\n";
      print "            </keywords>\n";
    }
  }

  print "    </ContentMetadata>\n";
  print "</WCS_Capabilities>\n";
}



# Print web server coverage description metadata.

sub print_coverage_description {
  print '<?xml version="1.0" encoding="UTF-8" ?>';
  print '<CoverageDescription version="1.0.0" ';
  print 'xmlns="https://www.opengeospatial.org/standards/wcs" ';
  print 'xmlns:gml="https://www.opengis.net/gml" ';
  print 'xmlns:xlink="https://www.w3.org/1999/xlink">';
  print "\n";

  my $variable_count = @metadata;

  for ( my $variable = 0; $variable < $variable_count; ++$variable ) {
    my $name = $metadata[ $variable ]->{ name };

    if ( $name ne '?' ) {
      my $units = $metadata[ $variable ]->{ units };
      my $description = $metadata[ $variable ]->{ description };

      if ( $coverage eq '' || $coverage eq $name ) {
        print "    <CoverageOffering>\n";
        print "        <name>$name</name>\n";
        print "        <label>$name($units)</label>\n";
        print "        <description>$description</description>\n";
        print "        <domainSet>\n";
        print "            <spatialDomain>\n";
        print '                <gml:Envelope srsName="WGS84(DD)">';
        print "\n";
        print "                    <gml:pos>-180 -90</gml:pos>\n";
        print "                    <gml:pos>180 90</gml:pos>\n";
        print "                </gml:Envelope>\n";
        print "            </spatialDomain>\n";
        print "            <temporalDomain>\n";
        print "                <timePeriod>\n";
        print "                    <beginPosition>19980730";
        print "T00:00:00Z</beginPosition>\n";
        print "                    <timeResolution>PT1Y</timeResolution>\n";
        print "                </timePeriod>\n";
        print "            </temporalDomain>\n";
        print "        </domainSet>\n";
        print "        <rangeSet>\n";
        print "            <RangeSet>\n";
        print "                <name>$name</name>\n";
        print "                <label>$name($units)</label>\n";
        print "                <description>$description</description>";
        print '
                <nullValues>
                    <singleValue>-99</singleValue>
                </nullValues>
            </RangeSet>
        </rangeSet>
        <supportedCRSs>
            <requestResponseCRSs>CRS:84</requestResponseCRSs>
            <nativeCRSs>CRS:84</nativeCRSs>
        </supportedCRSs>
        <supportedFormats>
            <formats>ASCII</formats>
        </supportedFormats>
        <supportedInterpolations>
            <interpolationMethod>mean mode</interpolationMethod>
        </supportedInterpolations>
    </CoverageOffering>
';

      }
    }
  }

  print "</CoverageDescription>\n";
}



# Parse URL parameters into variables.

sub parse_url {
  use CGI qw/ untaint /;     # Load Safe untainting CGI routines.
  $CGI::DISABLE_UPLOADS = 1; # Disable uploads.
  $CGI::POST_MAX = 1024;     # Limit posts to 1024 bytes.
  my $query = new CGI;       # Parse QUERY_STRING.
  %ENV = ();                 # Unset all environment variables.
  my @names = $query->param; # Extract names of parameters.
  my $count = @names;
  my $result = 0;
  debug( "@names\n$count" );

  for ( my $parameter = 0; $parameter < $count; ++$parameter) {
    $_ = $names[ $parameter ];                # $_ is tainted.
    s/[^A-Za-z]/_/go;                         # Untaint $_.
    my $option = $_;                          # $option is untainted.
    $_ = $query->param( $option );            # $_ is tainted.
    s/[^\w\-.,:\/]/_/go;                      # Untaint $_.
    my $value = $_;                           # $value is untainted.
    my $lowercase_option = lc( $option );
    my $lowercase_value  = lc( $value );
    debug( "$lowercase_option $lowercase_value" );

    if ( $parsers{ $lowercase_option } ) {
      $result = $parsers{ $lowercase_option }->( $lowercase_value );
    } else {
      print STDERR "\nInvalid option: '$option'\n";
      $result = 0;
    }

    if ( ! $result ) {
      $parameter = $count; # Finish looping.
    }
  }

  $result = $result && required_options_specified();
  return $result;
}



# Parse service option.

sub parse_service_option {
  my $value = shift;
  my $result = parse_option( $service, $value, 'SERVICE', 'wcs' );
  return $result;
}



# Parse version option.

sub parse_version_option {
  my $value = shift;
  my $result = parse_option( $version, $value, 'VERSION', '1.0.0' );
  return $result;
}



# Parse request option.

sub parse_request_option {
  my $value = shift;
  my $result = parse_option( $request, $value, 'REQUEST',
                             'getcoverage getcapabilities describecoverage' );
  return $result;
}



# Parse coverage option.

sub parse_coverage_option {
  my $value = shift;
  my $result = 0;

  if ( $coverage ne '' ) {
    print STDERR "\nRedundant COVERAGE option: '$value'\n";
  } else {
    my $variable_count = @metadata;

    for ( my $variable = 0; $coverage eq '' && $variable < $variable_count;
          ++$variable ) {
      my $name = $metadata[ $variable ]->{ name };

      if ( $name ne '?' ) {

        if ( $name eq $value ) {
          $coverage = $name;
          $coverage_units = $metadata[ $variable ]->{ units };
          $coverage_index = $variable;
          $result = 1;
        }
      }
    }

    if ( ! $result ) {
      print STDERR "\nInvalid COVERAGE option: '$value'\n";
    }
  }

  return $result;
}



# Parse format option:

sub parse_format_option {
  my $value = shift;
  my $result = parse_option( $format, $value, 'FORMAT', 'ascii' );
  return $result;
}



# Parse time option.

sub parse_time_option {
  my $value = shift;
  my $result = 0;

  if ( $time ne '' ) {
    print STDERR "\nRedundant TIME option: '$value'\n";
  } else {
    $time = $value;
    my $is_valid = is_valid_time( $time );

    if ( ! $is_valid ) {
      print STDERR "\nInvalid TIME option: '$value'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse bbox option.

sub parse_bbox_option {
  my $value = shift;
  my $result = 0;

  if ( $bbox ne '' ) {
    print STDERR "\nRedundant BBOX option: '$value'\n";
  } else {
    $bbox = $value;
    @bounds = split( /,/, $bbox );
    my $bounds_count = @bounds;

    if ( $bounds_count != 4 && $bounds_count != 6 ) {
      print STDERR "\nInvalid bbox option: '$value'\n";
    } elsif ( ! in_range( $bounds[ 0 ], -180.0, 180.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 0 ]'\n";
    } elsif ( ! in_range( $bounds[ 1 ], -90.0, 90.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 1 ]'\n";
    } elsif ( ! in_range( $bounds[ 2 ], $bounds[ 0 ], 180.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 2 ]'\n";
    } elsif ( ! in_range( $bounds[ 3 ], $bounds[ 1 ], 90.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 3 ]'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}


# Parse level option:

sub parse_level_option {
  my $value = shift;
  my $result = parse_option( $level, $value, 'LEVEL', 'bottom mid surface');
  return $result;
}



# Check that all required 'options' have been specified:

sub required_options_specified {
  my $result = 0;

  if ( $service eq '' ) {
    print STDERR "\nMissing option: 'SERVICE'\n";
  } elsif ( $version eq '' ) {
    print STDERR "\nMissing option: 'VERSION'\n";
  } elsif ( $request eq '' ) {
    print STDERR "\nMissing option: 'REQUEST'\n";
  } elsif ( $request eq 'getcoverage' ) {

    if ( $format eq '' ) {
      print STDERR "\nMissing option: 'FORMAT'\n";
    } elsif ( $time eq '' ) {
      print STDERR "\nMissing option: 'TIME'\n";
    } elsif ( $bbox eq '' ) {
      print STDERR "\nMissing option: 'BBOX'\n";
    } elsif ( $coverage eq '' ) {
      print STDERR "\nMissing option: 'COVERAGE'\n";
    } else {
      $result = 1;
    }
  } else {
    $result = 1;
  }

  return $result;
}


# Compute starting_timestamp and hours.
# inputs:  $time = '2001-08-26t00:00:00z/2001-08-31t23:59:59z'
# outputs: $yyyyddd_start = 2005355
# outputs: $yyyyddd_end   = 2005365

sub compute_time_range {
  my $yyyy1 = 0;
  my $ddd1 = 0;
  my $hh1 = 0;
  convert_timestamp( $time, $yyyy1, $ddd1, $hh1 );

  $yyyyddd_start = int( $yyyy1 * 1000 + $ddd1 );
  $yyyyddd_end = $yyyyddd_start;

  my $ending_time = index( $time, '/' );

  if ( $ending_time != -1 ) {
    ++$ending_time;
    my $yyyy2 = 0;
    my $ddd2  = 0;
    my $hh2   = 0;
    convert_timestamp( substr( $time, $ending_time ), $yyyy2, $ddd2, $hh2 );
    $yyyyddd_end = int( $yyyy2 * 1000 + $ddd2 );
  }
}



# Extract data subset from *.csv files into $temp_file_name.
# Return sorted array of
# timestamp longitude latitude station value
# for all stations in bbox reporting value within time-range.
# my $result = extract_subset();

sub extract_subset {
  my $result = 0;
  my $count = 0;

  if ( open my $input_file, '<', $input_file_name ) {
  
    # Read entire input data file into memory:

    debug( "reading data file $input_file_name" );
    my @data_lines = <$input_file>;
    close $input_file;
    $count = @data_lines;
    debug( "read $count data lines" );
    debug( "$yyyyddd_start $yyyyddd_end" );

    # Extract subset of data lines:

    my $subset_data_lines = '';
    my $data_column = $metadata[ $coverage_index ]->{ column };
    my @qa_columns = ();
    my $qa_columns_count = 0;
    my $previous_site_id = '';
    my $lonmin = $bounds[ 0 ];
    my $latmin = $bounds[ 1 ];
    my $lonmax = $bounds[ 2 ];
    my $latmax = $bounds[ 3 ];
    my $level_tag = '_' . uc( $level );

    if ( defined( $metadata[ $coverage_index ]->{ qa_column } ) ) {
      @qa_columns = split( /,/, $metadata[ $coverage_index ]->{ qa_column } );
      $qa_columns_count = @qa_columns;
    }

    for ( my $line = 1; $line < $count; ++$line ) {
      my @data_line = split( /,/, $data_lines[ $line ] );
      my $columns = @data_line;

      if ( $columns >= 44 &&
           $data_line[  0 ] ne '' &&
           $data_line[  7 ] ne '' &&
           $data_line[  8 ] ne '' &&
           $data_line[  9 ] ne '' &&
           $data_line[ 10 ] ne '' &&
           $data_line[ 11 ] ne '' &&
           $data_line[ 13 ] ne '' ) {
        $data_line[ $columns - 1 ] =~ s/\v//g; # Remove \r\n.
        my $longitude = $data_line[ 11 ];
        my $latitude  = $data_line[ 10 ];

        if ( in_range( $longitude, $lonmin, $lonmax ) &&
             in_range( $latitude,  $latmin, $latmax ) ) {
          my $yyyy = $data_line[ 7 ];
          my $ddd  = $data_line[ 9 ];
          my $yyyyddd = int( $yyyy * 1000 + $ddd );

          if ( $coverage eq 'station' ||
               in_range( $yyyyddd, $yyyyddd_start, $yyyyddd_end ) ) {
            my $mm_dd_yyyy = $data_line[ 8 ];
            my @parts = split( /\//, $mm_dd_yyyy );
            my $part_count = @parts;

            if ( $part_count == 3 ) {
              my $mm = $parts[ 0 ];
              my $dd = $parts[ 1 ];
              my $site_id = $data_line[ 0 ];

              if ( $coverage eq 'station' ) {

                if ( $site_id ne $previous_site_id ) {
                  $previous_site_id = $site_id;
                  my $subregions = $data_line[ 13 ];
                  my $site_description = $site_id . ' ' . $subregions;
                  my $site_number = numeric_site_id ( $site_id );
                  $subset_data_lines .=
                    sprintf "%04d%02d%02d\t%9.4lf\t%9.4lf\t%s\t%s\n",
                      $yyyy, $mm, $dd, $longitude, $latitude, $site_number,
                      $site_description;
                }
              } elsif ( $data_line[ $data_column ] ne '' &&
                        $data_line[ $data_column ] >= 0.0 &&
                        $data_line[ 2 ] ne '' &&
                        $data_line[ 6 ] ne '' &&
                        $data_line[ 15 ] ne '' &&
                        $data_line[ 15 ] >= 0.0 &&
                        ( $level eq '' ||
                          index( $data_line[ 6 ], $level_tag ) > 0 ) ) {
                my $site_number = numeric_site_id ( $site_id );
                my $measure = $data_line[ $data_column ];
                my $depth   = -1.0 * $data_line[ 15 ];
                my $pub_date = $data_line[ 2 ];
                my $site_visnum_layer = $data_line[ 6 ];
                my $subregions = $data_line[ 13 ];

                # Adjust depth to where sample was taken:

                if ( index( $site_visnum_layer, '_SURFACE' ) != -1 ) {
                  $depth = -0.1; # 10cm below the surface.
                } elsif ( index( $site_visnum_layer, '_MID-WATER' ) != -1 ) {
                  $depth *= 0.5; # Halfway to the bottom.
                }

                my $site_description =
                  "$site_id $site_visnum_layer $subregions Pub:$pub_date";

                for ( my $q = 0;
                      $q < $qa_columns_count &&
                      $qa_columns[$q] < $columns &&
                      defined( $data_line[$qa_columns[$q]] );
                      ++$q ) {
                  $site_description .= " $data_line[$qa_columns[$q]]";
                }

                $subset_data_lines .=
                  sprintf
                    "%04d-%02d-%02dT00:00:00-0000\t" .
                    "%11.6lf\t%11.6lf\t%7.1lf\t%s\t%9.6lf\t%s\n",
                    $yyyy, $mm, $dd, $longitude, $latitude, $depth,
                    $site_number, $measure, $site_description;
              }
            }
          }
        }
      }
    }

    # Output the subset of data lines:

    if ( $count ) {
      my @sorted_subset = sort split( /\n/, $subset_data_lines );
      $count = @sorted_subset;

      if ( $count ) {
        print "$count\n"; # Print number of data lines to follow.

        # Print header line:

        if ( $coverage eq 'station' ) {
          print "start(yyyymmdd)\tlongitude(deg)\tlatitude(deg)" .
                "\tstation_id(-)\tstation_name(-)\n";
        } else {
          print "timestamp(UTC)\tlongitude(deg)\tlatitude(deg)" .
                "\tdepth(m)\tstation_id(-)\t$coverage($coverage_units)" .
                "\tstation_name(-)\n";
        }

        # Print data lines:

        for ( my $i = 0; $i < $count; ++$i ) {
          print "$sorted_subset[ $i ]\n";
        }

        $result = 1;
      }
    }
  }

  return $result;
}



# Convert string station id to an integer id < LONGLONG_MAX.
# my $site_number = numeric_site_id( $site_id );

sub numeric_site_id {
  my $site_id = shift;
  $site_id =~ s/~[a-z,A-Z,0-9]//; # Delete non-letters and non-digits.
  my $length = length( $site_id );
  my $result = '';

  for ( my $i = 0; $i < $length; ++$i ) {
    my $c = substr( $site_id, $i, 1 );

    if ( $c =~ /[0-9]/ ) { # Is digit:
      $result .= $c;
    } elsif ( $c =~ /[a-z,A-Z]/ ) { # If alpha-numeric:
      $c =~ tr/[a-z]/[A-Z]/; # Capitalize all letters.
      my $value = ord( $c ) - ord( 'A' ) + 1;
      $result .= $value;
    }
  }

  $length = length( $result );

  if ( $length > 19 ) { # If too long, truncate but end with last 4 digits:
    $result = substr( $result, 0, 15 ) . substr( $result, $length - 4, 4 );
  }

  if ( $result gt '9223372036854775807' ) { # Ensure it is a long long.
    $result = '8' . substr( $result, 1, 18 ); # Change 1st digit.
  }

  return $result;
}



############################### HELPER ROUTINES ##############################



# debug( message );

sub debug {
  my $message = shift;

  if ( $debugging ) {
    print STDERR "\n$message\n";
####print STDOUT "\n$message\n";
  }
}



# Execute command and echo its output to STDOUT. E.g., execute_command( 'ls' );

sub execute_command {
  my $command = shift;
  my $result = 0;
  my $the_pipe = 0;

  # Untaint command (match expression is arbitrary as far as -T is concerned):

  if ( $command =~ m#^(/[\w-]+/[\w -/.;:,>'@|]+)$# ) {
    $command = $1; # Re-assign first match, which is enough to satisfy -T.
    debug( "$0 executing command = $command" );
    %ENV = (); # Unset all environment variables prior to popen.
    # Complicated, supposedly safer way to open a readable pipe to command:
    my $pid = open( the_pipe, "-|" );

    if ( ! defined( $pid ) ) {
      die "Couldn't open pipe to subprocess";
    } elsif ( $pid ) { # Parent process.

      while ( <the_pipe> ) {
        print;
      }

      close( the_pipe ) or die $!;
      $result = ! $?;
    } else { # Child process.
      exec( $command ) or die "can't exec program: $!";
    }
  } else {
    print STDERR "\n$0: '$command' contains invalid characters.\n";
  }

  return $result;
}



# my $result = parse_option( $option, $value, $option_name, $valid_values );
# my $result = parse_option( $variable, $value, 'COVERAGE', 'ozone pm25' );

sub parse_option {
  my ( $option, $value, $option_name, $valid_values ) = @_;
  my $result = 0;

  if ( $option ne '' ) {
    print STDERR "\nRedundant $option_name option: '$value'\n";
  } else {
    $result = index( " $valid_values ", " $value " ) != -1;

    if ( $result ) {
      $_[ 0 ] = $value;
    } else {
      print STDERR "\nInvalid $option_name option: '$value'\n";
    }
  }

  return $result;
}



# my $ok = in_range( $value, $minimum, $maximum );

sub in_range {
  my ( $value, $minimum, $maximum ) = @_;
  my $result = $value >= $minimum && $value <= $maximum;
  return $result;
}



# my $is_valid = is_valid_time( '2001-08-26t20:00:00z/2001-08-27t23:59:59z' );

sub is_valid_time {
  my $time = shift;
  my $result = 0;
  my $length = length( $time );

  if ( $length == 41 ) {
    $result = is_valid_time( substr( $time, 0, 20 ) );
    $result = $result && substr( $time, 20, 1 ) eq '/';
    $result = $result && is_valid_time( substr( $time, 21, 20 ) );
    $result = $result && substr( $time, 0, 20 ) le substr( $time, 21, 20 );
  } elsif ( $length == 20 ) {
    my $year   = substr( $time, 0, 4 );
    my $month  = substr( $time, 5, 2 );
    my $day    = substr( $time, 8, 2 );
    my $hour   = substr( $time, 11, 2 );
    my $minute = substr( $time, 14, 2 );
    my $second = substr( $time, 17, 2 );
    $result = in_range( $year, 1900, 3000 );
    $result = $result && in_range( $month, 1, 12 );
    $result = $result && in_range( $day, 1, days_in_month( $year, $month ) );
    $result = $result && in_range( $hour, 0, 23 );
    $result = $result && in_range( $minute, 0, 59 );
    $result = $result && in_range( $second, 0, 59 );
    $result = $result && substr( $time, 4, 1 ) eq '-';
    $result = $result && substr( $time, 7, 1 ) eq '-';
    $result = $result && substr( $time, 10, 1 ) eq 't';
    $result = $result && substr( $time, 13, 1 ) eq ':';
    $result = $result && substr( $time, 16, 1 ) eq ':';
    $result = $result && substr( $time, 19, 1 ) eq 'z';
  }

  return $result;
}



# convert_timestamp( $timestamp, $yyyy, $ddd, $hour );

sub convert_timestamp {
  my ( $timestamp, $yyyy, $ddd, $hour ) = @_;
  my $timestamp_length = length( $timestamp );
  my $month = 0;
  my $day   = 0;
  $yyyy = 0;
  $ddd  = 0;
  $hour = 0;

  if ( $timestamp_length >= 10 ) {
    $yyyy  = substr( $timestamp, 0, 4 );
    $month = substr( $timestamp, 5, 2 );
    $day   = substr( $timestamp, 8, 2 );

    if ( $timestamp_length >= 13 ) {
      $hour = substr( $timestamp, 11, 2 );
    }

    my $t = sprintf( "%04d-%02d-%02dt%02d:00:00z", $yyyy, $month, $day, $hour);

    if ( is_valid_time( $t ) ) {

      for ( my $mo = 1; $mo < $month; ++$mo ) {
        $ddd += days_in_month( $yyyy, $mo );
      }

      $ddd += $day;
    }
  }

  $_[ 1 ] = $yyyy;
  $_[ 2 ] = $ddd;
  $_[ 3 ] = $hour;
}



# my $leap = is_leap_year( $year );

sub is_leap_year {
  my $year = shift;
  my $result = $year % 4 == 0 && ( $year % 100 != 0 || $year % 400 == 0 );
  return $result;
}



# my $days = days_in_month( $year, $month );

sub days_in_month {
  my $year  = shift;
  my $month = shift;

  # 30 days hath September, April, June and November...

  my @days_per_month = ( 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 );
  my $result = $days_per_month[ $month - 1 ];

  if ( $month == 2 ) {

    if ( is_leap_year( $year ) ) {
      ++$result;
    }
  }

  return $result;
}




