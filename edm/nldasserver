#!/usr/bin/perl -wT

##############################################################################
# PURPOSE: nldasserver - Serve NASA Goddard NLDAS met model 0.125-degree
#          gridded hourly met data subsetted by time, variable and
#          longitude-latitude box, in binary format for use by
#          EstuaryDataMapper (via rsigserver).
#
# NOTES:   Server is WCS-compliant:
#          https://www.opengeospatial.org/standards/wcs
#          https://datafed.net/xs/OpenGIS/wcs/1.0.0/
#          and modeled after a similar webserver application:
#          https://webapps.datafed.net/ogc_EPA.wsfl
#
#          Connects to a subset of external web services listed here:
#          https://hydro1.gesdisc.eosdis.nasa.gov/thredds/catalog/NLDAS_FORA0125_H.002/catalog.html
#          Contact: mary.c.greene@nasa.gov or gsfc-help-disc@lists.nasa.gov
#          Registered user:
#          email = plessel.todd@epa.gov, login_id = rsig, pw = Rsig4444
#          Example usage:
#
#          wget -q -T 0 -O - 'https://ofmpub.epa.gov/rsig/nldasserver?\
#                     SERVICE=wcs&\
#                     VERSION=1.0.0&\
#                     REQUEST=GetCoverage&\
#                     COVERAGE=precipitation&\
#                     TIME=2016-07-29T00:00:00Z/2016-07-30T23:59:59Z&\
#                     BBOX=-76,39,-75,40&\
#                     FORMAT=bin'
#
# HISTORY: 2016-08-02 plessel.todd@epa.gov 1-919-541-5500
#
# STATUS:  unreviewed tested
##############################################################################


use strict;
package main;
$| = 1; # Turn off output buffering so messages appear in correct order.
alarm( 3600 ); # Kill process after 1 hour. Legitimate usage could be an hour!
# Restrict PATH and ENV.
delete @ENV{ 'PATH', 'IFS', 'CDPATH', 'ENV', 'BASH_ENV' };


############################## TUNABLE CONSTANTS #############################


my $debugging = 0; # 1 = print debug messages to STDERR logs/error_log.

my $list_file = "/data/tmp/nldas_input_files.$$";
my $temp_file_format = "/data/tmp/nldas_%04d.$$.nc";
my $bindir = '/rsig/current/code/bin/Linux.x86_64';
my $converter = "$bindir/convertNLDAS";

# Note: As of August 1, 2016, NASA Goddard requires user registration
# (username = rsig, password = Rsig4444)
# application authorization (app = NASA GESDISC DATA ARCHIVE)
# and use of netrc and cookie files (only transient per this script)
# for their web services to work.

my $temp_netrc_file = "/data/tmp/nldas_netrc.$$";
my $netrc_content =
  'machine urs.earthdata.nasa.gov login rsig password Rsig4444';
my $temp_cookie_file = "/data/tmp/nldas_cookie.$$";

my $curl_command =
  "$bindir/curl -k --silent --retry 0 -L --max-redirs 10 --tcp-nodelay " .
  "--max-time 3600 " .
  "--netrc-file $temp_netrc_file -c $temp_cookie_file -b $temp_cookie_file ";


# Server where this program is installed:

my $server_path = 'https://YOUR_WEBSERVER_HOST/cgi-bin';

# Query string parsing routine dispatch table:

my %parsers = (
  'service'  => \&parse_service_option,
  'version'  => \&parse_version_option,
  'request'  => \&parse_request_option,
  'coverage' => \&parse_coverage_option,
  'time'     => \&parse_time_option,
  'bbox'     => \&parse_bbox_option,
  'format'   => \&parse_format_option
);

# Webserver content types for each output format:

my %content_types = (
  'bin' => 'application/octet-stream'
);

# Full URL path to this program:

my @pathed_program_parts = split( /\//, $0 );
my $program_name = $pathed_program_parts[ @pathed_program_parts - 1 ];
my $program = "$server_path/$program_name";

# Metadata:
# name         - The COVERAGE= name used by this script.
# units        - Units for the parameter, e.g., mg/m3.
# min          - Minimum valid value.
# max          - Maximum valid value.
# start_date   - Earliest date of available data.
# description  - Parameter description.
# query        - template for remote query.
#
# For a list of all potentially available servers/datasets:
# Old: https://podaac-opendap.jpl.nasa.gov/opendap/allData/nldas/\
# L3/mapped/V4/daily/SCI/2013/090/Q2013090.L3m_DAY_SCI_V4.0_SSS_1deg.bz2.html
#
# New: https://hydro1.gesdisc.eosdis.nasa.gov/thredds/ncss/NLDAS_FORA0125_H.002/\
# 2016/183/NLDAS_FORA0125_H.A20160701.0000.002.grb?\
# var=Downward_Longwave_Radiation_Flux_surface\
# &var=Downward_Shortwave_Radiation_Flux_surface\
# &var=Pressure_surface&var=Specific_Humidity_height_above_ground\
# &var=Temperature_height_above_ground&var=u-component_of_wind_height_above_ground\
# &var=v-component_of_wind_height_above_ground\
# &var=Convec://hydro1.gesdisc.eosdis.nasa.govtive_Available_Potential_Energy_layer_between_two_pressure_difference_from_ground_layer\
# &var=Convective_Precipitation_surface_1_Hour_Accumulation\
# &var=Potential_Evaporation_surface_1_Hour_Accumulation\
# &var=Total_Precipitation_surface_1_Hour_Accumulation\
# &north=40&west=-76&east=-75&south=39\
# &disableProjSubset=on&horizStride=1\
# &time_start=2016-07-01T00%3A00%3A00Z\
# &time_end=2016-07-01T23%3A59%3A59Z\
# &timeStride=1&vertCoord=&addLatLon=true&accept=netcdf
#
# New 2025-03-12:
# https://hydro1.gesdisc.eosdis.nasa.gov/thredds/ncss/grid/NLDAS_aggregation/\
# NLDAS_FORA0125_H.2.0/NLDAS_FORA0125_H.2.0_Aggregation_YYYY.ncml?\
# accept=netcdf3&horizStride=1&addLatLon=true&timeStride=1&vertCoord=1\
# &time_start=2016-06-01T00:00:00Z&time_end=2016-06-01T23:59:59Z\
# &north=40&west=-76&east=-75&south=39\
# &var=Tair\
# &var=Qair\
# &var=Rainf\
# &var=Rainf_frac\
# &var=PSurf\
# &var=CAPE\
# &var=PotEvap\
# &var=LWdown\
# &var=SWdown\
# &var=Wind_E\
# &var=Wind_N
#
# NOTE: If var name changes then update convertNLDAS.c (table of variables)!

#https://hydro1.gesdisc.eosdis.nasa.gov/thredds/ncss/grid/NLDAS_FORA0125_H.002/2016/211/NLDAS_FORA0125_H.A20160729.1200.002.grb?var=Pressure_surface&spatial=bb&north=40&west=-100&east=-80&south=30&temporal=range&time_start=2016-07-29T12%3A00%3A00Z&time_end=2016-07-29T12%3A00%3A00Z&horizStride=&addLatLon=true

# Pre-2023:
#my $remote_query =
#  'https://hydro1.gesdisc.eosdis.nasa.gov/thredds/ncss/NLDAS_FORA0125_H.002/' .
#  'YYYY/DDD/NLDAS_FORA0125_H.AYYYYMMDD.HH00.002.grb?' .
#  '&disableProjSubset=on&horizStride=1&addLatLon=true&accept=netcdf' .
#  '&north=NORTH&west=WEST&east=EAST&south=SOUTH' .
#  '&var=';

# New as of 2023 also they changed the name of the variables lon lat to
# longitude latitude so convertNLDAS had to be changed:
#
#my $remote_query =
#  'https://hydro1.gesdisc.eosdis.nasa.gov/thredds/ncss/grid/NLDAS_FORA0125_H.002/' .
#  'YYYY/DDD/NLDAS_FORA0125_H.AYYYYMMDD.HH00.002.grb?' .
#  '&disableProjSubset=on&horizStride=1&addLatLon=true&accept=netcdf' .
#  '&north=NORTH&west=WEST&east=EAST&south=SOUTH' .
#  '&var=';

# New as of 2025-03-12:

my $remote_query =
  'https://hydro1.gesdisc.eosdis.nasa.gov/thredds/ncss/grid/NLDAS_aggregation/'.
  'NLDAS_FORA0125_H.2.0/NLDAS_FORA0125_H.2.0_Aggregation_YYYY.ncml?' .
  'accept=netcdf3&horizStride=1&addLatLon=true&timeStride=1&vertCoord=1' .
  '&time_start=YYYY-MM-DDTHH:00:00Z&time_end=YYYY-MM-DDTHH:59:59Z' .
  '&north=NORTH&west=WEST&east=EAST&south=SOUTH' .
  '&var=';


my @metadata = (
  # Each remote web service request streams a lon-lat gridded NetCDF file.
  #
  {
    'name' => 'precipitation',
    'units' => 'kg/m2',
    'min' => 0.0,
    'max' => 500.0,
    'start_date' => '1979-01-01',
    'description' =>
      'Modeled North American Land Data Assimilation System (NLDAS-2) ' .
      '1/8 degree hourly backward-accumulated precipitation (kg/m2).',
    #'parameter' => 'Total_Precipitation_surface_1_Hour_Accumulation'
    #'parameter' => 'Total_Precipitation_surface_Accumulation'
    'parameter' => 'Rainf'
  },
  {
    'name' => 'convective_precipitation',
    #'units' => 'kg/m2',
    'units' => '-',
    'min' => 0.0,
    #'max' => 500.0,
    'max' => 1.0,
    'start_date' => '1979-01-01',
    'description' =>
      'Modeled North American Land Data Assimilation System (NLDAS-2) ' .
      '1/8 degree hourly backward-accumulated ' .
      'fraction of total precipitation that is convective (-).',
    #'parameter' => 'Convective_Precipitation_surface_1_Hour_Accumulation'
    #'parameter' => 'Convective_Precipitation_surface_Accumulation'
    'parameter' => 'CRainf_frac'
  },
  {
    'name' => 'convective_available_potential_energy',
    'units' => 'J/kg',
    'min' => 0.0,
    'max' => 10000.0,
    'start_date' => '1979-01-01',
    'description' =>
      'Modeled North American Land Data Assimilation System (NLDAS-2) ' .
      '1/8 degree hourly instantaneous 180-0 hPa above ground convective ' .
      'available potential energy (J/kg).',
    'parameter' =>
      #'Convective_Available_Potential_Energy' .
      #'_layer_between_two_pressure_difference_from_ground_layer'
      'CAPE'
  },
  {
    'name' => 'long_wave_radiation_flux',
    'units' => 'W/m2',
    'min' => 0.0,
    'max' => 1500.0,
    'start_date' => '1979-01-01',
    'description' =>
      'Modeled North American Land Data Assimilation System (NLDAS-2) ' .
      '1/8 degree hourly instantaneous ' .
      'long-wave radiation downward flux (W/m2).',
    #'parameter' => 'Downward_Longwave_Radiation_Flux_surface'
    'parameter' => 'LWdown'
  },
  {
    'name' => 'short_wave_radiation_flux',
    'units' => 'W/m2',
    'min' => 0.0,
    'max' => 1500.0,
    'start_date' => '1979-01-01',
    'description' =>
      'Modeled North American Land Data Assimilation System (NLDAS-2) ' .
      '1/8 degree hourly instantaneous ' .
      'short-wave radiation downward flux (W/m2).',
    #'parameter' => 'Downward_Shortwave_Radiation_Flux_surface'
    'parameter' => 'SWdown'
  },
  {
    'name' => 'potential_evaporation',
    'units' => 'kg/m2',
    'min' => 0.0,
    'max' => 500.0,
    'start_date' => '1979-01-01',
    'description' =>
      'Modeled North American Land Data Assimilation System (NLDAS-2) ' .
      '1/8 degree hourly backwards-accumulated ' .
      'potential evaporation (kg/m2).',
    #'parameter' => 'Potential_Evaporation_surface_1_Hour_Accumulation'
    #'parameter' => 'Potential_Evaporation_surface_Accumulation'
    'parameter' => 'PotEvap'
  },
  {
    'name' => 'pressure',
    'units' => 'Pa',
    'min' => 50000.0,
    'max' => 150000.0,
    'start_date' => '1979-01-01',
    'description' =>
      'Modeled North American Land Data Assimilation System (NLDAS-2) ' .
      '1/8 degree hourly instantaneous ' .
      'surface pressure (Pa).',
    #'parameter' => 'Pressure_surface'
    'parameter' => 'PSurf'
  },
  {
    'name' => 'humidity',
    'units' => 'kg/kg',
    'min' => 0.0,
    'max' => 1.0,
    'start_date' => '1979-01-01',
    'description' =>
      'Modeled North American Land Data Assimilation System (NLDAS-2) ' .
      '1/8 degree hourly instantaneous ' .
      '2m above ground specific humidity (kg/kg).',
    #'parameter' => 'Specific_Humidity_height_above_ground'
    'parameter' => 'Qair'
  },
  {
    'name' => 'temperature',
    'units' => 'K',
    'min' => 173.0,
    'max' => 373.0,
    'start_date' => '1979-01-01',
    'description' =>
      'Modeled North American Land Data Assimilation System (NLDAS-2) ' .
      '1/8 degree hourly instantaneous ' .
      '2m above ground temperature (K).',
    #'parameter' => 'Temperature_height_above_ground'
    'parameter' => 'Tair'
  },
  {
    'name' => 'wind',
    'units' => 'm/s',
    'min' => -500.0,
    'max' => 500.0,
    'start_date' => '1979-01-01',
    'description' =>
      'Modeled North American Land Data Assimilation System (NLDAS-2) ' .
      '1/8 degree hourly instantaneous ' .
      '10m above ground 2D wind (m/s).',
    #'parameter' => ' .
      #'u-component_of_wind_height_above_ground,' .
      #'v-component_of_wind_height_above_ground'
    'parameter' => 'Wind_E,Wind_N'
  }
);


################################## VARIABLES #################################


# Parsed from the URL query string:

my $service  = ''; # wcs.
my $version  = ''; # 1.0.0.
my $request  = ''; # getcapabilities or describecoverage or getcoverage.
my $coverage = ''; # Saved until time has been parsed.
my $variable = ''; # o3, ...
my $format   = ''; # bin.
my $time     = ''; # E.g., 2001-08-29t00:00:00z/2001-08-31t23:59:59z.
my $bbox     = ''; # E.g., -90,28,-80,32,1,1. Where 1,1 means layer 1 only.

# Derived from the above parsed values:

my @bounds = split( /,/, '-180,-90,180,90' );
my $starting_timestamp = 0;  # yyyymmddhh, e.g., 2005082600.
my $hours              = 0;  # E.g., 5 days = 5 x 24 = 120.
my $ending_yyyymmdd    = 0;  # yyyymmdd, e.g., 20050826.
my $temp_files = ''; # newline-delimited sequence of temp files.

################################## ROUTINES ##################################


main();


sub main {
  my $result = 0;

  if ( ! parse_url() ) {
    print "Content-type: text/plain; charset=iso-8859-1\n\n"; # For webserver
  } elsif ( $request eq 'getcapabilities' ) {
    print "Content-type: text/xml; charset=iso-8859-1\n\n"; # For webserver
    print_capabilities();
    $result = 1;
  } elsif ( $request eq 'describecoverage' ) {
    print "Content-type: text/xml; charset=iso-8859-1\n\n"; # For webserver
    print_coverage_description();
    $result = 1;
  } elsif ( $request eq 'getcoverage' ) {
    compute_time_range();
    print "Content-type: $content_types{ $format }; charset=iso-8859-1\n\n";
    $result = execute_remote_queries();
    $result = $result && execute_converter();

    # Remove temp data files and list file:
    
    my @files = split( /\n/, $temp_files );
    my $count = @files;

    for ( my $index = 0; $index < $count; ++$index ) {
      debug( "unlink( '$files[$index]' )" );

      if ( $debugging == 0 ) {
        unlink( $files[$index] );
      }
    }

    debug( "unlink( '$list_file' )" );

    if ( $debugging == 0 ) {
      unlink( $list_file );
    }
  }

  $result = 1 - $result; # UNIX: zero is success, non-zero is failure.
  debug( "exit result = $result" );
  exit $result;
}



# Print web server capabilities metadata.

sub print_capabilities {
  print '<?xml version="1.0" encoding="UTF-8" ?>' . "\n";
  print '<WCS_Capabilities version="1.0.0" ';
  print 'xmlns="https://www.opengeospatial.org/standards/wcs" ';
  print 'xmlns:gml="https://www.opengis.net//gml" ';
  print 'xmlns:xlink="https://www.w3.org/1999/xlink">';
  print '
    <Service>
        <metadataLink xlink:type="simple" xlink:href=" https://www.epa.gov/rsig" metadataType="other" />
        <description>EPA ERDDAP Web Server 1.0.0</description>
        <name>EPA_ERDDAP_OGC_WCS_1.0.0</name>
        <label>EPA ERDDAP Web Server 1.0.0</label>
        <keywords>
            <keyword>EPA</keyword>
            <keyword>NLDAS</keyword>
            <keyword>interoperability</keyword>
        </keywords>
        <responsibleParty>
            <individualName>Todd Plessel</individualName>
            <organisationName>EPA Vislab</organisationName>
            <contactInfo>
                <onlineResource xlink:type="simple" xlink:href="mailto:plessel.todd@epa.gov" />
            </contactInfo>
        </responsibleParty>
        <fees>NONE</fees>
        <accessConstraints>NONE</accessConstraints>
    </Service>
    <Capability>
        <Request>
            <GetCapabilities>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/nldasserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/nldasserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </GetCapabilities>
            <DescribeCoverage>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/nldasserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/nldasserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </DescribeCoverage>
            <GetCoverage>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/nldasserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/nldasserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </GetCoverage>
        </Request>
        <Exception>
            <Format>text/xml; charset="utf-8"</Format>
        </Exception>
    </Capability>
    <ContentMetadata version="1.0.0">';
  print "\n";

  my $variable_count = @metadata;

  for ( my $variable = 0; $variable < $variable_count; ++$variable ) {
    my $name = $metadata[ $variable ]->{ name };

    if ( $name ne '?' ) {
      my $units = $metadata[ $variable ]->{ units };
      my $label = $name;
      my $description = $metadata[ $variable ]->{ description };
      print "        <CoverageOfferingBrief>\n";
      print "            <name>$name</name>\n";
      print "            <label>$label($units)</label>\n";
      print "            <description>$description</description>\n";
      print '            <lonLatEnvelope srsName="WGS84(DD)">';
      print "\n";
      print "                <gml:pos>-125 25</gml:pos>\n";
      print "                <gml:pos>-67 53</gml:pos>\n";
      print "            </lonLatEnvelope>\n";
      print "        </CoverageOfferingBrief>\n";
    }
  }

  print "    </ContentMetadata>\n";
  print "</WCS_Capabilities>\n";
}



# Print web server coverage description metadata.

sub print_coverage_description {
  print '<?xml version="1.0" encoding="UTF-8" ?>';
  print '<CoverageDescription version="1.0.0" ';
  print 'xmlns="https://www.opengeospatial.org/standards/wcs" ';
  print 'xmlns:gml="https://www.opengis.net/gml" ';
  print 'xmlns:xlink="https://www.w3.org/1999/xlink">';
  print "\n";

  my $variable_count = @metadata;

  for ( my $variable = 0; $variable < $variable_count; ++$variable ) {
    my $name = $metadata[ $variable ]->{ name };

    if ( $name ne '?' ) {
      my $units = $metadata[ $variable ]->{ units };
      my $description = $metadata[ $variable ]->{ description };

      if ( $coverage eq '' || $coverage eq $name ) {
        print "    <CoverageOffering>\n";
        print "        <name>$name</name>\n";
        print "        <label>$name($units)</label>\n";
        print "        <description>$description</description>\n";
        print "        <domainSet>\n";
        print "            <spatialDomain>\n";
        print '                <gml:Envelope srsName="WGS84(DD)">';
        print "\n";
        print "                    <gml:pos>-125 25</gml:pos>\n";
        print "                    <gml:pos>-67 53</gml:pos>\n";
        print "                </gml:Envelope>\n";
        print "            </spatialDomain>\n";
        print "            <temporalDomain>\n";
        print "                <timePeriod>\n";
        print "                    <beginPosition>20110824";
        print "T00:00:00Z</beginPosition>\n";
        print "                    <timeResolution>PT1D</timeResolution>\n";
        print "                </timePeriod>\n";
        print "            </temporalDomain>\n";
        print "        </domainSet>\n";
        print "        <rangeSet>\n";
        print "            <RangeSet>\n";
        print "                <name>$name</name>\n";
        print "                <label>$name($units)</label>\n";
        print "                <description>$description</description>";
        print '
                <nullValues>
                    <singleValue>-9999</singleValue>
                </nullValues>
            </RangeSet>
        </rangeSet>
        <supportedCRSs>
            <requestResponseCRSs>CRS:84</requestResponseCRSs>
            <nativeCRSs>CRS:84</nativeCRSs>
        </supportedCRSs>
        <supportedFormats>
            <formats>bin</formats>
        </supportedFormats>
        <supportedInterpolations>
            <interpolationMethod>none</interpolationMethod>
        </supportedInterpolations>
    </CoverageOffering>
';

      }
    }
  }

  print "</CoverageDescription>\n";
}



# Parse URL parameters into variables.

sub parse_url {
  use CGI qw/ untaint /;     # Load Safe untainting CGI routines.
  $CGI::DISABLE_UPLOADS = 1; # Disable uploads.
  $CGI::POST_MAX = 1024;     # Limit posts to 1024 bytes.
  my $query = new CGI;       # Parse QUERY_STRING.
  %ENV = ();                 # Unset all environment variables.
  my @names = $query->param; # Extract names of parameters.
  my $count = @names;
  my $result = 0;
  debug( "$program_name @names ($count)" );

  for ( my $parameter = 0; $parameter < $count; ++$parameter) {
    $_ = $names[ $parameter ];                # $_ is tainted.
    s/[^A-Za-z]/_/go;                         # Untaint $_.
    my $option = $_;                          # $option is untainted.
    $_ = $query->param( $option );            # $_ is tainted.
    s/[^\w\-.,:\/]/_/go;                      # Untaint $_.
    my $value = $_;                           # $value is untainted.
    my $lowercase_option = lc( $option );
    my $lowercase_value  = lc( $value );
    debug( "$lowercase_option $lowercase_value" );

    if ( $parsers{ $lowercase_option } ) {
      $result = $parsers{ $lowercase_option }->( $lowercase_value );
    } else {
      print STDERR "\nInvalid option: '$option'\n";
    }

    if ( ! $result ) {
      $parameter = $count; # Finish looping.
    }
  }

  $result = $result && required_options_specified();
  return $result;
}



# Parse service option.

sub parse_service_option {
  my $value = shift;
  my $result = parse_option( $service, $value, 'SERVICE', 'wcs' );
  return $result;
}



# Parse version option.

sub parse_version_option {
  my $value = shift;
  my $result = parse_option( $version, $value, 'VERSION', '1.0.0' );
  return $result;
}



# Parse request option.

sub parse_request_option {
  my $value = shift;
  my $result = parse_option( $request, $value, 'REQUEST',
                             'getcoverage getcapabilities describecoverage' );
  return $result;
}



# Parse format option:

sub parse_format_option {
  my $value = shift;
  my $result =
    parse_option( $format, $value, 'FORMAT', 'bin' );
  return $result;
}



# Parse coverage option.

sub parse_coverage_option {
  my $value = shift;
  my $result = 0;

  if ( $coverage ne '' ) {
    print STDERR "\nRedundant COVERAGE option: '$value'\n";
  } else {
    my $variable_count = @metadata;

    for ( my $variable = 0; $coverage eq '' && $variable < $variable_count;
          ++$variable ) {
      my $name = $metadata[ $variable ]->{ name };

      if ( $name ne '?' ) {

        if ( $name eq $value ) {
          $coverage = $name;
          $result = 1;
        }
      }
    }

    if ( ! $result ) {
      print STDERR "\nInvalid COVERAGE option: '$value'\n";
    }
  }

  return $result;
}



# Parse time option.

sub parse_time_option {
  my $value = shift;
  my $result = 0;

  if ( $time ne '' ) {
    print STDERR "\nRedundant TIME option: '$value'\n";
  } else {
    $time = $value;
    my $is_valid = is_valid_time( $time );

    if ( ! $is_valid ) {
      print STDERR "\nInvalid TIME option: '$value'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse bbox option.

sub parse_bbox_option {
  my $value = shift;
  my $result = 0;

  if ( $bbox ne '' ) {
    print STDERR "\nRedundant BBOX option: '$value'\n";
  } else {
    $bbox = $value;
    @bounds = split( /,/, $bbox );
    my $bounds_count = @bounds;

    if ( $bounds_count != 4 && $bounds_count != 6 ) {
      print STDERR "\nInvalid bbox option: '$value'\n";
    } elsif ( ! in_range( $bounds[ 0 ], -180.0, 180.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 0 ]'\n";
    } elsif ( ! in_range( $bounds[ 1 ], -90.0, 90.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 1 ]'\n";
    } elsif ( ! in_range( $bounds[ 2 ], $bounds[ 0 ], 180.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 2 ]'\n";
    } elsif ( ! in_range( $bounds[ 3 ], $bounds[ 1 ], 90.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 3 ]'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}


# Check that all required 'options' have been specified:

sub required_options_specified {
  my $result = 0;

  if ( $service eq '' ) {
    print STDERR "\nMissing option: 'SERVICE'\n";
  } elsif ( $version eq '' ) {
    print STDERR "\nMissing option: 'VERSION'\n";
  } elsif ( $request eq '' ) {
    print STDERR "\nMissing option: 'REQUEST'\n";
  } elsif ( $request eq 'getcoverage' ) {

    if ( $format eq '' ) {
      print STDERR "\nMissing option: 'FORMAT'\n";
    } elsif ( $time eq '' ) {
      print STDERR "\nMissing option: 'TIME'\n";
    } elsif ( $bbox eq '' ) {
      print STDERR "\nMissing option: 'BBOX'\n";
    } elsif ( $coverage eq '' ) {
      print STDERR "\nMissing option: 'COVERAGE'\n";
    } else {
      $result = 1;
    }
  } else {
    $result = 1;
  }

  return $result;
}



# Compute starting_timestamp and hours.
# inputs:  $time = '2001-08-26t00:00:00z/2001-08-31t23:59:59z'
# outputs: $starting_timestamp = 2005082600
#          $hours = 120

sub compute_time_range {
  my $yyyy1 = substr( $time, 0, 4 );
  my $mm1   = substr( $time, 5, 2 );
  my $dd1   = substr( $time, 8, 2 );
  my $hh1   = substr( $time, 11, 2 );
  my $i     = index( $time, '/' );

  $starting_timestamp = integer_timestamp( $yyyy1, $mm1, $dd1, $hh1 );
  $ending_yyyymmdd = $starting_timestamp / 100;
  $hours = 1;

  if ( $i != -1 ) {
    ++$i;
    my $yyyy2 = substr( $time, $i + 0, 4 );
    my $mm2   = substr( $time, $i + 5, 2 );
    my $dd2   = substr( $time, $i + 8, 2 );
    my $hh2   = substr( $time, $i + 11, 2 );
    my $yyyy  = $yyyy1;
    my $mm    = $mm1;
    my $dd    = $dd1;
    my $hh    = $hh1;
    my $previous_dd = $dd1;

    while ( integer_timestamp( $yyyy, $mm, $dd, $hh ) !=
            integer_timestamp( $yyyy2, $mm2, $dd2, $hh2 ) ) {
      increment_timestamp( $yyyy, $mm, $dd, $hh );

      if ( $dd ne $previous_dd ) {
        $previous_dd = $dd;
        $ending_yyyymmdd = $yyyy * 10000 + $mm * 100 + $dd;
      }

      ++$hours;
    }
  }
}



# Execute query of remote web service:

sub execute_remote_queries {
  my $result = 0;
  my $variable = lookup_variable( $coverage );
  my $variable_info = $metadata[ $variable ];
  my $start_date = $variable_info->{ start_date };
  my $yyyy   = substr( $starting_timestamp, 0, 4 );
  my $mm     = substr( $starting_timestamp, 4, 2 );
  my $dd     = substr( $starting_timestamp, 6, 2 );

  if ( "$yyyy-$mm-$dd" ge $start_date ) {

    # Create temporary netrc file required by external web server:

    open ( FH, "> $temp_netrc_file" ) or
      die "Couldn't open file $temp_netrc_file";
    print FH $netrc_content;
    close FH or die "Cannot close $temp_netrc_file: $!";

    my $west  = $bounds[ 0 ];
    my $south = $bounds[ 1 ];
    my $east  = $bounds[ 2 ];
    my $north = $bounds[ 3 ];
    my $parameter = $variable_info->{ parameter };

    my $hh = substr( $starting_timestamp, 8, 2 );
    my $hour = 0;

    # Query the remote web service for each requested hour (UGLY!):

    do {
      #my $ddd = sprintf( "%03d", day_of_year( $yyyy, $mm, $dd ) );
      #my $yyyymmdd_hh = sprintf( "%04d%02d%02d.%02d", $yyyy, $mm, $dd, $hh );
      my $mm0 = sprintf( "%02d", $mm );
      my $dd0 = sprintf( "%02d", $dd );
      my $hh0 = sprintf( "%02d", $hh );
      my $query = $remote_query . $parameter;
      $query =~ s/WEST/$west/g;
      $query =~ s/EAST/$east/g;
      $query =~ s/SOUTH/$south/g;
      $query =~ s/NORTH/$north/g;
      #$query =~ s/.AYYYYMMDD.HH/.A$yyyymmdd_hh/g;
      $query =~ s/YYYY/$yyyy/g;
      #$query =~ s/DDD/$ddd/g;
      $query =~ s/MM/$mm0/g;
      $query =~ s/DD/$dd0/g;
      $query =~ s/HH/$hh0/g;
      my $temp_file = sprintf( $temp_file_format, $hour );
      $temp_files .= "$temp_file\n";
      my $command = "$curl_command '$query' > $temp_file";
      $result = execute_command( $command ) || $result;
      increment_timestamp( $yyyy, $mm, $dd, $hh );
      ++$hour;
    } while ( $hour < $hours );

    # Remove temporary netrc and cookie files:

    debug( "unlink( '$temp_netrc_file' )" );
    debug( "unlink( '$temp_cookie_file' )" );
    
    if ( $debugging == 0 ) {
      unlink( $temp_netrc_file );
      unlink( $temp_cookie_file );
    }

    # Create list_file for subsetter to read:

    if ( $result ) {
      open ( FH, "> $list_file" ) or die "Couldn't open file $list_file";
      print FH $temp_files;
      close FH or die "Cannot close $list_file: $!";
    }
  }

  debug( "execute_remote_queries result = $result" );
  return $result;
}



# execute_converter

sub execute_converter {
  my $variable = lookup_variable( $coverage );
  my $variable_info = $metadata[ $variable ];
  my $name = $variable_info->{ name };
  my $units = $variable_info->{ units };
  my $min = $variable_info->{ min };
  my $max = $variable_info->{ max };
  my $command =
  "$converter $name $units $min $max $starting_timestamp 1 $hours $list_file";
  my $result = execute_command( $command );
  debug( "execute_converter result = $result" );
  $result = 1; # HACK: Ignore any failure for one of many files.
  return $result;
}



# Execute command and echo its output to STDOUT. E.g., execute_command( 'ls' );

sub execute_command {
  my $command = shift;
  my $result = 0;
  my $the_pipe = 0;

  # Untaint command (match expression is arbitrary as far as -T is concerned):

  if ( $command =~ m#^(/[\w-]+/[\w -/.,':?=&<>\[\]\(\)|]+)$# ) {
    $command = $1; # Re-assign first match, which is enough to satisfy -T.
    debug( "$0 executing command = $command" );
    %ENV = (); # Unset all environment variables prior to popen.
    # Complicated, supposedly safer way to open a readable pipe to command:
    my $pid = open( the_pipe, "-|" );

    if ( ! defined( $pid ) ) {
      die "Couldn't open pipe to subprocess";
    } elsif ( $pid ) { # Parent process.

      while ( <the_pipe> ) {
        print;
      }

      close( the_pipe );
      $result = ! $?;
    } else { # Child process.
      exec( $command ) or die "can't exec program: $!";
    }
  } else {
    print STDERR "\n$0: '$command' contains invalid characters.\n";
  }

  return $result;
}



# my $variable = lookup_variable( $coverage );

sub lookup_variable {
  my $result = -1;
  my $variable_count = @metadata;

  for ( my $variable = 0; $variable < $variable_count;
        ++$variable ) {
    my $name = $metadata[ $variable ]->{ name };

    if ( $coverage eq $name ) {
      $result = $variable;
      $variable = $variable_count; # Stop looping.
    }
  }

  return $result;
}




############################### HELPER ROUTINES ##############################



# debug( message );

sub debug {
  my $message = shift;

  if ( $debugging ) {
    print STDERR "\n$message\n";
####print STDOUT "\n$message\n";
  }
}



# my $result = parse_option( $option, $value, $option_name, $valid_values );
# my $result = parse_option( $variable, $value, 'COVERAGE', 'ozone pm25' );

sub parse_option {
  my ( $option, $value, $option_name, $valid_values ) = @_;
  my $result = 0;

  if ( $option ne '' ) {
    print STDERR "\nRedundant $option_name option: '$value'\n";
  } else {
    $result = index( " $valid_values ", " $value " ) != -1;

    if ( $result ) {
      $_[ 0 ] = $value;
    } else {
      print STDERR "\nInvalid $option_name option: '$value'\n";
    }
  }

  return $result;
}



# my $ok = in_range( $value, $minimum, $maximum );

sub in_range {
  my ( $value, $minimum, $maximum ) = @_;
  my $result = $value >= $minimum && $value <= $maximum;
  return $result;
}



# my $is_valid = is_valid_time( '2001-08-26t20:00:00z/2001-08-27t23:59:59z' );

sub is_valid_time {
  my $time = shift;
  my $result = 0;
  my $length = length( $time );

  if ( $length == 41 ) {
    $result = is_valid_time( substr( $time, 0, 20 ) );
    $result = $result && substr( $time, 20, 1 ) eq '/';
    $result = $result && is_valid_time( substr( $time, 21, 20 ) );
    $result = $result && substr( $time, 0, 20 ) le substr( $time, 21, 20 );
  } elsif ( $length == 20 ) {
    my $year   = substr( $time, 0, 4 );
    my $month  = substr( $time, 5, 2 );
    my $day    = substr( $time, 8, 2 );
    my $hour   = substr( $time, 11, 2 );
    my $minute = substr( $time, 14, 2 );
    my $second = substr( $time, 17, 2 );
    $result = in_range( $year, 1900, 3000 );
    $result = $result && in_range( $month, 1, 12 );
    $result = $result && in_range( $day, 1, days_in_month( $year, $month ) );
    $result = $result && in_range( $hour, 0, 23 );
    $result = $result && in_range( $minute, 0, 59 );
    $result = $result && in_range( $second, 0, 59 );
    $result = $result && substr( $time, 4, 1 ) eq '-';
    $result = $result && substr( $time, 7, 1 ) eq '-';
    $result = $result && substr( $time, 10, 1 ) eq 't';
    $result = $result && substr( $time, 13, 1 ) eq ':';
    $result = $result && substr( $time, 16, 1 ) eq ':';
    $result = $result && substr( $time, 19, 1 ) eq 'z';
  }

  return $result;
}



# increment_timestamp( $yyyy, $mm, $dd, $hh );

sub increment_timestamp {
  my ( $yyyy, $mm, $dd, $hh ) = @_;
  my $hours_per_day   = 23;
  my $months_per_year = 12;
  my $days_this_month = days_in_month( $yyyy, $mm );
  ++$hh;

  if ( $hh > $hours_per_day ) {
    $hh = 0;
    ++$dd;

    if ( $dd > $days_this_month ) {
      $dd = 1;
      ++$mm;

      if ( $mm > $months_per_year ) {
        $mm = 1;
        ++$yyyy;
      }
    }
  }

  $_[ 0 ] = $yyyy;
  $_[ 1 ] = $mm;
  $_[ 2 ] = $dd;
  $_[ 3 ] = $hh;
}



# my $yyyymmddhh = integer_timestamp( $yyyy, $mm, $dd, $hh );

sub integer_timestamp {
  my ( $yyyy, $mm, $dd, $hh ) = @_;
  my $result = int( $yyyy * 1000000 + $mm * 10000 + $dd * 100 + $hh );
  return $result;
}



# my $leap = is_leap_year( $year );

sub is_leap_year {
  my $year = shift;
  my $result = $year % 4 == 0 && ( $year % 100 != 0 || $year % 400 == 0 );
  return $result;
}



# my $ddd = day_of_year( $year, $month, $day );

sub day_of_year {
  my $year  = shift;
  my $month = shift;
  my $day   = shift;
  my $result = 0;

  for ( my $mm = 1; $mm < $month; ++$mm ) {
    my $days = days_in_month( $year, $mm );
    $result += $days;
  }

  $result += $day;
  return $result;
}



# my $days = days_in_month( $year, $month );

sub days_in_month {
  my $year  = shift;
  my $month = shift;

  # 30 days hath September, April, June and November...

  my @days_per_month = ( 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 );
  my $result = $days_per_month[ $month - 1 ];

  if ( $month == 2 ) {

    if ( is_leap_year( $year ) ) {
      ++$result;
    }
  }

  return $result;
}


