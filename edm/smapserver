#!/usr/bin/perl -wT

##############################################################################
# PURPOSE: smapserver - Serve NASA JPL SMAP satellite 1-degree gridded
#          daily compposite ocean salinity data subsetted by day and
#          longitude-latitude box,
#          in binary format for use by EstuaryDataMapper (via wget).
#
# NOTES:   Server is WCS-compliant:
#          https://www.opengeospatial.org/standards/wcs
#          https://datafed.net/xs/OpenGIS/wcs/1.0.0/
#          and modeled after a similar webserver application:
#          https://webapps.datafed.net/ogc_EPA.wsfl
#
#          Connects to external web services:
#          https://opendap.earthdata.nasa.gov/collections/C2208422957-POCLOUD/
#          granules/SMAP_L3_SSS_20150504_8DAYS_V5.0.dmr.html
#          Contact: support@opendaap.org
#
#          Example usage:
#
#          wget -q -T 0 -O - 'https://ofmpub.epa.gov/rsig/smapserver?\
#                     SERVICE=wcs&\
#                     VERSION=1.0.0&\
#                     REQUEST=GetCoverage&\
#                     COVERAGE=daily_salinity&\
#                     TIME=2016-04-18T00:00:00Z/2013-04-18T23:59:59Z&\
#                     BBOX=-80,30,-60,50&\
#                     FORMAT=bin'
#
# HISTORY: 2024-02-28 plessel.todd@epa.gov 1-919-541-5500
#
# STATUS:  inchoate
##############################################################################


use strict;
package main;
$| = 1; # Turn off output buffering so messages appear in correct order.
alarm( 3600 ); # Kill process after 1 hour. Legitimate usage could be an hour!
# Restrict PATH and ENV.
delete @ENV{ 'PATH', 'IFS', 'CDPATH', 'ENV', 'BASH_ENV' };


############################## TUNABLE CONSTANTS #############################


my $debugging = 0; # 1 = print debug messages to STDERR logs/error_log.

my $token_file_name = '/data/TEMPO/TOKEN';
my $temp_dir = '/data/tmp';
my $list_file = "$temp_dir/smap_list_file.$$";
my $temp_txt_file = "$temp_dir/smap_$$.txt";
my $bindir = '/rsig/current/code/bin/Linux.x86_64';
my $fdd = "$bindir/fdd if=$temp_txt_file conv=ascii-real4 conv=swab4";
my $wget_command =
  "$bindir/wget -q -t 1 -T 0 -O - --header " . '"Authorization: Bearer TOKEN"';

# Server where this program is installed:

my $server_path = 'https://YOUR_WEBSERVER_HOST/cgi-bin';

# Query string parsing routine dispatch table:

my %parsers = (
  'service'  => \&parse_service_option,
  'version'  => \&parse_version_option,
  'request'  => \&parse_request_option,
  'coverage' => \&parse_coverage_option,
  'time'     => \&parse_time_option,
  'bbox'     => \&parse_bbox_option,
  'format'   => \&parse_format_option
);

# Webserver content types for each output format:

my %content_types = (
  'bin' => 'application/octet-stream'
);

# Full URL path to this program:

my @pathed_program_parts = split( /\//, $0 );
my $program_name = $pathed_program_parts[ @pathed_program_parts - 1 ];
my $program = "$server_path/$program_name";

# Metadata:
# name         - The COVERAGE= name used by this script.
# units        - Units for the parameter, e.g., mg/m3.
# min          - Minimum valid value.
# max          - Maximum valid value.
# start_date   - Earliest date of available data.
# description  - Parameter description.
# query        - template for remote query.
#
# For a list of all potentially available servers/datasets,
# first get an earthdata.nasa.gov login (TOKEN) then go to:
# https://search.earthdata.nasa.gov

my $grid_cell_size = 0.25; # Grid cells are 0.25 degree lon/lat squares.

my @metadata = (
  {
    'name' => 'daily_salinity',
    'units' => 'PSU',
    'min' => 0.0,
    'max' => 50.0,
    'start_date' => '2015-04-01',
    'description' =>
      'NASA JPL smap satellite-measured daily composite ' .
      'sea surface salinity.',
    'query' =>
      'https://opendap.earthdata.nasa.gov/collections/C2208422957-POCLOUD/' .
      'granules/SMAP_L3_SSS_YYYYMMDD_8DAYS_V5.0.dap.csv?' .
      'dap4.ce=/smap_sss[FIRST_ROW:1:LAST_ROW][FIRST_COLUMN:1:LAST_COLUMN]'
  },
  {
    'name' => 'monthly_salinity',
    'units' => 'PSU',
    'min' => 0.0,
    'max' => 50.0,
    'start_date' => '2015-04-01',
    'description' =>
      'NASA JPL smap satellite-measured monthly composite ' .
      'sea surface salinity.',
    'query' =>
      'https://opendap.earthdata.nasa.gov/collections/C2208423975-POCLOUD/' .
      'granules/SMAP_L3_SSS_YYYYMM_MONTHLY_V5.0.dap.csv?' .
      'dap4.ce=/smap_sss[FIRST_ROW:1:LAST_ROW][FIRST_COLUMN:1:LAST_COLUMN]'
  }
);


################################## VARIABLES #################################


# Parsed from the URL query string:

my $service  = ''; # wcs.
my $version  = ''; # 1.0.0.
my $request  = ''; # getcapabilities or describecoverage or getcoverage.
my $coverage = ''; # Saved until time has been parsed.
my $variable = ''; # o3, ...
my $format   = ''; # bin.
my $time     = ''; # E.g., 2001-08-29t00:00:00z/2001-08-31t23:59:59z.
my $bbox     = ''; # E.g., -90,28,-80,32,1,1. Where 1,1 means layer 1 only.

# Derived from the above parsed values:

my @bounds = split( /,/, '-180,-90,180,90' );
my $lonmin = 0.0;
my $lonmax = 0.0;
my $latmin = 0.0;
my $latmax = 0.0;
my $rows = 0;
my $columns = 0;
my $starting_timestamp = 0;  # yyyymmddhh, e.g., 2005082600.
my $hours              = 0;  # E.g., 5 days = 5 x 24 = 120.
my $days               = 0;  # E.g., 5.
my $ending_yyyymmdd    = 0;  # yyyymmdd, e.g., 20050826.
my $yyyymmddhh = ''; # Timestamp for each file.
my $temp_files = ''; # newline-delimited sequence of temp files.

################################## ROUTINES ##################################


main();


sub main {
  my $result = 0;

  if ( ! parse_url() ) {
    print "Content-type: text/plain; charset=iso-8859-1\n\n"; # For webserver
  } elsif ( $request eq 'getcapabilities' ) {
    print "Content-type: text/xml; charset=iso-8859-1\n\n"; # For webserver
    print_capabilities();
    $result = 1;
  } elsif ( $request eq 'describecoverage' ) {
    print "Content-type: text/xml; charset=iso-8859-1\n\n"; # For webserver
    print_coverage_description();
    $result = 1;
  } elsif ( $request eq 'getcoverage' ) {
    compute_time_range();
    print "Content-type: $content_types{ $format }; charset=iso-8859-1\n\n";
    $result = execute_remote_queries();

    if ( $result ) {
      $result = execute_reformatter();
    }

    if ( ! $debugging ) {

      # Remove temp files and list file:
    
      #my @files = split( /\n/, $temp_files );
      #my $count = @files;

      #for ( my $index = 0; $index < $count; ++$index ) {
      #  unlink( $files[$index] );
      #}

      #unlink( $list_file );
      #unlink( $temp_txt_file );

      $temp_files =~ s/\n/ /g;
      execute_command( "/bin/rm -f $temp_files $list_file $temp_txt_file" );
    }
  }

  $result = 1 - $result; # UNIX: zero is success, non-zero is failure.
  debug( "exit result = $result" );
  exit $result;
}



# Print web server capabilities metadata.

sub print_capabilities {
  print '<?xml version="1.0" encoding="UTF-8" ?>' . "\n";
  print '<WCS_Capabilities version="1.0.0" ';
  print 'xmlns="https://www.opengeospatial.org/standards/wcs" ';
  print 'xmlns:gml="https://www.opengis.net//gml" ';
  print 'xmlns:xlink="https://www.w3.org/1999/xlink">';
  print '
    <Service>
        <metadataLink xlink:type="simple" xlink:href=" https://www.epa.gov/rsig" metadataType="other" />
        <description>EPA ERDDAP Web Server 1.0.0</description>
        <name>EPA_ERDDAP_OGC_WCS_1.0.0</name>
        <label>EPA ERDDAP Web Server 1.0.0</label>
        <keywords>
            <keyword>EPA</keyword>
            <keyword>smap</keyword>
            <keyword>interoperability</keyword>
        </keywords>
        <responsibleParty>
            <individualName>Todd Plessel</individualName>
            <organisationName>EPA Vislab</organisationName>
            <contactInfo>
                <onlineResource xlink:type="simple" xlink:href="mailto:plessel.todd@epa.gov" />
            </contactInfo>
        </responsibleParty>
        <fees>NONE</fees>
        <accessConstraints>NONE</accessConstraints>
    </Service>
    <Capability>
        <Request>
            <GetCapabilities>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/smapserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/smapserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </GetCapabilities>
            <DescribeCoverage>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/smapserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/smapserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </DescribeCoverage>
            <GetCoverage>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/smapserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/smapserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </GetCoverage>
        </Request>
        <Exception>
            <Format>text/xml; charset="utf-8"</Format>
        </Exception>
    </Capability>
    <ContentMetadata version="1.0.0">';
  print "\n";

  my $variable_count = @metadata;

  for ( my $variable = 0; $variable < $variable_count; ++$variable ) {
    my $name = $metadata[ $variable ]->{ name };

    if ( $name ne '?' ) {
      my $units = $metadata[ $variable ]->{ units };
      my $label = $name;
      my $description = $metadata[ $variable ]->{ description };
      print "        <CoverageOfferingBrief>\n";
      print "            <name>$name</name>\n";
      print "            <label>$label($units)</label>\n";
      print "            <description>$description</description>\n";
      print '            <lonLatEnvelope srsName="WGS84(DD)">';
      print "\n";
      print "                <gml:pos>-180 -90</gml:pos>\n";
      print "                <gml:pos>180 90</gml:pos>\n";
      print "            </lonLatEnvelope>\n";
      print "        </CoverageOfferingBrief>\n";
    }
  }

  print "    </ContentMetadata>\n";
  print "</WCS_Capabilities>\n";
}



# Print web server coverage description metadata.

sub print_coverage_description {
  print '<?xml version="1.0" encoding="UTF-8" ?>';
  print '<CoverageDescription version="1.0.0" ';
  print 'xmlns="https://www.opengeospatial.org/standards/wcs" ';
  print 'xmlns:gml="https://www.opengis.net/gml" ';
  print 'xmlns:xlink="https://www.w3.org/1999/xlink">';
  print "\n";

  my $variable_count = @metadata;

  for ( my $variable = 0; $variable < $variable_count; ++$variable ) {
    my $name = $metadata[ $variable ]->{ name };

    if ( $name ne '?' ) {
      my $units = $metadata[ $variable ]->{ units };
      my $description = $metadata[ $variable ]->{ description };

      if ( $coverage eq '' || $coverage eq $name ) {
        print "    <CoverageOffering>\n";
        print "        <name>$name</name>\n";
        print "        <label>$name($units)</label>\n";
        print "        <description>$description</description>\n";
        print "        <domainSet>\n";
        print "            <spatialDomain>\n";
        print '                <gml:Envelope srsName="WGS84(DD)">';
        print "\n";
        print "                    <gml:pos>-180 -90</gml:pos>\n";
        print "                    <gml:pos>180 90</gml:pos>\n";
        print "                </gml:Envelope>\n";
        print "            </spatialDomain>\n";
        print "            <temporalDomain>\n";
        print "                <timePeriod>\n";
        print "                    <beginPosition>20150401";
        print "T00:00:00Z</beginPosition>\n";
        print "                    <timeResolution>PT1D</timeResolution>\n";
        print "                </timePeriod>\n";
        print "            </temporalDomain>\n";
        print "        </domainSet>\n";
        print "        <rangeSet>\n";
        print "            <RangeSet>\n";
        print "                <name>$name</name>\n";
        print "                <label>$name($units)</label>\n";
        print "                <description>$description</description>";
        print '
                <nullValues>
                    <singleValue>-9999</singleValue>
                </nullValues>
            </RangeSet>
        </rangeSet>
        <supportedCRSs>
            <requestResponseCRSs>CRS:84</requestResponseCRSs>
            <nativeCRSs>CRS:84</nativeCRSs>
        </supportedCRSs>
        <supportedFormats>
            <formats>ASCII</formats>
        </supportedFormats>
        <supportedInterpolations>
            <interpolationMethod>mean mode</interpolationMethod>
        </supportedInterpolations>
    </CoverageOffering>
';

      }
    }
  }

  print "</CoverageDescription>\n";
}



# Parse URL parameters into variables.

sub parse_url {
  use CGI qw/ untaint /;     # Load Safe untainting CGI routines.
  $CGI::DISABLE_UPLOADS = 1; # Disable uploads.
  $CGI::POST_MAX = 1024;     # Limit posts to 1024 bytes.
  my $query = new CGI;       # Parse QUERY_STRING.
  %ENV = ();                 # Unset all environment variables.
  my @names = $query->param; # Extract names of parameters.
  my $count = @names;
  my $result = 0;
  debug( "$program_name @names ($count)" );

  for ( my $parameter = 0; $parameter < $count; ++$parameter) {
    $_ = $names[ $parameter ];                # $_ is tainted.
    s/[^A-Za-z]/_/go;                         # Untaint $_.
    my $option = $_;                          # $option is untainted.
    $_ = $query->param( $option );            # $_ is tainted.
    s/[^\w\-.,:\/]/_/go;                      # Untaint $_.
    my $value = $_;                           # $value is untainted.
    my $lowercase_option = lc( $option );
    my $lowercase_value  = lc( $value );
    debug( "$lowercase_option $lowercase_value" );

    if ( $parsers{ $lowercase_option } ) {
      $result = $parsers{ $lowercase_option }->( $lowercase_value );
    } else {
      print STDERR "\nInvalid option: '$option'\n";
    }

    if ( ! $result ) {
      $parameter = $count; # Finish looping.
    }
  }

  $result = $result && required_options_specified();
  return $result;
}



# Parse service option.

sub parse_service_option {
  my $value = shift;
  my $result = parse_option( $service, $value, 'SERVICE', 'wcs' );
  return $result;
}



# Parse version option.

sub parse_version_option {
  my $value = shift;
  my $result = parse_option( $version, $value, 'VERSION', '1.0.0' );
  return $result;
}



# Parse request option.

sub parse_request_option {
  my $value = shift;
  my $result = parse_option( $request, $value, 'REQUEST',
                             'getcoverage getcapabilities describecoverage' );
  return $result;
}



# Parse format option:

sub parse_format_option {
  my $value = shift;
  my $result =
    parse_option( $format, $value, 'FORMAT', 'bin' );
  return $result;
}



# Parse coverage option.

sub parse_coverage_option {
  my $value = shift;
  my $result = 0;

  if ( $coverage ne '' ) {
    print STDERR "\nRedundant COVERAGE option: '$value'\n";
  } else {
    my $variable_count = @metadata;

    for ( my $variable = 0; $coverage eq '' && $variable < $variable_count;
          ++$variable ) {
      my $name = $metadata[ $variable ]->{ name };

      if ( $name ne '?' ) {

        if ( $name eq $value ) {
          $coverage = $name;
          $result = 1;
        }
      }
    }

    if ( ! $result ) {
      print STDERR "\nInvalid COVERAGE option: '$value'\n";
    }
  }

  return $result;
}



# Parse time option.

sub parse_time_option {
  my $value = shift;
  my $result = 0;

  if ( $time ne '' ) {
    print STDERR "\nRedundant TIME option: '$value'\n";
  } else {
    $time = $value;
    my $is_valid = is_valid_time( $time );

    if ( ! $is_valid ) {
      print STDERR "\nInvalid TIME option: '$value'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse bbox option.

sub parse_bbox_option {
  my $value = shift;
  my $result = 0;

  if ( $bbox ne '' ) {
    print STDERR "\nRedundant BBOX option: '$value'\n";
  } else {
    $bbox = $value;
    @bounds = split( /,/, $bbox );
    my $bounds_count = @bounds;

    if ( $bounds_count != 4 && $bounds_count != 6 ) {
      print STDERR "\nInvalid bbox option: '$value'\n";
    } elsif ( ! in_range( $bounds[ 0 ], -180.0, 180.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 0 ]'\n";
    } elsif ( ! in_range( $bounds[ 1 ], -90.0, 90.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 1 ]'\n";
    } elsif ( ! in_range( $bounds[ 2 ], $bounds[ 0 ], 180.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 2 ]'\n";
    } elsif ( ! in_range( $bounds[ 3 ], $bounds[ 1 ], 90.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 3 ]'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}


# Check that all required 'options' have been specified:

sub required_options_specified {
  my $result = 0;

  if ( $service eq '' ) {
    print STDERR "\nMissing option: 'SERVICE'\n";
  } elsif ( $version eq '' ) {
    print STDERR "\nMissing option: 'VERSION'\n";
  } elsif ( $request eq '' ) {
    print STDERR "\nMissing option: 'REQUEST'\n";
  } elsif ( $request eq 'getcoverage' ) {

    if ( $format eq '' ) {
      print STDERR "\nMissing option: 'FORMAT'\n";
    } elsif ( $time eq '' ) {
      print STDERR "\nMissing option: 'TIME'\n";
    } elsif ( $bbox eq '' ) {
      print STDERR "\nMissing option: 'BBOX'\n";
    } elsif ( $coverage eq '' ) {
      print STDERR "\nMissing option: 'COVERAGE'\n";
    } else {
      $result = 1;
    }
  } else {
    $result = 1;
  }

  return $result;
}



# Compute starting_timestamp and hours.
# inputs:  $time = '2001-08-26t00:00:00z/2001-08-31t23:59:59z'
# outputs: $starting_timestamp = 2005082600
#          $hours = 120
#          $days = 5

sub compute_time_range {
  my $yyyy1 = substr( $time, 0, 4 );
  my $mm1   = substr( $time, 5, 2 );
  my $dd1   = substr( $time, 8, 2 );
  my $hh1   = substr( $time, 11, 2 );
  my $i     = index( $time, '/' );

  $starting_timestamp = integer_timestamp( $yyyy1, $mm1, $dd1, $hh1 );
  $ending_yyyymmdd = $starting_timestamp / 100;
  $hours = 1;
  $days = 1;

  if ( $i != -1 ) {
    ++$i;
    my $yyyy2 = substr( $time, $i + 0, 4 );
    my $mm2   = substr( $time, $i + 5, 2 );
    my $dd2   = substr( $time, $i + 8, 2 );
    my $hh2   = substr( $time, $i + 11, 2 );
    my $yyyy  = $yyyy1;
    my $mm    = $mm1;
    my $dd    = $dd1;
    my $hh    = $hh1;
    my $previous_dd = $dd1;

    while ( integer_timestamp( $yyyy, $mm, $dd, $hh ) !=
            integer_timestamp( $yyyy2, $mm2, $dd2, $hh2 ) ) {
      increment_timestamp( $yyyy, $mm, $dd, $hh );

      if ( $dd ne $previous_dd ) {
        ++$days;
        $previous_dd = $dd;
        $ending_yyyymmdd = $yyyy * 10000 + $mm * 100 + $dd;
      }

      ++$hours;
    }
  }
}



# Execute query of remote web service:

sub execute_remote_queries {
  my $result = 0;
  my $variable = lookup_variable( $coverage );
  my $variable_info = $metadata[ $variable ];
  my $query = $variable_info->{ query };

  # Compute 0-based first/last row/column indices:

  my $first_row = 0;
  my $last_row = 0;
  my $first_column = 0;
  my $last_column = 0;

  compute_subset_indices( $first_row, $last_row, $first_column, $last_column );

  $rows = 1 + $last_row - $first_row;
  $columns = 1 + $last_column - $first_column;

  # Substitute 0-based index ranges in query:

  $query =~ s/FIRST_ROW/$first_row/g;
  $query =~ s/LAST_ROW/$last_row/g;
  $query =~ s/FIRST_COLUMN/$first_column/g;
  $query =~ s/LAST_COLUMN/$last_column/g;

  # Encode [] characters in query:

  $query =~ s/\[/%5B/g;
  $query =~ s/\]/%5D/g;
  #$query =~ s/:/%3A/g;

  # Compute extent of resulting grid for later use by execute_subsetter).
  # Note the external webservice uses 0-based row/column indices with
  # column 0 is west-edge and row 0 is north-pole.
  # The returned values are at the center of each 0.25-degree cell with
  # columns/longitudes = [-179.875, 179.875] and
  # rows/latitudes = [-89.875, 89.875].
  # But the output grid format bounds are at the outer edges of the grid ranging
  # [-180, 180] and [-90 90].

  $lonmin = -180 + $first_column * $grid_cell_size;
  $lonmax = $lonmin + $columns * $grid_cell_size;
  $latmin = 90 - $last_row * $grid_cell_size - $grid_cell_size;
  $latmax = $latmin + $rows * $grid_cell_size;

  debug("lon range = [$lonmin, $lonmax] lat range = [$latmin, $latmax]");

  # Substitute value for TOKEN in $wget_command:

  my $token = read_token_file();
  $wget_command =~ s/TOKEN/$token/g;

  if ( index( $coverage, 'monthly_' ) != -1 ) {
    my $yyyy   = int( $starting_timestamp / 1000000 );
    my $mm     = int( $starting_timestamp / 10000 ) % 100;
    my $yyyymm = $yyyy * 100 + $mm;
    my $yyyy2  = int( $ending_yyyymmdd / 10000 );
    my $mm2    = int( $ending_yyyymmdd / 100 ) % 100;
    my $yyyymm2 = $yyyy2 * 100 + $mm2;

    do {
      my $temp_file = "$temp_dir/smap_monthly_$$" .
        sprintf( "_%04d%02d.csv", $yyyy, $mm);
      $temp_files .= "$temp_file\n";
      my $command = "$wget_command '$query' > $temp_file";
      $command =~ s/YYYYMM/$yyyymm/g;
      my $ok = execute_command( $command );

      if ( $ok ) {
        $yyyymmddhh .= sprintf( "%04d%02d0100\n", $yyyy, $mm );
        $result += 1;
      }

      increment_month( $yyyy, $mm );
      $yyyymm = $yyyy * 100 + $mm;
    } while ( $yyyymm <= $yyyymm2 );

  } else { # daily_:
    my $yyyy   = int( $starting_timestamp / 1000000 );
    my $mm     = int( $starting_timestamp / 10000 ) % 100;
    my $dd     = int( $starting_timestamp / 100 ) % 100;
    my $yyyymmdd = $yyyy * 10000 + $mm * 100 + $dd;
    my $yyyy2  = int( $ending_yyyymmdd / 10000 );
    my $mm2    = int( $ending_yyyymmdd / 100 ) % 100;
    my $dd2    = $ending_yyyymmdd % 100;
    my $yyyymmdd2 = $yyyy2 * 10000 + $mm2 * 100 + $dd2;

    do {
      my $temp_file = "$temp_dir/smap_daily_$$" .
        sprintf( "_%04d%02d%02d.csv", $yyyy, $mm, $dd );
      $temp_files .= "$temp_file\n";
      my $command = "$wget_command '$query' > $temp_file";
      $command =~ s/YYYYMMDD/$yyyymmdd/g;
      my $ok = execute_command( $command );

      if ( $ok ) {
        $yyyymmddhh .= sprintf( "%04d%02d%02d00\n", $yyyy, $mm, $dd );
        $result += 1;
      }

      increment_date_day( $yyyy, $mm, $dd );
      $yyyymmdd = $yyyy * 10000 + $mm * 100 + $dd;
    } while ( $yyyymmdd <= $yyyymmdd2 );
  }

  # Create list_file for subsetter to read:

  if ( $result ) {
    open ( FH, "> $list_file" ) or die "Couldn't open file $list_file";
    print FH $temp_files;
    close FH or die "Cannot close $list_file: $!";
  }

  debug( "execute_remote_queries result = $result" );
  return $result;
}



# execute_reformatter

sub execute_reformatter {
  my $variable = lookup_variable( $coverage );
  my $variable_info = $metadata[ $variable ];
  my $name = short_name( $variable_info->{ name } );
  my $units = $variable_info->{ units };
  my $min = $variable_info->{ min };
  my $max = $variable_info->{ max };

  # Create temp txt file:

  open my $txt_file, '>', $temp_txt_file or die "Can't create file $!";

  # Process each input data file:

  my @input_file_names = split( /\n/, $temp_files );
  my $input_file_count = @input_file_names;
  my $count = 0;

  for ( my $input_file_index = 0;
        $input_file_index < $input_file_count;
        ++$input_file_index) {

    my $input_file_name = $input_file_names[ $input_file_index ];

    # Read entire input data file into memory:

    if ( open my $input_file, '<', $input_file_name ) {
      debug( "reading data file $input_file_name" );
      my @data_lines = <$input_file>;
      close $input_file;
      my $line_count = @data_lines;
      debug( "read $line_count data lines" );

      if ( $line_count > 0 ) {
        ++$count;

        # Read and convert data lines in reverse order, except header line:

        for ( my $line_index = $line_count - 1;
              $line_index >= 1;
              --$line_index ) {
          my $data_line = $data_lines[ $line_index ];

          # Filter-out first column label '/l3m_data[0]' then filter-out commas

          $data_line =~ s/^\/.*\]//;
          $data_line =~ tr /,/ /;
          $data_line =~ s/-32767/-9999/g;
          print $txt_file $data_line;
        }
      }
    }
  }

  close $txt_file;

  # Write grid bin format data to stdout:

  my $timesteps = $count;

  # Write ASCII header:

  print "Content-type: application/octet-stream; charset=iso-8859-1\n";
  print "# variable units:\n";
  print "$name $units\n";
  print "# dimensions: timesteps z rows columns lonmin lonmax latmin latmax\n";
  print "$timesteps 0 $rows $columns $lonmin $lonmax $latmin $latmax\n";
  print "# char yyyymmddhh[timesteps][11] and\n";
  print "# IEEE-754 32-bit float data[timesteps][rows][columns]:\n";

  # Write timestamps:

  print $yyyymmddhh;

  # Write binary data array:

  my $result = execute_command( $fdd );
  debug( "execute_reformatter result = $result" );
  return $result;
}



# my $name = short_name( 'daily_salinity' );
# $name is 'salinity'

sub short_name {
  my $name = shift;
  my @parts = split( /_/, $name );
  my $count = @parts;
  my $label = $parts[ $count - 1 ];
  return $label;
}



# Execute command and echo its output to STDOUT. E.g., execute_command( 'ls' );

sub execute_command {
  my $command = shift;
  my $result = 0;
  my $the_pipe = 0;

  # Untaint command (match expression is arbitrary as far as -T is concerned):

  if ( $command =~ m#^(/[\w-]+/[\w -/.,':?=&<>%\[\]\(\)|]+)$# ) {
    $command = $1; # Re-assign first match, which is enough to satisfy -T.
    debug( "$0 executing command = $command" );
    %ENV = (); # Unset all environment variables prior to popen.
    # Complicated, supposedly safer way to open a readable pipe to command:
    my $pid = open( the_pipe, "-|" );

    if ( ! defined( $pid ) ) {
      die "Couldn't open pipe to subprocess";
    } elsif ( $pid ) { # Parent process.

      while ( <the_pipe> ) {
        print;
      }

      close( the_pipe );
      $result = ! $?;
    } else { # Child process.
      exec( $command ) or die "can't exec program: $!";
    }
  } else {
    print STDERR "\n$0: '$command' contains invalid characters.\n";
  }

  return $result;
}



# my $variable = lookup_variable( $coverage );

sub lookup_variable {
  my $result = -1;
  my $variable_count = @metadata;

  for ( my $variable = 0; $variable < $variable_count;
        ++$variable ) {
    my $name = $metadata[ $variable ]->{ name };

    if ( $coverage eq $name ) {
      $result = $variable;
      $variable = $variable_count; # Stop looping.
    }
  }

  return $result;
}




############################### HELPER ROUTINES ##############################



# debug( message );

sub debug {
  my $message = shift;

  if ( $debugging ) {
    print STDERR "\n$message\n";
####print STDOUT "\n$message\n";
  }
}



# my $result = parse_option( $option, $value, $option_name, $valid_values );
# my $result = parse_option( $variable, $value, 'COVERAGE', 'ozone pm25' );

sub parse_option {
  my ( $option, $value, $option_name, $valid_values ) = @_;
  my $result = 0;

  if ( $option ne '' ) {
    print STDERR "\nRedundant $option_name option: '$value'\n";
  } else {
    $result = index( " $valid_values ", " $value " ) != -1;

    if ( $result ) {
      $_[ 0 ] = $value;
    } else {
      print STDERR "\nInvalid $option_name option: '$value'\n";
    }
  }

  return $result;
}



# my $ok = in_range( $value, $minimum, $maximum );

sub in_range {
  my ( $value, $minimum, $maximum ) = @_;
  my $result = $value >= $minimum && $value <= $maximum;
  return $result;
}



# my $is_valid = is_valid_time( '2001-08-26t20:00:00z/2001-08-27t23:59:59z' );

sub is_valid_time {
  my $time = shift;
  my $result = 0;
  my $length = length( $time );

  if ( $length == 41 ) {
    $result = is_valid_time( substr( $time, 0, 20 ) );
    $result = $result && substr( $time, 20, 1 ) eq '/';
    $result = $result && is_valid_time( substr( $time, 21, 20 ) );
    $result = $result && substr( $time, 0, 20 ) le substr( $time, 21, 20 );
  } elsif ( $length == 20 ) {
    my $year   = substr( $time, 0, 4 );
    my $month  = substr( $time, 5, 2 );
    my $day    = substr( $time, 8, 2 );
    my $hour   = substr( $time, 11, 2 );
    my $minute = substr( $time, 14, 2 );
    my $second = substr( $time, 17, 2 );
    $result = in_range( $year, 1900, 3000 );
    $result = $result && in_range( $month, 1, 12 );
    $result = $result && in_range( $day, 1, days_in_month( $year, $month ) );
    $result = $result && in_range( $hour, 0, 23 );
    $result = $result && in_range( $minute, 0, 59 );
    $result = $result && in_range( $second, 0, 59 );
    $result = $result && substr( $time, 4, 1 ) eq '-';
    $result = $result && substr( $time, 7, 1 ) eq '-';
    $result = $result && substr( $time, 10, 1 ) eq 't';
    $result = $result && substr( $time, 13, 1 ) eq ':';
    $result = $result && substr( $time, 16, 1 ) eq ':';
    $result = $result && substr( $time, 19, 1 ) eq 'z';
  }

  return $result;
}



# increment_timestamp( $yyyy, $mm, $dd, $hh );

sub increment_timestamp {
  my ( $yyyy, $mm, $dd, $hh ) = @_;
  my $hours_per_day   = 23;
  my $months_per_year = 12;
  my $days_this_month = days_in_month( $yyyy, $mm );
  ++$hh;

  if ( $hh > $hours_per_day ) {
    $hh = 0;
    ++$dd;

    if ( $dd > $days_this_month ) {
      $dd = 1;
      ++$mm;

      if ( $mm > $months_per_year ) {
        $mm = 1;
        ++$yyyy;
      }
    }
  }

  $_[ 0 ] = $yyyy;
  $_[ 1 ] = $mm;
  $_[ 2 ] = $dd;
  $_[ 3 ] = $hh;
}



# increment_date_day( $yyyy, $mm, $dd );

sub increment_date_day {
  my ( $yyyy, $mm, $dd ) = @_;
  my $months_per_year = 12;
  my $days_this_month = days_in_month( $yyyy, $mm );

  ++$dd;

  if ( $dd > $days_this_month ) {
    $dd = 1;
    ++$mm;

    if ( $mm > $months_per_year ) {
      $mm = 1;
      ++$yyyy;
    }
  }

  $_[ 0 ] = $yyyy;
  $_[ 1 ] = $mm;
  $_[ 2 ] = $dd;
}



# decrement_date_day( $yyyy, $mm, $dd );

sub decrement_date_day {
  my ( $yyyy, $mm, $dd ) = @_;
  --$dd;

  if ( $dd < 1 ) {
    --$mm;

    if ( $mm < 1 ) {
      --$yyyy;
      $mm = 12;
    }
 
    $dd = days_in_month( $yyyy, $mm );      
  }

  $_[ 0 ] = $yyyy;
  $_[ 1 ] = $mm;
  $_[ 2 ] = $dd;
}



# increment_date_days( $yyyy, $mm, $dd, $days );

sub increment_date_days {
  my ( $yyyy, $mm, $dd, $days ) = @_;

  while ( $days-- ) {
    increment_date_day( $yyyy, $mm, $dd );
  }

  $_[ 0 ] = $yyyy;
  $_[ 1 ] = $mm;
  $_[ 2 ] = $dd;
}



# increment_month( $yyyy, $mm );

sub increment_month {
  my ( $yyyy, $mm ) = @_;
  my $months_per_year = 12;

  ++$mm;

  if ( $mm > $months_per_year ) {
    $mm = 1;
    ++$yyyy;
  }

  $_[ 0 ] = $yyyy;
  $_[ 1 ] = $mm;
}



# my $yyyymmddhh = integer_timestamp( $yyyy, $mm, $dd, $hh );

sub integer_timestamp {
  my ( $yyyy, $mm, $dd, $hh ) = @_;
  my $result = int( $yyyy * 1000000 + $mm * 10000 + $dd * 100 + $hh );
  return $result;
}



# my $leap = is_leap_year( $year );

sub is_leap_year {
  my $year = shift;
  my $result = $year % 4 == 0 && ( $year % 100 != 0 || $year % 400 == 0 );
  return $result;
}



# seven_days_of_year( $yyyy, $mm, $dd, $ddd, $yyyy2, $ddd2 );

sub seven_days_of_year {
  my ( $yyyy, $mm, $dd, $ddd, $yyyy2, $ddd2 ) = @_;
  debug( "seven_days_of_year( $yyyy, $mm, $dd, ... )" );

  # Back-up to beginning of week:

  $ddd = day_of_year( $yyyy, $mm, $dd );

  while ( ( $ddd - 1 ) % 7 ) {
    decrement_date_day( $yyyy, $mm, $dd );
    $ddd = day_of_year( $yyyy, $mm, $dd );
  }

  $ddd = day_of_year( $yyyy, $mm, $dd );
  debug( "  $yyyy $mm $dd = $ddd" );

  # Compute end of week:

  $yyyy2 = $yyyy;
  my $mo   = $mm;
  my $d    = $dd;
  increment_date_days( $yyyy2, $mo, $d, 6 );
  $ddd2 = day_of_year( $yyyy2, $mo, $d );
  debug( "  $yyyy2 $mo $d = $ddd2" );

  $_[ 0 ] = $yyyy;
  $_[ 1 ] = $mm;
  $_[ 2 ] = $dd;
  $_[ 3 ] = $ddd;
  $_[ 4 ] = $yyyy2;
  $_[ 5 ] = $ddd2;
}



# my $ddd = day_of_year( $year, $month, $day );

sub day_of_year {
  my $year  = shift;
  my $month = shift;
  my $day   = shift;
  my $result = 0;

  for ( my $mm = 1; $mm < $month; ++$mm ) {
    my $days = days_in_month( $year, $mm );
    $result += $days;
  }

  $result += $day;
  return $result;
}



# my $days = days_in_month( $year, $month );

sub days_in_month {
  my $year  = shift;
  my $month = shift;

  # 30 days hath September, April, June and November...

  my @days_per_month = ( 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 );
  my $result = $days_per_month[ $month - 1 ];

  if ( $month == 2 ) {

    if ( is_leap_year( $year ) ) {
      ++$result;
    }
  }

  return $result;
}



# compute_subset_indices( $first_row, $last_row, $first_column, $last_column );

sub compute_subset_indices {
  my ( $first_row, $last_row, $first_column, $last_column ) = @_;

  my @bounds = split( /,/, $bbox );
  my $lonmin = $bounds[ 0 ];
  my $latmin = $bounds[ 1 ];
  my $lonmax = $bounds[ 2 ];
  my $latmax = $bounds[ 3 ];

  # Grid cells are $grid_cell_size degree squares.
  # 0-based column indices increase from west (0) to east (1439).
  # 0-based row indices increase from north-pole (0) to south-pole (719).

  my $maximum_row_index    = int( 180 / $grid_cell_size ) - 1;
  my $maximum_column_index = int( 360 / $grid_cell_size ) - 1;

  $first_row = $maximum_row_index - int( ( $latmax + 90 ) / $grid_cell_size );
  $last_row  = $maximum_row_index - int( ( $latmin + 90 ) / $grid_cell_size );

  $first_column = int( ( $lonmin + 180 ) / $grid_cell_size );
  $last_column  = int( ( $lonmax + 180 ) / $grid_cell_size );

  if ( $first_row < 0 ) {
    $first_row = 0;
  }

  if ( $last_row > $maximum_row_index ) {
    $last_row = $maximum_row_index;
  }

  if ( $first_column < 0 ) {
    $first_column = 0;
  }

  if ( $last_column > $maximum_column_index ) {
    $last_column = $maximum_column_index;
  }

  debug( "0-based row indices: [$first_row, $last_row]" );
  debug( "0-based column indices: [$first_column, $last_column]" );

  $_[ 0 ] = $first_row;
  $_[ 1 ] = $last_row;
  $_[ 2 ] = $first_column;
  $_[ 3 ] = $last_column;
}



# Read token file:

sub read_token_file {
  my $result = "";

  if ( open my $token_file, '<', $token_file_name ) {
    $result = <$token_file>;
    close $token_file;
  }

  # Trim ending newline:

  $result = substr( $result, 0, length( $result ) - 1 );
  #debug( "Read $token_file_name TOKEN = $result" );
  return $result;
}


