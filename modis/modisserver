#!/usr/bin/perl -wT

##############################################################################
# PURPOSE: modisserver - Serve MODIS data, subsetted by date/time range,
#          variable, and longitude-latitude box, in ASCII, XDR and NetCDF
#          formats for use by other programs (e.g., via wget).
#
# NOTES:   Server is WCS-compliant:
#          https://www.opengeospatial.org/standards/wcs
#          https://datafed.net/xs/OpenGIS/wcs/1.0.0/
#          and modeled after a similar webserver application:
#          https://webapps.datafed.net/ogc_EPA.wsfl
#
#          Uses wget through port 80 to YOUR_WEBSERVER_HOST
#          and which streams the data back on STDOUT.
#
#          Forwards to:
#            https://modwebsrv.modaps.eosdis.nasa.gov/cgi-bin/RSIGservice
#          NASA Goddard contact:
#          Greg Ederer gregory.a.ederer@nasa.gov 301-731-2929
#
#          Example usage:
#
#          wget -q -T 0 -O - 'https://ofmpub.epa.gov/rsig/modisserver?\
#                    SERVICE=wcs&\
#                    VERSION=1.0.0&\
#                    REQUEST=GetCoverage&\
#                    COVERAGE=mod4.optical_depth_land_and_ocean&\
#                    TIME=2005-08-26T20:00:00Z/2005-08-29T01:59:59Z&\
#                    BBOX=-90,30,-88,32,0,0&\
#                    FORMAT=ascii'
#
# HISTORY: 2006/08/03, plessel.todd@epa.gov, 1-919-541-5500, TSSMS=cws
#
# STATUS:  reviewed, tested.
##############################################################################


use strict;
package main;
$| = 1; # Turn off output buffering so messages appear in correct order.
alarm( 3600 ); # Kill process after 1 hour. Legitimate usage could be an hour!
# Restrict PATH and ENV. (But before popen, ENV is cleared!)
delete @ENV{ 'PATH', 'IFS', 'CDPATH', 'ENV', 'BASH_ENV' };


############################## TUNABLE CONSTANTS #############################


my $debugging = 0; # 1 = print debug messages to STDERR logs/error_log.

# External server to forward to via wget command:

##my $server_path = 'https://lpweb.nascom.nasa.gov/cgi-bin/modisserver?';
my $server_path = 'https://modwebsrv.modaps.eosdis.nasa.gov/cgi-bin/RSIGservice?';
my $bindir       = '/rsig/current/code/bin/Linux.x86_64';
#my $wget_command = "$bindir/wget -q -t 1 -T 0 -O - ";
my $wget_command = '/usr/bin/curl -k --silent --max-time 3600 --retry 0 -L --tcp-nodelay ';

# Query string parsing routine dispatch table:

my %parsers = (
  'service'          => \&parse_service_option,
  'version'          => \&parse_version_option,
  'request'          => \&parse_request_option,
  'coverage'         => \&parse_coverage_option,
  'time'             => \&parse_time_option,
  'bbox'             => \&parse_bbox_option,
  'format'           => \&parse_format_option,
  'stride'           => \&parse_stride_option,
  'sparse'           => \&parse_sparse_option,
  'corners'          => \&parse_corners_option,
  'compress'         => \&parse_compress_option,
  'regrid'           => \&parse_regrid_option,
  'regrid_aggregate' => \&parse_regrid_aggregate_option,
  'lambert'          => \&parse_lambert_option,
  'stereographic'    => \&parse_stereographic_option,
  'mercator'         => \&parse_mercator_option,
  'lonlat'           => \&parse_lonlat_option,
  'ellipsoid'        => \&parse_ellipsoid_option,
  'grid'             => \&parse_grid_option,
  'levels'           => \&parse_levels_option
);

# Webserver content types for each output format:

my %content_types = (
  'ascii'         => 'text/plain',
  'xdr'           => 'application/octet-stream',
  'netcdf-coards' => 'application/netcdf',
  'netcdf-ioapi'  => 'application/netcdf',
  'original'      => 'application/octet-stream'
);

my @mod4_variables = (
  'aerosol_cldmask_land_ocean',
  'aerosol_cloud_fraction_land',
  'aerosol_cloud_fraction_ocean',
  'aerosol_type_land',
  'angstrom_exponent_1_ocean',
  'angstrom_exponent_2_ocean',
  'aod_550_dark_target_deep_blue_combined',
  'aod_550_dark_target_deep_blue_combined_algorithm_flag',
  'aod_550_dark_target_deep_blue_combined_qa_flag',
  'average_cloud_pixel_distance_land_ocean',
  'cloud_pixel_distance_land_ocean',
  'corrected_optical_depth_land_wav2p1',
  'deep_blue_aerosol_optical_depth_550_land',
  'deep_blue_aerosol_optical_depth_550_land_best_estimate',
  'deep_blue_aerosol_optical_depth_550_land_estimated_uncertainty',
  'deep_blue_aerosol_optical_depth_550_land_qa_flag',
  'deep_blue_aerosol_optical_depth_550_land_std',
  'deep_blue_algorithm_flag_land',
  'deep_blue_angstrom_exponent_land',
  'deep_blue_cloud_fraction_land',
  'deep_blue_number_pixels_used_550_land',
  'effective_optical_depth_0p55um_ocean',
  'fitting_error_land',
  'glint_angle',
  'image_optical_depth_land_and_ocean',
  'land_ocean_quality_flag',
  'land_sea_flag',
##'latitude',
##'longitude',
  'optical_depth_land_and_ocean',
  'optical_depth_ratio_small_land',
  'optical_depth_ratio_small_ocean_0_55micron',
##'scan_start_time',
  'scattering_angle',
  'sensor_azimuth',
  'sensor_zenith',
  'solar_azimuth',
  'solar_zenith',
  'topographic_altitude_land',
  'wind_speed_ncep_ocean'
);

my @mod6_variables = (
##'longitude', 'latitude', 'scan_start_time',
 'solar_zenith', 'solar_azimuth', 'sensor_zenith', 'sensor_azimuth',
 'surface_temperature', 'surface_pressure',
 'cloud_top_pressure', 'cloud_top_pressure_night', 'cloud_top_pressure_day',
 'cloud_top_temperature', 'cloud_top_temperature_night',
 'cloud_top_temperature_day', 'tropopause_height',
 'cloud_top_pressure_infrared', 'surface_type', 'effective_particle_radius',
 'cloud_optical_thickness', 'water_path', 'cirrus_reflectance'
);

my @mod7_variables = (
##'longitude', 'latitude', 'scan_start_time',
 'solar_zenith', 'solar_azimuth', 'sensor_zenith', 'sensor_azimuth',
 'surface_temperature', 'surface_pressure',
 'surface_elevation', 'tropopause_height', 'total_ozone',
 'total_totals', 'lifted_index', 'k_index',
 'water_vapor', 'water_vapor_direct', 'water_vapor_low', 'water_vapor_high'
);

my @mod43k_variables = (
  'aerosol_cloud_fraction_land',
  'aerosol_cloud_fraction_ocean',
  'aerosol_type_land',
  'angstrom_exponent_1_ocean',
  'angstrom_exponent_2_ocean',
  'corrected_optical_depth_land_wav2p1',
  'fitting_error_land',
  'glint_angle',
  'image_optical_depth_land_and_ocean',
  'land_ocean_quality_flag',
  'land_sea_flag',
##'latitude',
##'longitude',
  'number_pixels_used_ocean',
  'optical_depth_land_and_ocean',
  'optical_depth_ratio_small_land',
  'optical_depth_ratio_small_ocean_0_55micron',
##'scan_start_time',
  'scattering_angle',
  'sensor_azimuth',
  'sensor_zenith',
  'solar_azimuth',
  'solar_zenith',
  'topographic_altitude_land',
  'wind_speed_ncep_ocean'
);

my %mod_metadata = (
 'mod4'   => { 'variables' => \@mod4_variables },
 'mod6'   => { 'variables' => \@mod6_variables },
 'mod7'   => { 'variables' => \@mod7_variables },
 'mod43k' => { 'variables' => \@mod43k_variables }
);

# Parsed from the URL query string:

my $query_string  = ''; # The entire parsed query string to forward.
my $service       = ''; # wcs.
my $version       = ''; # 1.0.0.
my $request       = ''; # getcapabilities or describecoverage or getcoverage.
my $variable      = ''; # mod4.optical_depth_land_and_ocean, ...
my $format        = ''; # xdr, ascii, netcdf, original.
my $compress      = ''; # 1 = | gzip -c otherwise don't compress (default).
my $time          = ''; # E.g., 2001-08-29t00:00:00z/2001-08-30t23:59:59z.
my $bbox          = ''; # E.g., -90,28,-80,32,0,0.
my $stride        = ''; # Stride between points in domain. E.g., 10.
my $sparse        = ''; # Sparse target count of points in domain. E.g., 100.
my $corners       = ''; # 1 = compute corners otherwise don't (default).
my $regrid        = ''; # E.g., nearest, mean, weighted.
my $regrid_aggregate = ''; # E.g., none, all, daily.
my $lambert       = ''; # E.g., 33,45,-97,40.
my $stereographic = ''; # E.g., -98,90,45.
my $mercator      = ''; # E.g., -98.
my $lonlat        = '';
my $ellipsoid     = ''; # E.g., 6370997,6370997.
my $grid          = ''; # E.g., 268,259,-420000,-1716000,12000,12000.
my $levels        = ''; # E.g,22,2,10000,1.0,...,0.0,9.81,287.04,50,290,100000.

my $mod           = ''; # mod4 or mod6 or mod7.

################################## ROUTINES ##################################


main();


sub main {
  my $result = 0;

  if ( parse_url() ) {
    my $command = "$wget_command '$server_path$query_string'";
    $result = execute_command( $command );    
  }

  $result = 1 - $result; # UNIX: zero is success, non-zero is failure.
  debug( "exit result = $result" );
  exit $result;
}


# Parse URL parameters into variables.

sub parse_url {
  use CGI qw/ untaint /;     # Load Safe untainting CGI routines.
  $CGI::DISABLE_UPLOADS = 1; # Disable uploads.
  $CGI::POST_MAX = 1024;     # Limit posts to 1024 bytes.
  my $query = new CGI;       # Parse QUERY_STRING.
  %ENV = ();                 # Unset all environment variables.
  my @names = $query->param; # Extract names of parameters.
  my $count = @names;
  my $result = 0;
  debug( "@names\n$count" );

  for ( my $parameter = 0; $parameter < $count; ++$parameter) {
    $_ = $names[ $parameter ];                # $_ is tainted.
    s/[^A-Za-z]/_/go;                         # Untaint $_.
    my $option = $_;                          # $option is untainted.
    $_ = $query->param( $option );            # $_ is tainted.
    s/[^\w\-.,:\/]/_/go;                      # Untaint $_.
    my $value = $_;                           # $value is untainted.
    my $lowercase_option = lc( $option );
    my $lowercase_value  = lc( $value );
    debug( "$lowercase_option $lowercase_value" );

    if ( $parsers{ $lowercase_option } ) {
      $result = $parsers{ $lowercase_option }->( $lowercase_value );
    } else {
      print STDERR "\nInvalid option: '$option'\n";
      $result = 0;
    }

    if ( ! $result ) {
      $parameter = $count; # Finish looping.
    } else {

      # Must print a header for httpd to strip-off:

      if ( $lowercase_option eq 'format' ) {
        my $type = $lowercase_value;
        print "Content-type: $content_types{$type}; charset=iso-8859-1\n\n";
      }

      if ( $lowercase_option ne 'levels' ) {
        $query_string .= '&' . $option . '=' . $value;        
      }
    }
  }

  # Must print a header for httpd to strip-off:

  if ( $format eq '' ) {
    print "Content-type: text/plain; charset=iso-8859-1\n\n";
  }

  $result = $result && required_options_specified();
  return $result;
}


# Parse service option.

sub parse_service_option {
  my $value = shift;
  my $result =
    parse_option( $service, $value, 'SERVICE', 'wcs kill killall sleep' );
  return $result;
}



# Parse version option.

sub parse_version_option {
  my $value = shift;
  my $result = parse_option( $version, $value, 'VERSION', '1.0.0' );
  return $result;
}



# Parse request option.

sub parse_request_option {
  my $value = shift;
  my $result =
    parse_option( $request, $value, 'REQUEST',
                  'getcoverage getcapabilities describecoverage getmetadata' );
  return $result;
}



# Parse format option:

sub parse_format_option {
  my $value = shift;
  my $result = parse_option( $format, $value, 'FORMAT',
                             'xdr ascii netcdf-coards netcdf-ioapi original');
  return $result;
}



# Parse coverage option.

sub parse_coverage_option {
  my $value = shift;
  my $result = 0;
  my $found = 0;

  if ( $variable ne '' ) {
    print STDERR "\nRedundant COVERAGE option: '$value'\n";
  } else {
    my @components = split( /\./, $value );
    my $count = @components;

    if ( $count == 2 ) {
      $mod = $components[ 0 ];
      my $metadata = $mod_metadata{ $mod };

      if ( $metadata ) {
        my $variables = $metadata->{ variables };
        my @selected_variables = split( /\,/, $components[ 1 ] );
        my $variable_count = @selected_variables;
        $found = 1;

        foreach my $each_variable ( @selected_variables ) {

          if ( $found ) {
            $found = grep { /^$each_variable$/ } @$variables;

            if ( $found ) {
              $variable .= " " . capitalized( $each_variable );
            }
          }

          debug( "$mod $variable" );
        }
      }
    }
  }

  if ( $found == 0 ) {
    print STDERR "\nInvalid COVERAGE option: '$value'\n";
  } else {
    $result = 1;
  }

  return $result;
}



# Parse time option.

sub parse_time_option {
  my $value = shift;
  my $result = 0;

  if ( $time ne '' ) {
    print STDERR "\nRedundant TIME option: '$value'\n";
  } else {
    $time = $value;
    my $is_valid = is_valid_time( $time );

    if ( ! $is_valid ) {
      print STDERR "\nInvalid TIME option: '$value'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse bbox option.

sub parse_bbox_option {
  my $value = shift;
  my $result = 0;

  if ( $bbox ne '' ) {
    print STDERR "\nRedundant BBOX option: '$value'\n";
  } else {
    $bbox = $value;
    my @bounds = split( /,/, $bbox );
    my $bounds_count = @bounds;

    if ( $bounds_count != 4 && $bounds_count != 6 ) {
      print STDERR "\nInvalid bbox option: '$value'\n";
    } elsif ( ! in_range( $bounds[ 0 ], -180.0, 180.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 0 ]'\n";
    } elsif ( ! in_range( $bounds[ 1 ], -90.0, 90.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 1 ]'\n";
    } elsif ( ! in_range( $bounds[ 2 ], $bounds[ 0 ], 180.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 2 ]'\n";
    } elsif ( ! in_range( $bounds[ 3 ], $bounds[ 1 ], 90.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 3 ]'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse stride option.

sub parse_stride_option {
  my $value = shift;
  my $result = 0;

  if ( $stride ne '' || $sparse ne '' ) {
    print STDERR "\nRedundant STRIDE option: '$value'\n";
  } else {
    $stride = $value;
    my $is_valid = $stride > 0;

    if ( ! $is_valid ) {
      print STDERR "\nInvalid STRIDE option: '$value'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse sparse option.

sub parse_sparse_option {
  my $value = shift;
  my $result = 0;

  if ( $sparse ne '' || $stride ne '' ) {
    print STDERR "\nRedundant SPARSE option: '$value'\n";
  } else {
    $sparse = $value;
    my $is_valid = $sparse >= 0;

    if ( ! $is_valid ) {
      print STDERR "\nInvalid SPARSE option: '$value'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse corners option:

sub parse_corners_option {
  my $value = shift;
  my $result = 0;
  
  if ( $corners ne '' ) {
    print STDERR "\nRedundant CORNERS option: '$value'\n";
  } else {
    $corners = $value;
    my $is_valid = $corners == 0 || $corners == 1;
    
    if ( ! $is_valid ) {
      print STDERR "\nInvalid CORNERS option: '$value'\n";
    } else {
      $result = 1;
    }
  }
  
  return $result;
}



# Parse compress option:

sub parse_compress_option {
  my $value = shift;
  my $result = 0;

  if ( $compress ne '' ) {
    print STDERR "\nRedundant COMPRESS option: '$value'\n";
  } else {
    $compress = $value;
    my $is_valid = $compress == 0 || $compress == 1;

    if ( ! $is_valid ) {
      print STDERR "\nInvalid COMPRESS option: '$value'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse regrid option:

sub parse_regrid_option {
  my $value = shift;
  my $result = parse_option( $regrid, $value, 'REGRID',
                             'nearest mean weighted' );
  return $result;
}



# Parse regrid_aggregate option:

sub parse_regrid_aggregate_option {
  my $value = shift;
  my $result = parse_option( $regrid_aggregate, $value, 'REGRID_AGGREGATE',
                             'none all daily' );
  return $result;
}



# Parse lambert option.

sub parse_lambert_option {
  my $value = shift;
  my $result = 0;

  if ( $lambert ne '' ) {
    print STDERR "\nRedundant LAMBERT option: '$value'\n";
  } else {
    $lambert = $value;
    my @values = split( /,/, $value );
    my $count = @values;

    if ( $count != 4 ) {
      print STDERR "\nInvalid LAMBERT option: '$value'\n";
    } elsif ( ! in_range( $values[ 0 ], -89.0, 89.0 ) ) {
      print STDERR "\nInvalid LAMBERT option: '$values[ 0 ]'\n";
    } elsif ( ! in_range( $values[ 1 ], -89.0, 89.0 ) ) {
      print STDERR "\nInvalid LAMBERT option: '$values[ 1 ]'\n";
    } elsif ( ! in_range( $values[ 2 ], -180.0, 180.0 ) ) {
      print STDERR "\nInvalid LAMBERT option: '$values[ 2 ]'\n";
    } elsif ( ! in_range( $values[ 3 ], -89.0, 89.0 ) ) {
      print STDERR "\nInvalid LAMBERT option: '$values[ 3 ]'\n";
    } elsif ( $values[ 0 ] > $values[ 1 ] ) {
      print STDERR "\nInvalid LAMBERT option: '$values[ 1 ]'\n";
    } elsif ( $values[ 0 ] > 0.0 && $values[ 1 ] < 0.0 ) {
      print STDERR "\nInvalid LAMBERT option: '$values[ 1 ]'\n";
    } elsif ( $values[ 0 ] < 0.0 && $values[ 1 ] > 0.0 ) {
      print STDERR "\nInvalid LAMBERT option: '$values[ 1 ]'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse stereographic option.

sub parse_stereographic_option {
  my $value = shift;
  my $result = 0;

  if ( $stereographic ne '' ) {
    print STDERR "\nRedundant STEREOGRAPHIC option: '$value'\n";
  } else {
    $stereographic = $value;
    my @values = split( /,/, $value );
    my $count = @values;

    if ( $count != 3 ) {
      print STDERR "\nInvalid STEREOGRAPHIC option: '$value'\n";
    } elsif ( ! in_range( $values[ 0 ], -180.0, 180.0 ) ) {
      print STDERR "\nInvalid STEREOGRAPHIC option: '$values[ 0 ]'\n";
    } elsif ( ! in_range( $values[ 1 ], -90.0, 90.0 ) ) {
      print STDERR "\nInvalid STEREOGRAPHIC option: '$values[ 1 ]'\n";
    } elsif ( ! in_range( $values[ 2 ], -90.0, 90.0 ) ) {
      print STDERR "\nInvalid STEREOGRAPHIC option: '$values[ 2 ]'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse mercator option.

sub parse_mercator_option {
  my $value = shift;
  my $result = 0;

  if ( $mercator ne '' ) {
    print STDERR "\nRedundant MERCATOR option: '$value'\n";
  } else {
    $mercator = $value;
    my @values = split( /,/, $value );
    my $count = @values;

    if ( $count != 1 ) {
      print STDERR "\nInvalid MERCATOR option: '$value'\n";
    } elsif ( ! in_range( $values[ 0 ], -180.0, 180.0 ) ) {
      print STDERR "\nInvalid MERCATOR option: '$values[ 0 ]'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse lonlat option.

sub parse_lonlat_option {
  my $value = shift;
  my $result = 0;

  if ( $lonlat ne '' ) {
    print STDERR "\nRedundant LONLAT option: '$value'\n";
  } else {
    $lonlat = 1;
    $result = 1;
  }

  return $result;
}



# Parse ellipsoid option.

sub parse_ellipsoid_option {
  my $value = shift;
  my $result = 0;

  if ( $ellipsoid ne '' ) {
    print STDERR "\nRedundant ELLIPSOID option: '$value'\n";
  } else {
    $ellipsoid = $value;
    my @values = split( /,/, $value );
    my $count = @values;

    if ( $count != 1 && $count != 2 ) {
      print STDERR "\nInvalid ELLIPSOID option: '$value'\n";
    } elsif ( ! in_range( $values[ 0 ], 1.0, 1e10 ) ) {
      print STDERR "\nInvalid ELLIPSOID option: '$values[ 0 ]'\n";
    } elsif ( $count == 2 ) {

      if ( ! in_range( $values[ 1 ], $values[ 0 ], 1e10 ) ) {
        print STDERR "\nInvalid ELLIPSOID option: '$values[ 1 ]'\n";
      } else {
        $result = 1;
      }
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse grid option.

sub parse_grid_option {
  my $value = shift;
  my $result = 0;

  if ( $grid ne '' ) {
   print STDERR "\nRedundant GRID option: '$value'\n";
  } else {
    $grid = $value;
    my @values = split( /,/, $value );
    my $count = @values;

    if ( $count != 6 ) {
      print STDERR "\nInvalid GRID option: '$value'\n";
    } elsif ( $values[ 0 ] < 1 ) {
      print STDERR "\nInvalid GRID option: '$values[ 0 ]'\n";
    } elsif ( $values[ 1 ] < 1 ) {
      print STDERR "\nInvalid GRID option: '$values[ 1 ]'\n";
    } elsif ( ! in_range( $values[ 2 ], -1e10, 1e10 ) ) {
      print STDERR "\nInvalid GRID option: '$values[ 2 ]'\n";
    } elsif ( ! in_range( $values[ 3 ], -1e10, 1e10 ) ) {
      print STDERR "\nInvalid GRID option: '$values[ 3 ]'\n";
    } elsif ( ! in_range( $values[ 4 ], 0.01, 1e10 ) ) {
      print STDERR "\nInvalid GRID option: '$values[ 4 ]'\n";
    } elsif ( ! in_range( $values[ 5 ], 0.01, 1e10 ) ) {
      print STDERR "\nInvalid GRID option: '$values[ 5 ]'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse levels option.

sub parse_levels_option {
  my $value = shift;
  my $result = 0;

  if ( $levels ne '' ) {
    print STDERR "\nRedundant LEVELS option: '$value'\n";
  } else {
    $levels = $value;
    my @values = split( /,/, $value );
    my $count = @values;

    if ( $count != 3 + $values[ 0 ] + 1 + 5 ) {
      print STDERR "\nInvalid LEVELS option: '$value'\n";
    } elsif ( ! in_range( $values[ 0 ], 1, 100 ) ) {
      print STDERR "\nInvalid LEVELS option: '$values[ 0 ]'\n";
    } elsif ( ! in_range( $values[ 1 ], 1, 7 ) ) {
      print STDERR "\nInvalid LEVELS option: '$values[ 1 ]'\n";
    } elsif ( ! in_range( $values[ 2 ], 0.0, 1e8 ) ) {
      print STDERR "\nInvalid LEVELS option: '$values[ 2 ]'\n";
    } else {

      # Ensure level values are ordered decreasing if sigma-p else increasing:

      my $end = $count - 5;
      my $minimum = 0.0;
      my $maximum = $lonlat ne '' ? 100000.0 : 1.0;
      my $ok = 0;

      for ( my $index = 3; $index < $end; ++$index ) {
        my $level_value = $values[ $index ];
        $ok = in_range( $level_value, $minimum, $maximum );

        if ( ! $ok ) {
          print STDERR "\nInvalid LEVELS option: '$values[ $index ]'\n";
          $index = $count;
        } elsif ( $lonlat ne '' ) {
          $minimum = $level_value;
        } else {
          $maximum = $level_value;
        }
      }

      # Check last parameter constants:

      if ( $ok == 1 ) {
        my $index = $count - 5;

        if ( ! in_range( $values[ $index ], 0.01, 1e2 ) ) {
          print STDERR "\nInvalid LEVELS option: '$values[ $index ]'\n";
        } elsif ( ! in_range( $values[ $index + 1 ], 0.01, 1e4 ) ) {
          print STDERR "\nInvalid LEVELS option: '$values[ $index + 1 ]'\n";
        } elsif ( ! in_range( $values[ $index + 2 ], 0.01, 1e4 ) ) {
          print STDERR "\nInvalid LEVELS option: '$values[ $index + 2 ]'\n";
        } elsif ( ! in_range( $values[ $index + 3 ], 0.01, 1e4 ) ) {
          print STDERR "\nInvalid LEVELS option: '$values[ $index + 3 ]'\n";
        } elsif ( ! in_range( $values[ $index + 4 ], 0.01, 1e6 ) ) {
          print STDERR "\nInvalid LEVELS option: '$values[ $index + 4 ]'\n";
        } else {
          $result = 1;
        }
      }
    }
  }

  return $result;
}



# Check that all required 'options' have been specified:

sub required_options_specified {
  my $result = 0;

  if ( $service eq 'kill' || $service eq 'killall' ) {
    $result = 1;
  } elsif ( $service eq '' ) {
    print STDERR "\nMissing option: 'SERVICE'\n";
  } elsif ( $version eq '' ) {
    print STDERR "\nMissing option: 'VERSION'\n";
  } elsif ( $request eq '' ) {
    print STDERR "\nMissing option: 'REQUEST'\n";
  } elsif ( $request eq 'getcoverage' ) {

    if ( $variable eq '' ) {
      print STDERR "\nMissing option: 'COVERAGE'\n";
    } elsif ( $format eq '' ) {
      print STDERR "\nMissing option: 'FORMAT'\n";
    } elsif ( $time eq '' ) {
      print STDERR "\nMissing option: 'TIME'\n";
    } elsif ( $bbox eq '' ) {
      print STDERR "\nMissing option: 'BBOX'\n";
    } else {
      my $regrid_count = 0;
      $regrid_count += $regrid ne '';
      $regrid_count += $ellipsoid ne '';
      $regrid_count += $grid ne '';
      my $projection_count = 0;
      $projection_count += $lambert ne '';
      $projection_count += $stereographic ne '';
      $projection_count += $mercator ne '';
      $projection_count += $lonlat ne '';        

      $result =
        $regrid_count == 0 && $projection_count == 0 ||
        $regrid_count == 3 && $projection_count == 1;

      if ( ! $result ) {
        print STDERR "\nInvalid options: 'REGRID/";
        print STDERR "LAMBERT/STEREOGRAPHIC/MERCATOR/LONLAT/";
        print STDERR "GRID/ELLIPSOID'\n";
      }
    }
  } else {
    $result = 1;
  }

  return $result;
}



############################### HELPER ROUTINES ##############################



# debug( $message );

sub debug {
  my $message = shift;

  if ( $debugging ) {
    print STDERR "\n$message\n";
####print STDOUT "\n$message\n";
  }
}



# Execute command and echo its output to STDOUT. E.g., execute_command( 'ls' );

sub execute_command {
  my $command = shift;
  my $result = 0;
  my $the_pipe = 0;

  # Untaint command (match expression is arbitrary as far as -T is concerned):

  if ( $command =~ m#^(/[\w-]+/[\w -/.,':?=&]+)$# ) {
    $command = $1; # Re-assign first match, which is enough to satisfy -T.
    debug( "$0 executing command = $command" );
    %ENV = (); # Unset all environment variables prior to popen.
    # Complicated, supposedly safer way to open a readable pipe to command:
    my $pid = open( the_pipe, "-|" );

    if ( ! defined( $pid ) ) {
      die "Couldn't open pipe to subprocess";
    } elsif ( $pid ) { # Parent process.

     while ( <the_pipe> ) {
       print;
     }

      close( the_pipe ) or die $!;
      $result = ! $?;
    } else { # Child process.
      exec( $command ) or die "can't exec program: $!";
    }
  } else {
    print STDERR "\n$0: '$command' contains invalid characters.\n";
  }

  return $result;
}


# my $result = parse_option( $option, $value, $option_name, $valid_values );
# my $result = parse_option( $variable, $value, 'COVERAGE', 'ozone pm25' );

sub parse_option {
  my ( $option, $value, $option_name, $valid_values ) = @_;
  my $result = 0;

  if ( $option ne '' ) {
    print STDERR "\nRedundant $option_name option: '$value'\n";
  } else {
    $result = index( " $valid_values ", " $value " ) != -1;

    if ( $result ) {
      $_[ 0 ] = $value;
    } else {
      print STDERR "\nInvalid $option_name option: '$value'\n";
    }
  }

  return $result;
}



# my $ok = in_range( $value, $minimum, $maximum );

sub in_range {
  my ( $value, $minimum, $maximum ) = @_;
  my $result = $value >= $minimum && $value <= $maximum;
  return $result;
}



# my $is_valid = is_valid_time( '2001-08-26t20:00:00z/2001-08-27t23:59:59z' );

sub is_valid_time {
  my $time = shift;
  my $result = 0;
  my $length = length( $time );

  if ( $length == 41 ) {
    $result = is_valid_time( substr( $time, 0, 20 ) );
    $result = $result && substr( $time, 20, 1 ) eq '/';
    $result = $result && is_valid_time( substr( $time, 21, 20 ) );
    $result = $result && substr( $time, 0, 20 ) le substr( $time, 21, 20 );
  } elsif ( $length == 20 ) {
    my $year   = substr( $time, 0, 4 );
    my $month  = substr( $time, 5, 2 );
    my $day    = substr( $time, 8, 2 );
    my $hour   = substr( $time, 11, 2 );
    my $minute = substr( $time, 14, 2 );
    my $second = substr( $time, 17, 2 );
    $result = in_range( $year, 1900, 3000 );
    $result = $result && in_range( $month, 1, 12 );
    $result = $result && in_range( $day, 1, days_in_month( $year, $month ) );
    $result = $result && in_range( $hour, 0, 23 );
    $result = $result && in_range( $minute, 0, 59 );
    $result = $result && in_range( $second, 0, 59 );
    $result = $result && substr( $time, 4, 1 ) eq '-';
    $result = $result && substr( $time, 7, 1 ) eq '-';
    $result = $result && substr( $time, 10, 1 ) eq 't';
    $result = $result && substr( $time, 13, 1 ) eq ':';
    $result = $result && substr( $time, 16, 1 ) eq ':';
    $result = $result && substr( $time, 19, 1 ) eq 'z';
  }

  return $result;
}



# my $leap = is_leap_year( $year );

sub is_leap_year {
  my $year = shift;
  my $result = $year % 4 == 0 && ! ( $year % 100 == 0 && ! $year % 400 == 0 );
  return $result;
}



# my $days = days_in_month( $year, $month );

sub days_in_month {
  my $year  = shift;
  my $month = shift;

  # 30 days hath September, April, June and November...

  my @days_per_month = ( 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 );
  my $result = $days_per_month[ $month - 1 ];

  if ( $month == 2 ) {

    if ( is_leap_year( $year ) ) {
      ++$result;
    }
  }

  return $result;
}



# my $capped = capitalized( $all_lowercase );

sub capitalized {
  my $word = shift;
  my @words = split( /_/, $word );
  my $count = @words;
  my $result = uc( substr( $words[ 0 ], 0, 1 ) ) . substr( $words[ 0 ], 1 );

  for ( my $index = 1; $index < $count; ++$index ) {
    $result .= '_' . uc( substr( $words[ $index ], 0, 1 ) )
                   . substr( $words[ $index ], 1 );
  }

  return $result;
}




