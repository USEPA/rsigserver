#!/usr/bin/perl -wT

##############################################################################
# PURPOSE: omibehrioapiserver - Serve OMI BEHR data (OMI-BEHR satellite-
#          measured NO2 regridded to NetCDF-IOAPI grid),
#          subsetted by date/time range, variable, and longitude-latitude box,
#          in ASCII, XDR, NetCDF-COARDS, NetCDF-IOAPI and original formats
#          for use by other programs (e.g., via wget).
#
# NOTES:   Server is WCS-compliant:
#          https://www.opengeospatial.org/standards/wcs
#          https://datafed.net/xs/OpenGIS/wcs/1.0.0/
#          and modeled after a similar webserver application:
#          https://webapps.datafed.net/ogc_EPA.wsfl
#
#          Launches the C program CMAQSubset which streams the data on STDOUT.
#
#          Example usage:
#
#          wget -q -T 0 -O - 'https://ofmpub.epa.gov/rsig/omibehrioapiserver?\
#                     SERVICE=wcs&\
#                     VERSION=1.0.0&\
#                     REQUEST=GetCoverage&\
#                     COVERAGE=no2&\
#                     TIME=2011-01-01T00:00:00Z/2011-01-01T23:59:59Z&\
#                     BBOX=-90,28,-80,32,1,1&\
#                     FORMAT=ascii'
#
# HISTORY: 2016-06-23 plessel.todd@epa.gov 1-919-541-5500
#
# STATUS:  unreviewed tested
##############################################################################

use strict;
package main;
$| = 1; # Turn off output buffering so messages appear in correct order.
alarm( 3600 ); # Kill process after 1 hour. Legitimate usage could be an hour!
# Restrict PATH and ENV. (But before popen, ENV is cleared!)
delete @ENV{ 'PATH', 'IFS', 'CDPATH', 'ENV', 'BASH_ENV' };


############################## TUNABLE CONSTANTS #############################


my $debugging = 0; # 1 = print debug messages to STDERR logs/error_log.

# Server where this program is installed:

my $server_path = 'https://YOUR_WEBSERVER_HOST/cgi-bin';

# Internal EPA server where the data and subset program are installed:

my $data_directory = '/data/BEHR/data/ioapi';
my $bindir     = '/rsig/current/code/bin/Linux.x86_64';
my $subsetter  = "$bindir/CMAQSubset";
my $xdrconvert = "$bindir/XDRConvert";
my $compressor = "$bindir/gzip -c -1";

# Output messages when REQUEST=GetMetadata.
# Print this message first:

my $metadata_content = '
BEHR gridded global satellite measured atmospheric data accessed using RSIG.
https://behr.cchem.berkeley.edu/berkeley-high-resolution-no2-product/
https://behr.cchem.berkeley.edu/download-behr-data/
RSIG: https://www.epa.gov/rsig
';

# If FORMAT=original then print this message second:

my $metadata_content_original = '
The list of original data files are shown below.

';

# Else FORMAT!=original then print this message second:

my $metadata_content_processed = '
Data processing was done using the RSIG programs CMAQSubset and XDRConvert.
CMAQSubset is used to subset (by variable, lon-lat box and time range)
and reorganize/reformat and filter the data.
XDRConvert is optionally used to regrid, aggregate and reformat the data
to other file formats.
The list of original data files and the RSIG command used to process them
are shown below.

';

# Query string parsing routine dispatch table:

my %parsers = (
  'service'  => \&parse_service_option,
  'version'  => \&parse_version_option,
  'request'  => \&parse_request_option,
  'coverage' => \&parse_coverage_option,
  'time'     => \&parse_time_option,
  'bbox'     => \&parse_bbox_option,
  'format'   => \&parse_format_option,
  'compress' => \&parse_compress_option,
  'nolonlats' => \&parse_nolonlats_option,
  'aggregate' => \&parse_aggregate_option
);


# Webserver content types for each output format:

my %content_types = (
  'ascii'         => 'text/plain',
  'xdr'           => 'application/octet-stream',
  'netcdf-coards' => 'application/netcdf',
  'netcdf-ioapi'  => 'application/netcdf',
  'original'           => 'application/octet-stream'
);

# Full URL path to this program:

my @pathed_program_parts = split( /\//, $0 );
my $program_name = $pathed_program_parts[ @pathed_program_parts - 1 ];
my $program = "$server_path/$program_name";


# Variable lists:

my @variables = ( 'no2' );
my @units = ( 'molecules/cm2' );
my @descriptions = (
  'IOAPI lonlat regridded OMI-BEHR satellite-measured total column NO2.'
);


################################## VARIABLES #################################


# Parsed from the URL query string:

my $service  = ''; # wcs.
my $version  = ''; # 1.0.0.
my $request  = ''; # getcapabilities or describecoverage or getcoverage.
my $coverage = ''; # Saved until time has been parsed.
my $format   = ''; # xdr, ascii, netcdf, ioapi.
my $compress = ''; # 1 = | gzip -c otherwise don't compress (default).
my $time     = ''; # E.g., 2001-08-29t00:00:00z/2001-08-31t23:59:59z.
my $bbox     = ''; # E.g., -90,28,-80,32,1,1. Where 1,1 means layer 1 only.
my $nolonlats = ''; # 1 = omit lonlat variables in XDR output. 0 is default.
my $aggregate = ''; # NONE, DAILY_MEAN, DAILY_MAX, DAILY_MAX8. NONE is default.

# Derived from the above parsed values:

my $data_files         = ''; # /data/BEHR/data/2011/OMI_BEHR_NO2_20110101.ncf
my $ellipsoid          = ''; # E.g., '6370000 6370000'.
my @bounds = split( /,/, '-180,-90,180,90' );
my $layers             = ''; # E.g., 14.
my $starting_timestamp = 0;  # yyyymmddhh, e.g., 2005082600.
my $ending_timestamp   = 0;  # yyyymmddhh, e.g., 2005082600.
my $hours              = 0;  # E.g., 5 days = 5 x 24 = 120.
my $command            = ''; # Subset command to run.


################################## ROUTINES ##################################


main();


sub main {
  my $result = 0;

  if ( ! parse_url() ) {
    print "Content-type: text/plain; charset=iso-8859-1\n\n"; # For webserver
  } elsif ( $request eq 'getcapabilities' ) {
    print "Content-type: text/xml; charset=iso-8859-1\n\n"; # For webserver
    print_capabilities();
    $result = 1;
  } elsif ( $request eq 'describecoverage' ) {
    print "Content-type: text/xml; charset=iso-8859-1\n\n"; # For webserver
    print_coverage_description();
    $result = 1;
  } elsif ( $request eq 'getcoverage' ) {
    print "Content-type: $content_types{ $format }; charset=iso-8859-1\n\n";
    compute_time_range();
    compute_input_files();

    if ( $data_files ne '' ) {
      $result = construct_command();
      $result = $result && execute_command( $command );
    }
  } elsif ( $request eq 'getmetadata' ) {
    print "Content-type: text/plain; charset=iso-8859-1\n\n"; # For webserver
    compute_time_range();
    compute_input_files();

    if ( $data_files ne '' ) {
      $result = construct_command();

      if ( $result ) {
        print $metadata_content;
        $data_files =~ tr/ /\n/;

        if ( $format eq 'original' ) {
          print $metadata_content_original;
          print "$data_files\n";
        } else {
          print $metadata_content_processed;
          print "$data_files\n\n";
          print "$command\n\n";
        }
      }
    }
  }

  $result = 1 - $result; # UNIX: zero is success, non-zero is failure.
  debug( "exit result = $result" );
  exit $result;
}



# Print web server capabilities metadata.

sub print_capabilities {
  print '<?xml version="1.0" encoding="UTF-8" ?>' . "\n";
  print '<WCS_Capabilities version="1.0.0" ';
  print 'xmlns="https://www.opengeospatial.org/standards/wcs" ';
  print 'xmlns:gml="https://www.opengis.net//gml" ';
  print 'xmlns:xlink="https://www.w3.org/1999/xlink">';
  print '
    <Service>
        <metadataLink xlink:type="simple" xlink:href=" https://www.epa.gov/rsig" metadataType="other" />
        <description>EPA BEHR-IOAPI Web Server 1.0.0</description>
        <name>EPA_BEHR-IOAPI_OGC_WCS_1.0.0</name>
        <label>EPA BEHR-IOAPI Web Server 1.0.0</label>
        <keywords>
            <keyword>EPA</keyword>
            <keyword>BEHR-IOAPI</keyword>
            <keyword>interoperability</keyword>
        </keywords>
        <responsibleParty>
            <individualName>Todd Plessel</individualName>
            <organisationName>EPA Vislab</organisationName>
            <contactInfo>
                <onlineResource xlink:type="simple" xlink:href="mailto:plessel.todd@epa.gov" />
            </contactInfo>
        </responsibleParty>
        <fees>NONE</fees>
        <accessConstraints>NONE</accessConstraints>
    </Service>
    <Capability>
        <Request>
            <GetCapabilities>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/cmaqserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/cmaqserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </GetCapabilities>
            <DescribeCoverage>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/cmaqserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/cmaqserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </DescribeCoverage>
            <GetCoverage>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/cmaqserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/cmaqserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </GetCoverage>
        </Request>
        <Exception>
            <Format>text/xml; charset="utf-8"</Format>
        </Exception>
    </Capability>
    <ContentMetadata version="1.0.0">';
  print "\n";

  my $variable_count = @variables;

  for ( my $variable_index = 0; $variable_index < $variable_count;
        ++$variable_index ) {
    my $this_variable    = $variables[ $variable_index ];
    my $this_units       = $units[ $variable_index ];
    my $this_description = $descriptions[ $variable_index ];
    print "        <CoverageOfferingBrief>\n";
    print "            <name>$this_variable</name>\n";
    print "            <label>$this_variable($this_units)</label>\n";
    print "            <description>$this_description</description>\n";
    print '            <lonLatEnvelope srsName="WGS84(DD)">';
    print "\n";
    print "                <gml:pos>-125 25</gml:pos>\n";
    print "                <gml:pos>-65 50</gml:pos>\n";
    print "            </lonLatEnvelope>\n";
    print "        </CoverageOfferingBrief>\n";
  }

  print "    </ContentMetadata>\n";
  print "</WCS_Capabilities>\n";
}



# Print web server coverage description metadata.

sub print_coverage_description {
  print '<?xml version="1.0" encoding="UTF-8" ?>';
  print '<CoverageDescription version="1.0.0" ';
  print 'xmlns="https://www.opengeospatial.org/standards/wcs" ';
  print 'xmlns:gml="https://www.opengis.net/gml" ';
  print 'xmlns:xlink="https://www.w3.org/1999/xlink">';
  print "\n";

  my $variable_count = @variables;

  for ( my $variable_index = 0; $variable_index < $variable_count;
        ++$variable_index ) {
    my $this_variable    = $variables[ $variable_index ];
    my $this_units       = $units[ $variable_index ];
    my $this_description = $descriptions[ $variable_index ];

    if ( $coverage eq '' || $coverage eq $this_variable ) {
      print "    <CoverageOffering>\n";
      print "        <name>$this_variable</name>\n";
      print "        <label>$this_variable($this_units)</label>\n";
      print "        <description>$this_description</description>\n";
      print "        <domainSet>\n";
      print "            <spatialDomain>\n";
      print '                <gml:Envelope srsName="WGS84(DD)">';
      print "\n";
      print "                    <gml:pos>-125 25</gml:pos>\n";
      print "                    <gml:pos>-65 50</gml:pos>\n";
      print "                </gml:Envelope>\n";
      print "            </spatialDomain>\n";
      print "            <temporalDomain>\n";
      print "                <timePeriod>\n";
      print "                    <beginPosition>2011-01-01";
      print "T00:00:00Z</beginPosition>\n";
      print "                    <endPosition>2015-12-31";
      print "T23:59:59Z</endPosition>\n";
      print "                    <timeResolution>PT1H</timeResolution>\n";
      print "                </timePeriod>\n";
      print "            </temporalDomain>\n";
      print "        </domainSet>\n";
      print "        <rangeSet>\n";
      print "            <RangeSet>\n";
      print "                <name>$this_variable</name>\n";
      print "                <label>$this_variable($this_units)</label>\n";
      print "                <description>$this_description</description>";
      print '
                <nullValues>
                    <singleValue>-9999.0</singleValue>
                </nullValues>
            </RangeSet>
        </rangeSet>
        <supportedCRSs>
            <requestResponseCRSs>CRS:84</requestResponseCRSs>
            <nativeCRSs>CRS:84</nativeCRSs>
        </supportedCRSs>
        <supportedFormats>
            <formats>ASCII XDR NetCDF-COARDS NetCDF-IOAPI</formats>
        </supportedFormats>
        <supportedInterpolations>
            <interpolationMethod>none</interpolationMethod>
        </supportedInterpolations>
    </CoverageOffering>
';
    }
  }

  print "</CoverageDescription>\n";
}



# Parse URL parameters into variables.

sub parse_url {
  use CGI qw/ untaint /;     # Load Safe untainting CGI routines.
  $CGI::DISABLE_UPLOADS = 1; # Disable uploads.
  $CGI::POST_MAX = 1024;     # Limit posts to 1024 bytes.
  my $query = new CGI;       # Parse QUERY_STRING.
  %ENV = ();                 # Unset all environment variables.
  my @names = $query->param; # Extract names of parameters.
  my $count = @names;
  my $result = 0;
  debug( "$program_name @names ($count)" );

  for ( my $parameter = 0; $parameter < $count; ++$parameter) {
    $_ = $names[ $parameter ];                # $_ is tainted.
    s/[^A-Za-z]/_/go;                         # Untaint $_.
    my $option = $_;                          # $option is untainted.
    $_ = $query->param( $option );            # $_ is tainted.
    s/[^\w\-.,:\/]/_/go;                      # Untaint $_.
    my $value = $_;                           # $value is untainted.
    my $lowercase_option = lc( $option );
    my $lowercase_value  = lc( $value );
    debug( "$lowercase_option $lowercase_value" );

    if ( $parsers{ $lowercase_option } ) {
      $result = $parsers{ $lowercase_option }->( $lowercase_value );
    } else {
      print STDERR "\nInvalid option #$parameter\n";
      $result = 0;
    }

    if ( ! $result ) {
      $parameter = $count; # Finish looping.
    }
  }

  $result = $result && required_options_specified();
  return $result;
}



# Parse service option.

sub parse_service_option {
  my $value = shift;
  my $result = parse_option( $service, $value, 'SERVICE', 'wcs' );
  return $result;
}



# Parse version option.

sub parse_version_option {
  my $value = shift;
  my $result = parse_option( $version, $value, 'VERSION', '1.0.0' );
  return $result;
}



# Parse request option.

sub parse_request_option {
  my $value = shift;
  my $result =
    parse_option( $request, $value, 'REQUEST',
                  'getcoverage getcapabilities describecoverage getmetadata' );
  return $result;
}



# Parse format option:

sub parse_format_option {
  my $value = shift;
  my $result =
    parse_option( $format, $value, 'FORMAT',
                  'xdr ascii netcdf-coards netcdf-ioapi netcdf ioapi original');
  return $result;
}



# Parse coverage option.

sub parse_coverage_option {
  my $value = shift;
  my $result = 0;

  if ( $coverage eq '' ) {
    my $variable_count = @variables;

    for ( my $variable_index = 0;
          $result == 0 && $variable_index < $variable_count;
          ++$variable_index ) {
      my $this_variable = $variables[ $variable_index ];

      if ( $value eq $this_variable ) {
        $coverage = $value;
        $result = 1;
      }
    }

  } else {
    print STDERR "\nRedundant COVERAGE option\n";
  }

  return $result;
}



# Parse time option.

sub parse_time_option {
  my $value = shift;
  my $result = 0;

  if ( $time ne '' ) {
    print STDERR "\nRedundant TIME option\n";
  } else {
    $time = $value;
    my $is_valid = is_valid_time( $time );

    if ( ! $is_valid ) {
      print STDERR "\nInvalid TIME option\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse bbox option.

sub parse_bbox_option {
  my $value = shift;
  my $result = 0;

  if ( $bbox ne '' ) {
    print STDERR "\nRedundant BBOX option\n";
  } else {
    $bbox = $value;
    @bounds = split( /,/, $bbox );
    my $bounds_count = @bounds;

    if ( $bounds_count != 4 && $bounds_count != 6 ) {
      print STDERR "\nInvalid BBOX option (requires 4 or 6 numbers).\n";
    } elsif ( ! in_range( $bounds[ 0 ], -180.0, 180.0 ) ) {
      print STDERR "\nInvalid BBOX option (1st number)\n";
    } elsif ( ! in_range( $bounds[ 1 ], -90.0, 90.0 ) ) {
      print STDERR "\nInvalid BBOX option (2nd number)\n";
    } elsif ( ! in_range( $bounds[ 2 ], $bounds[ 0 ], 180.0 ) ) {
      print STDERR "\nInvalid BBOX option (3rd number)\n";
    } elsif ( ! in_range( $bounds[ 3 ], $bounds[ 1 ], 90.0 ) ) {
      print STDERR "\nInvalid BBOX option (4th number)\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse nolonlats option.

sub parse_nolonlats_option {
  my $value = shift;
  my $result = 0;

  if ( $nolonlats ne '' ) {
    print STDERR "\nRedundant NOLONLATS option: '$value'\n";
  } else {
    $nolonlats = $value;
    my $is_valid = $nolonlats == 0 || $nolonlats == 1;

    if ( ! $is_valid ) {
      print STDERR "\nInvalid NOLONLATS option: '$value'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse aggregate option.

sub parse_aggregate_option {
  my $value = shift;
  my $result =
    parse_option( $aggregate, $value, 'AGGREGATE',
                  'none daily_mean daily_max daily_max8' );
}



# Parse compress option.

sub parse_compress_option {
  my $value = shift;
  my $result = 0;

  if ( $compress ne '' ) {
    print STDERR "\nRedundant COMPRESS option\n";
  } else {
    $compress = $value;
    my $is_valid = $compress == 0 || $compress == 1;

    if ( ! $is_valid ) {
      print STDERR "\nInvalid COMPRESS option (requires 0 or 1)\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Check that all required 'options' have been specified:

sub required_options_specified {
  my $result = 0;

  if ( $service eq '' ) {
    print STDERR "\nMissing option: 'SERVICE'\n";
  } elsif ( $version eq '' ) {
    print STDERR "\nMissing option: 'VERSION'\n";
  } elsif ( $request eq '' ) {
    print STDERR "\nMissing option: 'REQUEST'\n";
  } elsif ( $request eq 'getcoverage' || $request eq 'getmetadata' ) {

    if ( $format eq '' ) {
      print STDERR "\nMissing option: 'FORMAT'\n";
    } elsif ( $time eq '' ) {
      print STDERR "\nMissing option: 'TIME'\n";
    } elsif ( $bbox eq '' ) {
      print STDERR "\nMissing option: 'BBOX'\n";
    } elsif ( $coverage eq '' ) {
      print STDERR "\nMissing option: 'COVERAGE'\n";
    } else {
      $result = 1;
    }
  } else {
    $result = 1;
  }

  return $result;
}



# Compute starting_timestamp and hours.
# inputs:  $time = '2001-08-26t00:00:00z/2001-08-31t23:59:59z'
# outputs: $starting_timestamp = 2005082600
#          $ending_timestamp   = 2005083123
#          $hours = 120

sub compute_time_range {
  my $yyyy1 = substr( $time, 0, 4 );
  my $mm1   = substr( $time, 5, 2 );
  my $dd1   = substr( $time, 8, 2 );
  my $hh1   = substr( $time, 11, 2 );
  my $i     = index( $time, '/' );

  $starting_timestamp = integer_timestamp( $yyyy1, $mm1, $dd1, $hh1 );
  $ending_timestamp = $starting_timestamp;
  $hours = 1;

  if ( $i != -1 ) {
    ++$i;
    my $yyyy2 = substr( $time, $i + 0, 4 );
    my $mm2   = substr( $time, $i + 5, 2 );
    my $dd2   = substr( $time, $i + 8, 2 );
    my $hh2   = substr( $time, $i + 11, 2 );
    $ending_timestamp = integer_timestamp( $yyyy2, $mm2, $dd2, $hh2 );
    my $yyyy  = $yyyy1;
    my $mm    = $mm1;
    my $dd    = $dd1;
    my $hh    = $hh1;

    while ( integer_timestamp( $yyyy, $mm, $dd, $hh ) !=
            integer_timestamp( $yyyy2, $mm2, $dd2, $hh2 ) ) {
      increment_timestamp( $yyyy, $mm, $dd, $hh );
      ++$hours;
    }
  }
}



# Compute list of input data and elevation files.

sub compute_input_files {
  my $months_per_year = 12;
  my $hours_per_day   = 24;
  my $hh              = $starting_timestamp % 100;
  my $yyyymmdd        = int( $starting_timestamp / 100 );
  my $yyyy            = int( $yyyymmdd / 10000 );
  my $mm              = int( $yyyymmdd / 100 ) % 100;
  my $dd              = $yyyymmdd % 100;
  my $last_timestep   = $hh + $hours - 1;
  my $days            = int( 1 + $last_timestep / $hours_per_day );
  my $variable = uc( $coverage );
  $data_files = '';

  while ( $days-- ) {
    my $days_this_month = days_in_month( $yyyy, $mm );
    my $next_data_file =
      sprintf( "$data_directory/%04d/OMI_BEHR_%s_%04d%02d%02d.ncf",
               $yyyy, $variable, $yyyy, $mm, $dd );

    if ( -f $next_data_file ) {
      $data_files .= "$next_data_file ";
    }

    ++$dd;

    if ( $dd > $days_this_month ) {
      $dd = 1;
      ++$mm;

      if ( $mm > $months_per_year ) {
        $mm = 1;
        ++$yyyy;
      }
    }
  }
}



# Construct command.

sub construct_command {
  my $result = 1;

  if ( $format eq 'original' ) {
    $command = "/bin/gtar -zcO $data_files";
  } else {
    my $capitalized_variable = uc( $coverage );
    my $bounds_count = @bounds;
    my $format_option = "-format $format";
    my $my_xdrconvert = '';
    my $my_compressor = '';
    my $my_aggregate = '';
    my $lonlats_option = '';

    if ( $nolonlats ne '' ) {

      if ( $nolonlats == 0 ) {
        $lonlats_option = " -lonlats ";
      }
    }

    if ( $format eq 'netcdf-coards' ) {
      $format_option = '-format coards';
    } elsif ( $format eq 'netcdf-ioapi' ) {
      $format_option = '-format ioapi';
    }

    if ( $aggregate ne '' && $aggregate ne 'none' ) {
      $my_aggregate = " -aggregate $aggregate ";
    }

    if ( $compress ne '' && $compress == 1 ) {
      $my_compressor = " | $compressor";
    }

    my $files_option = "-tmpdir /data/tmp -files $data_files";
    my $bounds_option =
      "-bounds $bounds[ 0 ] $bounds[ 1 ] $bounds[ 2 ] $bounds[ 3 ]";
    my $time_option = " -time $starting_timestamp $ending_timestamp";
    my $elevation_option = '';

    if ( $result ) {
      $command =
        "$subsetter" .
        " $files_option" .
        " $format_option" .
        " -desc https://behr.cchem.berkeley.edu/berkeley-high-resolution-no2-product/,CMAQSubset" .
        " $lonlats_option" .
        " -elevation" .
        " -variable $capitalized_variable" .
        " $my_aggregate" .
        " $time_option" .
        " $bounds_option" .
        "$my_xdrconvert$my_compressor";
    }
  }

  return $result;
}



############################### HELPER ROUTINES ##############################



# debug( message );

sub debug {
  my $message = shift;

  if ( $debugging ) {
    print STDERR "\n$message\n";
  }
}



# Execute command and echo its output to STDOUT. E.g., execute_command( 'ls' );

sub execute_command {
  my $command = shift;
  my $result = 0;
  my $the_pipe = 0;

  # Untaint command (match expression is arbitrary as far as -T is concerned):

  if ( $command =~ m#^(/[\w-]+/[\w -/.:,'@|]+)$# ) {
    $command = $1; # Re-assign first match, which is enough to satisfy -T.
    debug( "$0 executing command = $command" );
    %ENV = (); # Unset all environment variables prior to popen.
    # Complicated, supposedly safer way to open a readable pipe to command:
    my $pid = open( the_pipe, "-|" );

    if ( ! defined( $pid ) ) {
      die "Couldn't open pipe to subprocess";
    } elsif ( $pid ) { # Parent process.

      while ( <the_pipe> ) {
        print;
      }

      close( the_pipe ) or die $!;
      $result = ! $?;
    } else { # Child process.
      exec( $command ) or die "can't exec program: $!";
    }
  } else {
    print STDERR "\n$0: command contains invalid characters.\n";
  }

  return $result;
}



# my $result = parse_option( $option, $value, $option_name, $valid_values );
# my $result = parse_option( $variable, $value, 'COVERAGE', 'ozone pm25' );

sub parse_option {
  my ( $option, $value, $option_name, $valid_values ) = @_;
  my $result = 0;

  if ( $option ne '' ) {
    print STDERR "\nRedundant $option_name option\n";
  } else {
    $result = index( " $valid_values ", " $value " ) != -1;

    if ( $result ) {
      $_[ 0 ] = $value;
    } else {
      print STDERR "\nInvalid $option_name option\n";
    }
  }

  return $result;
}



# my $ok = in_range( $value, $minimum, $maximum );

sub in_range {
  my ( $value, $minimum, $maximum ) = @_;
  my $result = $value >= $minimum && $value <= $maximum;
  return $result;
}



# my $is_valid = is_valid_time( '2001-08-26t20:00:00z/2001-08-27t23:59:59z' );

sub is_valid_time {
  my $time = shift;
  my $result = 0;
  my $length = length( $time );

  if ( $length == 41 ) {
    $result = is_valid_time( substr( $time, 0, 20 ) );
    $result = $result && substr( $time, 20, 1 ) eq '/';
    $result = $result && is_valid_time( substr( $time, 21, 20 ) );
    $result = $result && substr( $time, 0, 20 ) le substr( $time, 21, 20 );
  } elsif ( $length == 20 ) {
    my $year   = substr( $time, 0, 4 );
    my $month  = substr( $time, 5, 2 );
    my $day    = substr( $time, 8, 2 );
    my $hour   = substr( $time, 11, 2 );
    my $minute = substr( $time, 14, 2 );
    my $second = substr( $time, 17, 2 );
    $result = in_range( $year, 1900, 3000 );
    $result = $result && in_range( $month, 1, 12 );
    $result = $result && in_range( $day, 1, days_in_month( $year, $month ) );
    $result = $result && in_range( $hour, 0, 23 );
    $result = $result && in_range( $minute, 0, 59 );
    $result = $result && in_range( $second, 0, 59 );
    $result = $result && substr( $time, 4, 1 ) eq '-';
    $result = $result && substr( $time, 7, 1 ) eq '-';
    $result = $result && substr( $time, 10, 1 ) eq 't';
    $result = $result && substr( $time, 13, 1 ) eq ':';
    $result = $result && substr( $time, 16, 1 ) eq ':';
    $result = $result && substr( $time, 19, 1 ) eq 'z';
  }

  return $result;
}



# increment_timestamp( $yyyy, $mm, $dd, $hh );

sub increment_timestamp {
  my ( $yyyy, $mm, $dd, $hh ) = @_;
  my $hours_per_day   = 23;
  my $months_per_year = 12;
  my $days_this_month = days_in_month( $yyyy, $mm );
  ++$hh;

  if ( $hh > $hours_per_day ) {
    $hh = 0;
    ++$dd;

    if ( $dd > $days_this_month ) {
      $dd = 1;
      ++$mm;

      if ( $mm > $months_per_year ) {
        $mm = 1;
        ++$yyyy;
      }
    }
  }

  $_[ 0 ] = $yyyy;
  $_[ 1 ] = $mm;
  $_[ 2 ] = $dd;
  $_[ 3 ] = $hh;
}



# my $yyyymmddhh = integer_timestamp( $yyyy, $mm, $dd, $hh );

sub integer_timestamp {
  my ( $yyyy, $mm, $dd, $hh ) = @_;
  my $result = int( $yyyy * 1000000 + $mm * 10000 + $dd * 100 + $hh );
  return $result;
}



# my $leap = is_leap_year( $year );

sub is_leap_year {
  my $year = shift;
  my $result = $year % 4 == 0 && ( $year % 100 != 0 || $year % 400 == 0 );
  return $result;
}



# my $days = days_in_month( $year, $month );

sub days_in_month {
  my $year  = shift;
  my $month = shift;

  # 30 days hath September, April, June and November...

  my @days_per_month = ( 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 );
  my $result = $days_per_month[ $month - 1 ];

  if ( $month == 2 ) {

    if ( is_leap_year( $year ) ) {
      ++$result;
    }
  }

  return $result;
}


# my $ddd = day_of_year( $year, $month, $day );

sub day_of_year {
  my $year  = shift;
  my $month = shift;
  my $day   = shift;
  my $result = 0;

  for ( my $mm = 1; $mm < $month; ++$mm ) {
    my $days = days_in_month( $year, $mm );
    $result += $days;
  }

  $result += $day;
  return $result;
}


