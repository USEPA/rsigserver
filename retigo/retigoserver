#!/usr/bin/perl -wT

##############################################################################
# PURPOSE: retigoserver - Serve RETIGO requests.
#
# NOTES:   Used by RETIGO application.
#          Example usage:
#
#          wget -q -T 0 -O - 'https://ofmpub.epa.gov/rsig/retigoserver?\
#             REQUEST=upload&KEY=cb1d39473&FILE=cb1d39473_ChannelSpecs.txt'
#
#          wget -q -T 0 -O - 'https://ofmpub.epa.gov/rsig/retigoserver?\
#             REQUEST=download&FILE=cb1d39473_ChannelSpecs.txt'
#
# HISTORY: 2015-03-17 plessel.todd@epa.gov 1-919-541-5500
#
# STATUS:  reviewed tested
##############################################################################


use strict;
package main;
$| = 1; # Turn off output buffering so messages appear in correct order.
alarm( 3600 ); # Kill process after 1 hour. Legitimate usage could be an hour!
# Restrict PATH and ENV. (But before popen, ENV is cleared!)
delete @ENV{ 'PATH', 'IFS', 'CDPATH', 'ENV', 'BASH_ENV' };


############################## TUNABLE CONSTANTS #############################


my $debugging = 0; # 1 = print debug messages to STDERR logs/error_log.

# Directory where data files reside:

my $data_directory = '/data/RETIGO';

# Master file containing servable/streamable files:

my $file_list = "$data_directory/FileList_ds.txt";

# Uploader program:

my $uploader = '/rsig/retigo/esdr/scripts/download_data';

# Feedback program

my $feedback_cmd = '/rsig/retigo/feedback/scripts/download_feedback';

# Feed create program

my $feedCreate_cmd = '/rsig/retigo/esdr/scripts/feed_create';


# Server where this program is installed:

#my $server_path = 'https://YOUR_WEBSERVER_HOST/cgi-bin';
my $server_path = 'https://YOUR_WEBSERVER_HOST/cgi-bin';

# Query string parsing routine dispatch table:

my %parsers = (
  'service'    => \&parse_service_option,
  'request'    => \&parse_request_option,
  'feedback'   => \&parse_feedback_option,
  'feedcreate' => \&parse_feedcreate_option,
  'key'        => \&parse_key_option,
  'file'       => \&parse_file_option,
  'project'    => \&parse_project_option,
  'keywords'   => \&parse_keywords_option,
  'firstname'  => \&parse_firstname_option,
  'lastname'   => \&parse_lastname_option,
  'org'        => \&parse_org_option,
  'email'      => \&parse_email_option,
  'phone'      => \&parse_phone_option,
  'reason'     => \&parse_reason_option,
  'quality'    => \&parse_quality_option,
  'instrument' => \&parse_instrument_option,
  'datatype'   => \&parse_datatype_option,
  'origfile'   => \&parse_origfile_option

);

# Full URL path to this program:

my @pathed_program_parts = split( /\//, $0 );
my $program_name = $pathed_program_parts[ @pathed_program_parts - 1 ];
my $program = "$server_path/$program_name";

    
################################## VARIABLES #################################

# Parsed from the URL query string:

my $service  = ''; # retigo.
my $request  = ''; # upload, download, feedback, feedcreate.
my $feedback  = '';
my $feedcreate  = '';
my $key = '';
my $file = '';
my $project = '';
my $keywords = '';
my $firstname = '';
my $lastname = '';
my $org = '';
my $email = '';
my $phone = '';
my $reason = '';
my $quality = '';
my $instrument = '';
my $datatype = '';
my $origfile = '';

################################## ROUTINES ##################################


main();


sub main {
  my $result = 0;
  print "Content-type: text/plain; charset=iso-8859-1\n\n"; # Read by httpd.

  if ( parse_url() ) {

    if ( $request eq 'upload' ) {
      my $upload_command = "$uploader $key $file $project $keywords $firstname $lastname $org $email $phone $reason $quality $instrument $datatype $origfile";
      $result = execute_command( $upload_command );
    } elsif ( $request eq 'download' ) {
      my $check_command = "`/bin/grep $file $file_list`";
      $result = execute_command( $check_command );

      if ( $result == 0 ) {
        my $download_command = "/bin/cat $data_directory/$file";
        $result = execute_command( $download_command );
      }
    } elsif ( $request eq 'feedback' ) {
      my $feedback_command = "$feedback_cmd \"$feedback\"";
      $result = execute_command( $feedback_command );
    } elsif ( $request eq 'feedcreate' ) {
      my $feedcreate_command = "$feedCreate_cmd \"$feedcreate\"";
      $result = execute_command( $feedcreate_command );
    }
  }

  $result = 1 - $result; # UNIX: zero is success, non-zero is failure.
  debug( "exit result = $result" );
  exit $result;
}



# Parse URL parameters into variables.

sub parse_url {
  use CGI qw/ untaint /;     # Load Safe untainting CGI routines.
  $CGI::DISABLE_UPLOADS = 1; # Disable uploads.
  $CGI::POST_MAX = 2048;     # Limit posts to 2048 bytes.
  my $query = new CGI;       # Parse QUERY_STRING.
  %ENV = ();                 # Unset all environment variables.
  my @names = $query->param; # Extract names of parameters.
  my $count = @names;
  my $result = 0;
  debug( "$program_name @names ($count)" );

  for ( my $parameter = 0; $parameter < $count; ++$parameter) {
    $_ = $names[ $parameter ];                # $_ is tainted.
    s/[^A-Za-z]/_/go;                         # Untaint $_.
    my $option = $_;                          # $option is untainted.
    $_ = $query->param( $option );            # $_ is tainted.
    s/[^\(\)\w\.#@,-]/_/go;                         # Untaint $_.
    my $value = $_;                           # $value is untainted.
    my $lowercase_option = lc( $option );
    my $lowercase_value  = lc( $value );
    debug( "$lowercase_option $lowercase_value" );

    if ( $parsers{ $lowercase_option } ) {
      $result = $parsers{ $lowercase_option }->( $lowercase_value );
    } else {
      print STDERR "\nInvalid option: '$option'\n";
      $result = 0;
    }

    if ( ! $result ) {
      $parameter = $count; # Finish looping.
    }
  }

  $result = $result && required_options_specified();
  return $result;
}



# Parse service option.

sub parse_service_option {
  my $value = shift;
  my $result = parse_option( $service, $value, 'SERVICE', 'retigo' );
  return $result;
}



# Parse request option.

sub parse_request_option {
  my $value = shift;
  my $result = parse_option( $request, $value, 'REQUEST', 'upload download feedback feedcreate' );
  return $result;
}


# Parse feedback option.

sub parse_feedback_option {
 
  my $value = shift;
  my $result = 0;

  if ( $feedback ne '' ) {
    print STDERR "\nRedundant option: 'FEEDBACK'\n";
  } elsif ( $value =~ m#^([\(\)\w\.\#,-_]+)$# ) {
    $feedback = $1; # Re-assign first match, which is enough to satisfy -T.
    $result = 1;
  }

  return $result;
}


# Parse feedcreate option.

sub parse_feedcreate_option {
 
  my $value = shift;
  my $result = 0;

  if ( $feedcreate ne '' ) {
    print STDERR "\nRedundant option: 'FEEDCREATE'\n";
  } elsif ( $value =~ m#^([\(\)\w\.\#,-_]+)$# ) {
    $feedcreate = $1; # Re-assign first match, which is enough to satisfy -T.
    $result = 1;
  }

  return $result;
}



# Parse key option:

sub parse_key_option {
  my $value = shift;
  my $result = 0;

  if ( $key ne '' ) {
    print STDERR "\nRedundant option: 'KEY'\n";
  } elsif ( $value =~ m#^([\w]+)$# ) {
    $key = $1; # Re-assign first match, which is enough to satisfy -T.
    $result = 1;
  }

  return $result;
}


# Parse file option:

sub parse_file_option {
  my $value = shift;
  my $result = 0;

  if ( $file ne '' ) {
    print STDERR "\nRedundant option: 'FILE'\n";
  } elsif ( $value =~ m#^([\w\.-]+)$# ) {
    $file = $1; # Re-assign first match, which is enough to satisfy -T.
    $result = 1;
  }

  return $result;
}


# Parse project option:

sub parse_project_option {
  my $value = shift;
  my $result = 0;

  if ( $project ne '' ) {
    print STDERR "\nRedundant option: 'PROJECT'\n";
  } elsif ( $value =~ m#^([\w\.,-]+)$# ) {
    $project = $1; # Re-assign first match, which is enough to satisfy -T.
    $result = 1;
  }

  return $result;
}


# Parse keywords option:

sub parse_keywords_option {
  my $value = shift;
  my $result = 0;

  if ( $keywords ne '' ) {
    print STDERR "\nRedundant option: 'KEYWORDS'\n";
  } elsif ( $value =~ m#^([\w\.,-]+)$# ) {
    $keywords = $1; # Re-assign first match, which is enough to satisfy -T.
    $result = 1;
  }

  return $result;
}

# Parse firstname option:

sub parse_firstname_option {
  my $value = shift;
  my $result = 0;

  if ( $firstname ne '' ) {
    print STDERR "\nRedundant option: 'FIRSTNAME'\n";
  } elsif ( $value =~ m#^([\w\.,-]+)$# ) {
    $firstname = $1; # Re-assign first match, which is enough to satisfy -T.
    $result = 1;
  }

  return $result;
}


# Parse lastname option:

sub parse_lastname_option {
  my $value = shift;
  my $result = 0;

  if ( $lastname ne '' ) {
    print STDERR "\nRedundant option: 'LASTNAME'\n";
  } elsif ( $value =~ m#^([\w\.,-]+)$# ) {
    $lastname = $1; # Re-assign first match, which is enough to satisfy -T.
    $result = 1;
  }

  return $result;
}


# Parse org option:

sub parse_org_option {
  my $value = shift;
  my $result = 0;

  if ( $org ne '' ) {
    print STDERR "\nRedundant option: 'ORG'\n";
  } elsif ( $value =~ m#^([\w\.,-]+)$# ) {
    $org = $1; # Re-assign first match, which is enough to satisfy -T.
    $result = 1;
  }

  return $result;
}


# Parse email option:

sub parse_email_option {
  my $value = shift;
  my $result = 0;

  if ( $email ne '' ) {
    print STDERR "\nRedundant option: 'EMAIL'\n";
  } elsif ( $value =~ m#^([\w\.@,-]+)$# ) {
    $email = $1; # Re-assign first match, which is enough to satisfy -T.
    $result = 1;
  }

  return $result;
}


# Parse phone option:

sub parse_phone_option {
  my $value = shift;
  my $result = 0;

  if ( $phone ne '' ) {
    print STDERR "\nRedundant option: 'PHONE'\n";
  } elsif ( $value =~ m#^([\w\.,-]+)$# ) {
    $phone = $1; # Re-assign first match, which is enough to satisfy -T.
    $result = 1;
  }

  return $result;
}

# Parse reason option:

sub parse_reason_option {
  my $value = shift;
  my $result = 0;

  if ( $reason ne '' ) {
    print STDERR "\nRedundant option: 'REASON'\n";
  } elsif ( $value =~ m#^([\w\.,-]+)$# ) {
    $reason = $1; # Re-assign first match, which is enough to satisfy -T.
    $result = 1;
  }

  return $result;
}


# Parse quality option:

sub parse_quality_option {
  my $value = shift;
  my $result = 0;

  if ( $quality ne '' ) {
    print STDERR "\nRedundant option: 'QUALITY'\n";
  } elsif ( $value =~ m#^([\w\.,-]+)$# ) {
    $quality = $1; # Re-assign first match, which is enough to satisfy -T.
    $result = 1;
  }

  return $result;
}


# Parse instrument option:

sub parse_instrument_option {
  my $value = shift;
  my $result = 0;

  if ( $instrument ne '' ) {
    print STDERR "\nRedundant option: 'INSTRUMENT'\n";
  } elsif ( $value =~ m#^([\w\.,-]+)$# ) {
    $instrument = $1; # Re-assign first match, which is enough to satisfy -T.
    $result = 1;
  }

  return $result;
}


# Parse datatype option:

sub parse_datatype_option {
  my $value = shift;
  my $result = 0;

  if ( $datatype ne '' ) {
    print STDERR "\nRedundant option: 'DATATYPE'\n";
  } elsif ( $value =~ m#^([\w\.,-]+)$# ) {
    $datatype = $1; # Re-assign first match, which is enough to satisfy -T.
    $result = 1;
  }

  return $result;
}

# Parse origfile option:

sub parse_origfile_option {
  my $value = shift;
  my $result = 0;

  if ( $origfile ne '' ) {
    print STDERR "\nRedundant option: 'ORIGFILE'\n";
  } elsif ( $value =~ m#^([\w\.-]+)$# ) {
    $origfile = $1; # Re-assign first match, which is enough to satisfy -T.
    $result = 1;
  }

  return $result;
}


# Check that all required 'options' have been specified:

sub required_options_specified {
  my $result = 0;

  if ( $request eq '' ) {
    print STDERR "\nMissing option: 'REQUEST'\n";
  } elsif ( $request eq 'upload' ) {

    if ( $file eq '' ) {
      print STDERR "\nMissing option: 'FILE'\n";
    } elsif ( $key eq '' ) {
      print STDERR "\nMissing option: 'KEY'\n";
    } elsif ( $project eq '' ) {
      print STDERR "\nMissing option: 'PROJECT'\n";
    } elsif ( $keywords eq '' ) {
      print STDERR "\nMissing option: 'KEYWORDS'\n";
    } elsif ( $origfile eq '' ) {
      print STDERR "\nMissing option: 'ORIGFILE'\n";
    } else {
      $result = 1;
    }
  } elsif ( $request eq 'download' && $file eq '' ) {
    print STDERR "\nMissing option: 'FILE'\n";
  } else {
    $result = 1;
  }

  debug( "required_options_specified result = $result, file = $file, key = $key, project = $project, keywords = $keywords, origfile = $origfile" );
  return $result;
}



############################### HELPER ROUTINES ##############################



# debug( message );

sub debug {
  my $message = shift;

  if ( $debugging ) {
    print STDERR "\n$message\n";
####print STDOUT "\n$message\n";
  }
}



# Execute command and echo its output to STDOUT. E.g., execute_command( 'ls' );

sub execute_command {
  my $command = shift;
  my $result = 0;
  my $the_pipe = 0;

  # Untaint command (match expression is arbitrary as far as -T is concerned):

  if ( $command =~ m#^(/[\w-]+/[\w -/\.@\#,]+)$# ) {
    $command = $1; # Re-assign first match, which is enough to satisfy -T.
    debug( "$0 executing command = $command" );
    %ENV = (); # Unset all environment variables prior to popen.
    # Complicated, supposedly safer way to open a readable pipe to command:
    my $pid = open( the_pipe, "-|" );

    if ( ! defined( $pid ) ) {
      die "Couldn't open pipe to subprocess";
    } elsif ( $pid ) { # Parent process.

      while ( <the_pipe> ) {
        print;
      }

      close( the_pipe ) or die $!;
      $result = ! $?;
    } else { # Child process.
      exec( $command ) or die "can't exec program: $!";
    }
  } else {
    print STDERR "\n$0: '$command' contains invalid characters.\n";
  }

  return $result;
}



# my $result = parse_option( $option, $value, $option_name, $valid_values );
# my $result = parse_option( $variable, $value, 'SERVICE', 'retigo' );

sub parse_option {
  my ( $option, $value, $option_name, $valid_values ) = @_;
  my $result = 0;

  if ( $option ne '' ) {
    print STDERR "\nRedundant $option_name option: '$value'\n";
  } else {
    $result = index( " $valid_values ", " $value " ) != -1;

    if ( $result ) {
      $_[ 0 ] = $value;
    } else {
      print STDERR "\nInvalid $option_name option: '$value'\n";
    }
  }

  return $result;
}



