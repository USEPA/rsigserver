#!/usr/bin/perl -wT

##############################################################################
# PURPOSE: retigowmsserver - Serve WMS requests for RETIGO ground overlays.
#
# NOTES:   Used by RETIGO.
#          Example usage:
#
#          wget -q -T 0 -O - 'https://ofmpub.epa.gov/rsig/retigowmsserver?\
#                                       SERVICE=retigowms
#                                       &VERSION=1.3.0
#                                       &REQUEST=GetMap
#                                       &LAYERS=viirsnoaa.jrraod.AOD550
#                                       &STYLES=maplines
#                                       &CRS=epsg:3857
#                                       &BBOX=-90.0,30.0,-75.0,42.0
#                                       &WIDTH=1024
#                                       &HEIGHT=1024
#                                       &FORMAT=image/png
#                                       &TIME=2016-10-04T00:00:00Z/2016-10-04T23:59:59Z
#                                       &MINVAL=0.0
#                                       &MAXVAL=1.0
#                                       &QAFLAG=medium
#                                       &ID=30608_1537291963
#                                       &JSONPFLAG=0'
#
#
# HISTORY: 2018-04-09 Matt Freeman
#
# STATUS:  unreviewed untested
##############################################################################


use strict;
use POSIX qw(strftime);
package main;
$| = 1; # Turn off output buffering so messages appear in correct order.
alarm( 3600 ); # Kill process after 1 hour. Legitimate usage could be an hour!
# Restrict PATH and ENV. (But before popen, ENV is cleared!)
delete @ENV{ 'PATH', 'IFS', 'CDPATH', 'ENV', 'BASH_ENV' };


############################## TUNABLE CONSTANTS #############################


my $debugging = 0; # 1 = print debug messages to STDERR logs/error_log.


# RETIGOWMS programs:

my $getmap                     = '/rsig/WMS/scripts/processRetigoWMS';
my $getlegend                  = '/rsig/WMS/scripts/processRetigoWMSColorbar';
my $getlegendinfo              = '/rsig/WMS/scripts/getRetigoWMSColorbarInfo';
my $getlatestpurpleair         = '/rsig/WMS/scripts/sendLatestPurpleair';
my $getlatestpurpleaircolorbar = '/rsig/WMS/scripts/sendLatestPurpleairColorbar';

# Server where this program is installed:

my $server_path = 'https://YOUR_WEBSERVER_HOST/cgi-bin';

# Query string parsing routine dispatch table:

my %parsers = (
  'service'       => \&parse_service_option,
  'version'       => \&parse_version_option,
  'request'       => \&parse_request_option,
  'layers'        => \&parse_layers_option,
  'styles'        => \&parse_styles_option,
  'crs'           => \&parse_crs_option,
  'bbox'          => \&parse_bbox_option,
  'width'         => \&parse_width_option,
  'height'        => \&parse_height_option,
  'format'        => \&parse_format_option,
  'time'          => \&parse_time_option,
  'minval'        => \&parse_minval_option,
  'maxval'        => \&parse_maxval_option,
  'qaflag'        => \&parse_qaflag_option,
  'id'            => \&parse_id_option,  
  'jsonpflag'     => \&parse_jsonpflag_option  
);

# Full URL path to this program:

my @pathed_program_parts = split( /\//, $0 );
my $program_name = $pathed_program_parts[ @pathed_program_parts - 1 ];
my $program = "$server_path/$program_name";


# Variable lists:

#my @variables = (
#    'viirsnoaa.jrraod.AOD550',
#    'tropomi.offl.no2.nitrogendioxide_tropospheric_column'
#    'tempo.l2.no2.vertical_column_troposphere'
#);

    
################################## VARIABLES #################################

# Parsed from the URL query string, with examples:

my $service       = ''; # retigowms.
my $version       = ''; # 1.3.0
my $request       = ''; # getmap, getid, getlegend, getlegendinfo, or getlatestpurpleair 
my $layers        = ''; # viirsnoaa.jrraod.AOD550 (only one layer is supported)
my $styles        = ''; # maplines or nomaplines
my $crs           = ''; # epsg:3857
my $bbox          = ''; # -90.0,30.0,-75.0,42.0
my $width         = ''; # 1024
my $height        = ''; # 1024
my $format        = ''; # image/png
my $time          = ''; # 2016-10-04T00:00:00Z/2016-10-04T23:59:59Z (multiple times will all be overlaid on one image)
my $minval        = ''; # 0.0
my $maxval        = ''; # 1.0
my $qaflag        = ''; # high,medium
my $id            = ''; # unique id previously assigned by getid request 
my $jsonpflag     = ''; #  


################################## ROUTINES ##################################


main();


sub main {
  my $result = 0;
  #print "Content-type: text/plain; charset=iso-8859-1\n\n"; # Read by httpd.

  if ( parse_url() ) {
      
      #if ($format eq '') {
      #    $format = 'json' # default to send to the download program
      #}
      
      # Process GETMAP requests
      if ( $request eq 'getmap' ) {
          print "Content-type: text/plain; charset=iso-8859-1\n" .
              "Access-Control-Allow-Origin: * \n" .
              "Cache-Control: no-cache, no-store, must-revalidate\n" .
              "Pragma: no-cache\n" .
              "Expires: 0\n\n";
          my $uniqueID = $$ . "_" . time(); # can't use a passed in parameter in the filename below, so create a different uniqueID
          #debug("unique_id = $uniqueID");
          
          my $getmap_command = "";
          $getmap_command = "$getmap $layers $styles $bbox $width $height $time $minval $maxval $qaflag $id $jsonpflag $crs";
          
          debug("getmap_command = $getmap_command");
          $result = execute_command( $getmap_command );
          
          
      # Process GETID requests
      } elsif ( $request eq 'getid' ) {
          print "Content-type: text/plain; charset=iso-8859-1\n\n"; # Read by httpd.
          #my $getid_command = "$getid $downloadid";
          my $uniqueID = time() . '_' . $$;
          #debug("unique_id = $uniqueID");
          print "$uniqueID\n";   
          
      # Process GETLEGEND requests
      } elsif ( $request eq 'getlegend' ) {
          print "Content-type: text/plain; charset=iso-8859-1\n\n"; # Read by httpd.
          
          my $getlegend_command = "";
          $getlegend_command = "$getlegend $id";
          debug("getlegend_command = $getlegend_command");
          $result = execute_command( $getlegend_command );
      
      
      # Process GETLEGENDINFO requests
      } elsif ( $request eq 'getlegendinfo' ) {
          print "Content-type: text/plain; charset=iso-8859-1\n\n"; # Read by httpd.
          
          my $getlegendinfo_command = "";
          $getlegendinfo_command = "$getlegendinfo $id";
          debug("getlegendinfo_command = $getlegendinfo_command");
          $result = execute_command( $getlegendinfo_command );

      # Process GETLATESTPURPLEAIR requests
      } elsif ( $request eq 'getlatestpurpleair' ) {
          print "Content-type: text/plain; charset=iso-8859-1\n" .
              "Access-Control-Allow-Origin: * \n" .
              "Cache-Control: no-cache, no-store, must-revalidate\n" .
              "Pragma: no-cache\n" .
              "Expires: 0\n\n";
          my $getlatestpurpleair_command = "";
          $getlatestpurpleair_command = "$getlatestpurpleair $crs $styles $format";
          debug("getlatestpurpleair_command = $getlatestpurpleair_command");
          $result = execute_command( $getlatestpurpleair_command );

      # Process GETLATESTPURPLEAIRCOLORBAR requests
      } elsif ( $request eq 'getlatestpurpleaircolorbar' ) {
          print "Content-type: text/plain; charset=iso-8859-1\n" .
              "Access-Control-Allow-Origin: * \n" .
              "Cache-Control: no-cache, no-store, must-revalidate\n" .
              "Pragma: no-cache\n" .
              "Expires: 0\n\n";
          my $getlatestpurpleaircolorbar_command = "";
          $getlatestpurpleaircolorbar_command = "$getlatestpurpleaircolorbar";
          debug("getlatestpurpleaircolorbar_command = $getlatestpurpleaircolorbar_command");
          $result = execute_command( $getlatestpurpleaircolorbar_command );

      }
            
  } else {
      print "RETIGOWMS parameters invalid";
  }
  
  $result = 1 - $result; # UNIX: zero is success, non-zero is failure.
  debug( "exit result = $result" );
  exit $result;
}



# Parse URL parameters into variables.

sub parse_url {
  use CGI qw/ untaint /;     # Load Safe untainting CGI routines.
  $CGI::DISABLE_UPLOADS = 1; # Disable uploads.
  $CGI::POST_MAX = 2048;     # Limit posts to 1024 bytes.
  my $query = new CGI;       # Parse QUERY_STRING.
  %ENV = ();                 # Unset all environment variables.
  my @names = $query->param; # Extract names of parameters.
  my $count = @names;
  my $result = 0;
  debug( "$program_name @names ($count)" );

  for ( my $parameter = 0; $parameter < $count; ++$parameter) {
    $_ = $names[ $parameter ];                # $_ is tainted.
    s/[^A-Za-z]/_/go;                         # Untaint $_.
    my $option = $_;                          # $option is untainted.
    $_ = $query->param( $option );            # $_ is tainted.
    #s/[^\(\)\[\]\{\}\"\w\.#@,-:\s]/_/go;      # Untaint $_.
    s/[^\w\-.,:\/]/_/go;                      # Untaint $_.
    my $value = $_;                           # $value is untainted.
    my $lowercase_option = lc( $option );
    my $lowercase_value  = lc( $value );
    debug( "$lowercase_option $lowercase_value" );

    if ( $parsers{ $lowercase_option } ) {
      $result = $parsers{ $lowercase_option }->( $lowercase_value );
    } else {
      print STDERR "\nInvalid option: '$option'\n";
      $result = 0;
    }

    if ( ! $result ) {
      $parameter = $count; # Finish looping.
    }
  }

  $result = $result && required_options_specified();
  return $result;
}



# Parse service option.

sub parse_service_option {
  my $value = shift;
  my $result = parse_option( $service, $value, 'SERVICE', 'retigowms' );
  return $result;
}


# Parse version option.

sub parse_version_option {
  my $value = shift;
  my $result = parse_option( $version, $value, 'VERSION', '1.3.0' );
  return $result;
}


# Parse request option.

sub parse_request_option {
  my $value = shift;
  my $result = parse_option( $request, $value, 'REQUEST', 'getmap getid getlegend getlegendinfo getlatestpurpleair getlatestpurpleaircolorbar' );
  return $result;
}


# Parse layers option.

#sub parse_layers_option {
#  my $value = shift;
#  my $result = 0;
#  my $variable_count  = @variables;
#
#  my $this_variable = $variables[ 0 ]; # we only support one layer at a time
#  if ( $value eq lc( $this_variable ) ) {
#      $layers = $this_variable;
#      $result = 1;
#      return $result;
#  }
#
#  return $result;
#}
#

sub parse_layers_option {
  my $value = shift;
  my $result = parse_option( $layers, $value, 'LAYERS', 'viirsnoaa.jrraod.aod550 tropomi.offl.no2.nitrogendioxide_tropospheric_column purpleair.pm25_corrected tempo.l2.no2.vertical_column_troposphere' );
  return $result;
}


# Parse styles option.

sub parse_styles_option {
  my $value = shift;
  my $result = parse_option( $styles, $value, 'STYLES', 'maplines nomaplines none' );
  return $result;
}


# Parse crs option.

sub parse_crs_option {
  my $value = shift;
  my $result = parse_option( $crs, $value, 'CRS', 'epsg:3857 epsg:4326 none' );
  return $result;
}


# Parse bbox option.

sub parse_bbox_option {
  my $value = shift;
  my $result = 0;

  if ( $bbox ne '' ) {
    print STDERR "\nRedundant BBOX option: '$value'\n";
  } else {
    $bbox = $value;
    my @bounds = split( /,/, $bbox );
    my $bounds_count = @bounds;

    if ( $bounds_count != 4 ) {
      print STDERR "\nInvalid bbox option: '$value'\n";
    } elsif ( ! in_range( $bounds[ 0 ], -180.0, 180.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 0 ]'\n";
    } elsif ( ! in_range( $bounds[ 1 ], -90.0, 90.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 1 ]'\n";
    } elsif ( ! in_range( $bounds[ 2 ], $bounds[ 0 ], 180.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 2 ]'\n";
    } elsif ( ! in_range( $bounds[ 3 ], $bounds[ 1 ], 90.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 3 ]'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}


# Parse width option.

sub parse_width_option {

  # width should only contain numbers 0-9

  my $value = shift;
  my $result = 0;

  if ( $width ne '' ) {
      print STDERR "\nRedundant WIDTH option: '$value'\n";
  } elsif ( $value =~ m#^[0-9]+$# ) {
      my $is_valid = $value > 0 && $value <= 4096;
      if ( $is_valid ) {
          $width = $value;
          $result = 1;
      } else {
          print STDERR "\nWIDTH is out of range: '$value'\n";
      }
  } else {
      print STDERR "\n WIDTH is invalid.\n" 
  }

  return $result;
}


# Parse height option.

sub parse_height_option {

  # height should only contain numbers 0-9

  my $value = shift;
  my $result = 0;

  if ( $height ne '' ) {
      print STDERR "\nRedundant HEIGHT option: '$value'\n";
  } elsif ( $value =~ m#^[0-9]+$# ) {
      my $is_valid = $value > 0 && $value <= 4096;
      if ( $is_valid ) {
          $height = $value;
          $result = 1;
      } else {
          print STDERR "\nHEIGHT is out of range: '$value'\n";
      }
      
  } else {
      print STDERR "\nInvalid HEIGHT option: '$value'\n";
  }
  
  return $result;
}


# Parse format option.

sub parse_format_option {
  my $value = shift;
  my $result = parse_option( $format, $value, 'FORMAT', 'image/png kml' );
  return $result;
}


# Parse time option.

sub parse_time_option {
  my $value = shift;
  my $result = 0;

  if ( $time ne '' ) {
    print STDERR "\nRedundant TIME option: '$value'\n";
  } else {
    $time = $value;
    my $is_valid = is_valid_time( $time );

    if ( ! $is_valid ) {
      print STDERR "\nInvalid TIME option: '$value'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse minval option.

sub parse_minval_option {

  # minval should only contain numbers 0-9, -, and .

  my $value = shift;
  my $result = 0;

  if ( $minval ne '' ) {
      print STDERR "\nRedundant MINVAL option: '$value'\n";
  } elsif ( $value =~ m#^[0-9\.-]+$# ) {
      $minval = $value;
      $result = 1;
  } else {
      print STDERR "\n MINVAL is invalid.\n" 
  }
  
  return $result;
}


# Parse maxval option.

sub parse_maxval_option {

  # minval should only contain numbers 0-9, -, and .

  my $value = shift;
  my $result = 0;

  if ( $maxval ne '' ) {
      print STDERR "\nRedundant MAXVAL option: '$value'\n";
  } elsif ( $value =~ m#^[0-9\.-]+$# ) {
      $maxval = $value;
      $result = 1;
  } else {
      print STDERR "\n MAXVAL is invalid.\n" 
  }
  
  return $result;
}


# Parse qaflag option.

sub parse_qaflag_option {
  my $value = shift;
  my $result = parse_option( $qaflag, $value, 'QAFLAG', 'high medium' );
  return $result;
}


# Parse id option.

sub parse_id_option {

  # id should only contain letters, numbers 0-9, underscore, colon, and dash

  my $value = shift;
  my $result = 0;

  if ( $id ne '' ) {
      print STDERR "\nRedundant ID option: '$value'\n";
  } elsif ( $value =~ m#^[A-Za-z0-9_:\-]+$# ) {
      $id = $value;
      $result = 1;
  } else {
      print STDERR "\n ID is invalid.\n" 
  }
  
  return $result;
}


# Parse jsonpflag option.

sub parse_jsonpflag_option {

  # jsonpflag should only contain numbers 0 or 1

  my $value = shift;
  my $result = 0;

  if ( $jsonpflag ne '' ) {
      print STDERR "\nRedundant JSONPFLAG option: '$value'\n";
  } elsif ( $value =~ m#^[0-9]+$# ) {
      $jsonpflag = $value;
      $result = 1;
  } else {
      print STDERR "\n JSONPFLAG is invalid.\n" 
  }
  
  return $result;
}




# my $ok = in_range( $value, $minimum, $maximum );

sub in_range {
  my ( $value, $minimum, $maximum ) = @_;
  my $result = $value >= $minimum && $value <= $maximum;
  return $result;
}


# my $is_valid = is_valid_time( '2001-08-26t20:00:00z/2001-08-27t23:59:59z' );

sub is_valid_time {
  my $time = shift;
  my $result = 0;
  my $length = length( $time );

  if ( $length == 41 ) {
    $result = is_valid_time( substr( $time, 0, 20 ) );
    $result = $result && substr( $time, 20, 1 ) eq '/';
    $result = $result && is_valid_time( substr( $time, 21, 20 ) );
    $result = $result && substr( $time, 0, 20 ) le substr( $time, 21, 20 );
  } elsif ( $length == 20 ) {
    my $year   = substr( $time, 0, 4 );
    my $month  = substr( $time, 5, 2 );
    my $day    = substr( $time, 8, 2 );
    my $hour   = substr( $time, 11, 2 );
    my $minute = substr( $time, 14, 2 );
    my $second = substr( $time, 17, 2 );
    $result = in_range( $year, 1900, 3000 );
    $result = $result && in_range( $month, 1, 12 );
    $result = $result && in_range( $day, 1, days_in_month( $year, $month ) );
    $result = $result && in_range( $hour, 0, 23 );
    $result = $result && in_range( $minute, 0, 59 );
    $result = $result && in_range( $second, 0, 59 );
    $result = $result && substr( $time, 4, 1 ) eq '-';
    $result = $result && substr( $time, 7, 1 ) eq '-';
    $result = $result && substr( $time, 10, 1 ) eq 't';
    $result = $result && substr( $time, 13, 1 ) eq ':';
    $result = $result && substr( $time, 16, 1 ) eq ':';
    $result = $result && substr( $time, 19, 1 ) eq 'z';
  }

  return $result;
}


# my $leap = is_leap_year( $year );

sub is_leap_year {
  my $year = shift;
  my $result = $year % 4 == 0 && ( $year % 100 != 0 || $year % 400 == 0 );
  return $result;
}



# my $days = days_in_month( $year, $month );

sub days_in_month {
  my $year  = shift;
  my $month = shift;

  # 30 days hath September, April, June and November...

  my @days_per_month = ( 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 );
  my $result = $days_per_month[ $month - 1 ];

  if ( $month == 2 ) {

    if ( is_leap_year( $year ) ) {
      ++$result;
    }
  }

  return $result;
}




# Check that all required 'options' have been specified:

sub required_options_specified {
  my $result = 0; # default failure

  if ( $service eq '' ) {
    print STDERR "\nMissing option: 'SERVICE'\n";

  } elsif ( $version eq '' ) {
    print STDERR "\nMissing option: 'VERSION'\n";

  } elsif ( $request eq '' ) {
    print STDERR "\nMissing option: 'REQUEST'\n";

  } elsif ( $request eq 'getmap' ) {
    if ( $layers eq '' ) {
      print STDERR "\nMissing option: 'LAYERS'\n"; 
    } elsif ( $styles eq '' ) {
      print STDERR "\nMissing option: 'STYLES'\n";
    } elsif ( $crs eq '' ) {
      print STDERR "\nMissing option: 'CRS'\n";
    } elsif ( $bbox eq '' ) {
      print STDERR "\nMissing option: 'BBOX'\n";
    } elsif ( $width eq '' ) {
      print STDERR "\nMissing option: 'WIDTH'\n";
    } elsif ( $height eq '' ) {
      print STDERR "\nMissing option: 'HEIGHT'\n";
    } elsif ( $minval eq '' ) {
      print STDERR "\nMissing option: 'MINVAL'\n";
    } elsif ( $maxval eq '' ) {
      print STDERR "\nMissing option: 'MAXVAL'\n";
    } elsif ( $qaflag eq '' ) {
      print STDERR "\nMissing option: 'QAFLAG'\n";
    } elsif ( $id eq '' ) {
      print STDERR "\nMissing option: 'ID'\n";
    } else {
      $result = 1;
    }
    debug( "required_options_specified result = $result, layers = $layers, styles = $styles, crs = $crs, bbox = $bbox, width = $width, height = $height, minval = $minval, maxval = $maxval, qaflag = $qaflag, id = $id" );

  } elsif ( $request eq 'getid' ) {
    # do nothing, no parameters needed
    $result = 1;  

  } elsif ( $request eq 'getlegend' ) {
      if ( $id eq '' ) {
          print STDERR "\nMissing option: 'ID'\n";
      } else {
          $result = 1;
      }
  } else {
    $result = 1;
  }

  return $result;
}



############################### HELPER ROUTINES ##############################



# debug( message );

sub debug {
  my $message = shift;

  if ( $debugging ) {
    print STDERR "\n$message\n";
####print STDOUT "\n$message\n";
  }
}



# Execute command and echo its output to STDOUT. E.g., execute_command( 'ls' );

sub execute_command {
  my $command = shift;
  my $result = 0;
  my $the_pipe = 0;

  # Untaint command (match expression is arbitrary as far as -T is concerned):

  if ( $command =~ m#^(/[\w-]+/[\w -/\.@\#,:\"\[\]\{\}]+)$# ) {
    $command = $1; # Re-assign first match, which is enough to satisfy -T.
    #debug( "$0 executing command = $command" );
    %ENV = (); # Unset all environment variables prior to popen.
    # Complicated, supposedly safer way to open a readable pipe to command:
    my $pid = open( the_pipe, "-|" );

    if ( ! defined( $pid ) ) {
      die "Couldn't open pipe to subprocess";
    } elsif ( $pid ) { # Parent process.

      while ( <the_pipe> ) {
        print;
      }

      close( the_pipe ) or die $!;
      $result = ! $?;
    } else { # Child process.
      exec( $command ) or die "can't exec program: $!";
    }
  } else {
    print STDERR "\n$0: '$command' contains invalid characters.\n";
  }

  return $result;
}



# my $result = parse_option( $option, $value, $option_name, $valid_values );
# my $result = parse_option( $variable, $value, 'SERVICE', 'nwis' );

sub parse_option {
  my ( $option, $value, $option_name, $valid_values ) = @_;
  my $result = 0;

  if ( $option ne '' ) {
    print STDERR "\nRedundant $option_name option: '$value'\n";
  } else {
    $result = index( " $valid_values ", " $value " ) != -1;

    if ( $result ) {
      $_[ 0 ] = $value;
    } else {
      print STDERR "\nInvalid $option_name option: '$value'\n";
    }
  }

  return $result;
}



