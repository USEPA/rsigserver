#!/usr/bin/perl -wT

##############################################################################
# PURPOSE: satellitepmserver - Serve satellite-derived (from AOD) PM2.5
#          data, subsetted by date/time range, variable, and
#          longitude-latitude box, in ASCII, XDR, MCMC, NetCDF-COARDS, and
#          NetCDF-IOAPI formats for use by other programs (e.g., via wget).
# NOTES:   Server is WCS-compliant:
#          https://www.opengeospatial.org/standards/wcs
#          https://datafed.net/xs/OpenGIS/wcs/1.0.0/
#          and modeled after a similar webserver application:
#          https://webapps.datafed.net/ogc_EPA.wsfl
#
#          Invokes compareserver or geoschemserver
#          which streams the regridded data to STDOUT.
#
#          Example usage:
#
#          wget -q -T 0 -O - 'https://ofmpub.epa.gov/rsig/satellitepmserver?\
#                    SERVICE=wcs&\
#                    VERSION=1.0.0&\
#                    REQUEST=GetCoverage&\
#                    COVERAGE=gasp.12km.pm25&\
#                    TIME=2008-06-21T00:00:00Z/2008-06-22T23:59:59Z&\
#                    BBOX=-76,34,-74,36,0,0&\
#                    FORMAT=ascii'
#
# HISTORY: 2014-04-17 plessel.todd@epa.gov 1-919-541-5500.
# STATUS:  unreviewed tested
##############################################################################


use strict;
package main;
$| = 1; # Turn off output buffering so messages appear in correct order.
alarm( 3600 ); # Kill process after 1 hour. Legitimate usage could be an hour!
# Restrict PATH and ENV. (But before popen, ENV is cleared!)
delete @ENV{ 'PATH', 'IFS', 'CDPATH', 'ENV', 'BASH_ENV' };


############################## TUNABLE CONSTANTS #############################


my $debugging = 0; # 1 = print debug messages to STDERR logs/error_log.

# Server where this program is installed:

my $server_path = 'https://YOUR_WEBSERVER_HOST/cgi-bin';

# External server to forward to via wcs_command:

my $rsigserver_path = 'https://YOUR_WEBSERVER_HOST/cgi-bin/rsigserver?';

my $wcs_command =
  '/usr/bin/curl -k --silent --max-time 3600 --retry 0 -L --tcp-nodelay';

my $bindir     = '/rsig/current/code/bin/Linux.x86_64';
my $xdrconvert = "$bindir/XDRConvert";
my $compressor = "$bindir/gzip -c -1";

# To convert satellite AOD to PM25 requires regridding onto the 12km or 4km
# GEOSCHEM (CMAQ-format) grid that matches the data files
# /data/GEOSCHEM/SCALE/AOD2PM25_12KM.ncf
# /data/GEOSCHEM/SCALE/AOD2PM25_4KM.ncf
# whose grid parameters are shown below:

my $regrid_12km_parameters =
  '&REGRID=weighted&LAMBERT=33,45,-97,40&ELLIPSOID=6370000,6370000' .
  '&GRID=459,299,-2556000,-1728000,12000,12000';

my $regrid_4km_parameters =
  '&REGRID=weighted&LAMBERT=20,60,-96,40&ELLIPSOID=6370000,6370000' .
  '&GRID=1087,688,-2226761.99224,-1518748.18797,4000,4000';

# Query string parsing routine dispatch table:

my %parsers = (
  'service'          => \&parse_service_option,
  'version'          => \&parse_version_option,
  'request'          => \&parse_request_option,
  'coverage'         => \&parse_coverage_option,
  'time'             => \&parse_time_option,
  'bbox'             => \&parse_bbox_option,
  'format'           => \&parse_format_option,
  'compress'         => \&parse_compress_option,
  'regrid'           => \&parse_regrid_option,
  'regrid_aggregate' => \&parse_regrid_aggregate_option,
  'lambert'          => \&parse_lambert_option,
  'stereographic'    => \&parse_stereographic_option,
  'mercator'         => \&parse_mercator_option,
  'lonlat'           => \&parse_lonlat_option,
  'ellipsoid'        => \&parse_ellipsoid_option,
  'grid'             => \&parse_grid_option,
  'levels'           => \&parse_levels_option,
  'aod_range'        => \&parse_aod_range_option,
  'std_range'        => \&parse_std_range_option,
  'cld_range'        => \&parse_cld_range_option,
  'cls_range'        => \&parse_cls_range_option,
  'sfc_range'        => \&parse_sfc_range_option,
  'ch1_range'        => \&parse_ch1_range_option,
  'sig_range'        => \&parse_sig_range_option,
  'mos_range'        => \&parse_mos_range_option,
  'sca_range'        => \&parse_sca_range_option,
  'corners'          => \&parse_corners_option,
  'offset'           => \&parse_offset_option
);

# Webserver content types for each output format:

my %content_types = (
  'ascii'         => 'text/plain',
  'mcmc'          => 'text/plain',
  'xdr'           => 'application/octet-stream',
  'netcdf-coards' => 'application/netcdf',
  'netcdf-ioapi'  => 'application/netcdf'
);

# Full URL path to this program:

my @pathed_program_parts = split( /\//, $0 );
my $program_name = $pathed_program_parts[ @pathed_program_parts - 1 ];
my $program = "$server_path/$program_name";

my @variables = (
  'gasp.12km.pm25',
  'gasp.4km.pm25',
  'modis.12km.pm25',
  'modis.4km.pm25',
  'viirsnoaa.12km.pm25',
  'viirsnoaa.4km.pm25',
  'geoschem.scale.conus.aod2pm25.slope',
  'geoschem.scale.conus.aod2pm25.offset',
  'geoschem.scale.conus4km.aod2pm25.slope',
  'geoschem.scale.conus4km.aod2pm25.offset'
);

my @convert_variables = (
  'compare.gasp.daily_aod-geoschem.scale.conus.aod2pm25.slope-convert' .
     $regrid_12km_parameters,
  'compare.gasp.daily_aod-geoschem.scale.conus4km.aod2pm25.slope-convert' .
     $regrid_4km_parameters,
  'compare.modis.mod4.optical_depth_land_and_ocean-geoschem.scale.conus.aod2pm25.slope-convert' .
     $regrid_12km_parameters,
  'compare.modis.mod4.optical_depth_land_and_ocean-geoschem.scale.conus4km.aod2pm25.slope-convert' .
     $regrid_4km_parameters,
  'compare.viirsnoaa.vaooo.AerosolOpticalDepth_at_550nm-geoschem.scale.conus.aod2pm25.slope-convert' .
     $regrid_12km_parameters,
  'compare.viirsnoaa.vaooo.AerosolOpticalDepth_at_550nm-geoschem.scale.conus4km.aod2pm25.slope-convert' .
     $regrid_4km_parameters,
  'geoschem.scale.conus.aod2pm25.slope',
  'geoschem.scale.conus.aod2pm25.offset',
  'geoschem.scale.conus4km.aod2pm25.slope',
  'geoschem.scale.conus4km.aod2pm25.offset'
);

my @descriptions = (
  'GASP 12km regridded derived fine particulates not more than 2.5 microns in diameter.',
  'GASP 4km regridded derived fine particulates not more than 2.5 microns in diameter.',
  'MODIS 12km regridded derived fine particulates not more than 2.5 microns in diameter.',
  'MODIS 4km regridded derived fine particulates not more than 2.5 microns in diameter.',
  'VIIRS 12km regridded derived fine particulates not more than 2.5 microns in diameter.',
  'VIIRS 4km regridded derived fine particulatesnot more than 2.5 microns in diameter.',
  'GEOSCHEM 12km slope of AOD to PM2.5 conversion.',
  'GEOSCHEM 12km offset (y-intercept) of AOD to PM2.5 conversion.',
  'GEOSCHEM 4km slope of AOD to PM2.5 conversion.',
  'GEOSCHEM 4km offset (y-intercept) of AOD to PM2.5 conversion.',
);

################################## VARIABLES #################################


# Parsed from the URL query string:

my $service       = ''; # wcs.
my $version       = ''; # 1.0.0.
my $request       = ''; # getcapabilities or describecoverage or getcoverage.
my $variable      = ''; # gasp.12km.pm25, etc.
my $variable_id   = -1; # 0-based index of variable.
my $format        = ''; # xdr, ascii, netcdf.
my $compress      = ''; # 1 = | gzip -c otherwise don't compress (default).
my $time          = ''; # E.g., 2008-06-21t00:00:00z/2008-06-22t23:59:59z.
my $bbox          = ''; # E.g., -76,34,-74,36,0,0.
my $regrid        = ''; # E.g., nearest, mean, weighted.
my $regrid_aggregate = ''; # E.g., none, all, daily.
my $lambert       = ''; # E.g., 33,45,-97,40.
my $stereographic = ''; # E.g., -98,90,45.
my $mercator      = ''; # E.g., -98.
my $lonlat        = '';
my $ellipsoid     = ''; # E.g., 6370000,6370000.
my $grid          = ''; # E.g., 279,240,-1008000,-1620000,12000,12000.
my $levels        = ''; # E.g,22,2,10000,1.0,...,0.0,9.81,287.04,50,290,100000.
my $aod_range     = ''; # E.g., -0.5,2.05.
my $std_range     = ''; # E.g., 0.5,2.55.
my $cld_range     = ''; # E.g., 0.0,1.0.
my $cls_range     = ''; # E.g., 0.0,25.0.
my $sfc_range     = ''; # E.g., -0.1,0.41.
my $ch1_range     = ''; # E.g., 0.0,0.425.
my $sig_range     = ''; # E.g., -0.5,0.52.
my $mos_range     = ''; # E.g., 0.0,0.425.
my $sca_range     = ''; # E.g., 0.0,180.0.
my $corners       = ''; # 1 = compute corners otherwise don't (default).
my $offset        = ''; # 1 = use offset (default) otherwise don't.

# Derived from the above parsed values:

my $starting_timestamp = 0; # yyyymmddhh, e.g., 2008062100.
my $ending_timestamp   = 0; # yyyymmddhh, e.g., 2008062200.
my $hours              = 0; # E.g., 5 days = 5 x 24 = 120.
my $command            = ''; # Complete subset command to run.


################################## ROUTINES ##################################


main();


sub main {
  my $result = 0;

  if ( ! parse_url() ) {
    print "Content-type: text/plain; charset=iso-8859-1\n\n"; # For webserver
  } elsif ( $request eq 'getcapabilities' ) {
    print "Content-type: text/xml; charset=iso-8859-1\n\n"; # For webserver
    print_capabilities();
    $result = 1;
  } elsif ( $request eq 'describecoverage' ) {
    print "Content-type: text/xml; charset=iso-8859-1\n\n"; # For webserver
    print_coverage_description();
    $result = 1;
  } elsif ( $request eq 'getcoverage' ) {
    print "Content-type: $content_types{ $format }; charset=iso-8859-1\n\n";
    compute_time_range();
    construct_command();
    $result = execute_command( $command );
  }

  $result = 1 - $result; # UNIX: zero is success, non-zero is failure.
  debug( "$program exit result = $result" );
  exit $result;
}



# Print web server capabilities metadata.

sub print_capabilities {
  print '<?xml version="1.0" encoding="UTF-8" ?>' . "\n";
  print '<WCS_Capabilities version="1.0.0" ';
  print 'xmlns="https://www.opengeospatial.org/standards/wcs" ';
  print 'xmlns:gml="https://www.opengis.net//gml" ';
  print 'xmlns:xlink="https://www.w3.org/1999/xlink">';
  print '
    <Service>
        <metadataLink xlink:type="simple" xlink:href="https://www.ssd.noaa.gov/PS/FIRE/GASP/gasp.html" metadataType="other" />
        <description>EPA GASP Web Server 1.0.0</description>
        <name>EPA_GASP_OGC_WCS_1.0.0</name>
        <label>EPA GASP Web Server 1.0.0</label>
        <keywords>
            <keyword>EPA</keyword>
            <keyword>GASP</keyword>
            <keyword>interoperability</keyword>
        </keywords>
        <responsibleParty>
            <individualName>Todd Plessel</individualName>
            <organisationName>EPA Vislab</organisationName>
            <contactInfo>
                <onlineResource xlink:type="simple" xlink:href="mailto:plessel.todd@epa.gov" />
            </contactInfo>
        </responsibleParty>
        <fees>NONE</fees>
        <accessConstraints>NONE</accessConstraints>
    </Service>
    <Capability>
        <Request>
            <GetCapabilities>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/satellitepmserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/satellitepmserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </GetCapabilities>
            <DescribeCoverage>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/satellitepmserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/satellitepmserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </DescribeCoverage>
            <GetCoverage>
                <DCPType>
                    <HTTP>
                        <Get>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/satellitepmserver?" />
                        </Get>
                        <Post>
                            <OnlineResource xlink:type="simple" xlink:href="https://ofmpub.epa.gov/rsig/satellitepmserver" />
                        </Post>
                    </HTTP>
                </DCPType>
            </GetCoverage>
        </Request>
        <Exception>
            <Format>text/xml; charset="utf-8"</Format>
        </Exception>
    </Capability>
    <ContentMetadata version="1.0.0">
  ';

  my $variable_count = @variables;

  for ( my $variable_index = 0; $variable_index < $variable_count;
        ++$variable_index ) {
    my $this_variable    = $variables[ $variable_index ];
    my $this_description = $descriptions[ $variable_index ];
    print "        <CoverageOfferingBrief>\n";
    print "            <name>$this_variable</name>\n";
    print "            <label>$this_variable(ug/m3)</label>\n";
    print "            <description>$this_description</description>\n";
    print '            <lonLatEnvelope srsName="WGS84(DD)">';
    print "\n";
    print "                <gml:pos>-160 18</gml:pos>\n";
    print "                <gml:pos>-60 60</gml:pos>\n";
    print "            </lonLatEnvelope>\n";
    print "        </CoverageOfferingBrief>\n";
  }

  print '
  </ContentMetadata>
</WCS_Capabilities>
';
}



# Print web server coverage description metadata.

sub print_coverage_description {
  print '<?xml version="1.0" encoding="UTF-8" ?>';
  print '<CoverageDescription version="1.0.0" ';
  print 'xmlns="https://www.opengeospatial.org/standards/wcs" ';
  print 'xmlns:gml="https://www.opengis.net/gml" ';
  print 'xmlns:xlink="https://www.w3.org/1999/xlink">';

  my $variable_count = @variables;

  for ( my $variable_index = 0; $variable_index < $variable_count;
        ++$variable_index ) {
    my $this_variable    = $variables[ $variable_index ];
    my $this_description = $descriptions[ $variable_index ];

    if ( $variable eq '' || $variable eq $this_variable ) {
      print "    <CoverageOffering>\n";
      print "        <name>$this_variable</name>\n";
      print "        <label>$this_variable(ug/m3)</label>\n";
      print "        <description>$this_description</description>\n";
      print "        <domainSet>\n";
      print "            <spatialDomain>\n";
      print '                <gml:Envelope srsName="WGS84(DD)">';
      print "\n";
      print "                    <gml:pos>-160 18</gml:pos>\n";
      print "                    <gml:pos>-60 60</gml:pos>\n";
      print "                </gml:Envelope>\n";
      print "            </spatialDomain>\n";
      print "            <temporalDomain>\n";
      print "                <timePeriod>\n";
      print "                    <beginPosition>2006-01-01";
      print "T00:00:00Z</beginPosition>\n";
      print "                    <timeResolution>PT1D</timeResolution>\n";
      print "                </timePeriod>\n";
      print "            </temporalDomain>\n";
      print "        </domainSet>\n";
      print "        <rangeSet>\n";
      print "            <RangeSet>\n";
      print "                <name>$this_variable</name>\n";
      print "                <label>$this_variable(ug/m3)</label>\n";
      print "                <description>$this_description</description>";
      print '
                <nullValues>
                    <singleValue>-9999.0</singleValue>
                </nullValues>
            </RangeSet>
        </rangeSet>
        <supportedCRSs>
            <requestResponseCRSs>CRS:84</requestResponseCRSs>
            <nativeCRSs>CRS:84</nativeCRSs>
        </supportedCRSs>
        <supportedFormats>
            <formats>ASCII XDR NetCDF-COARDS NetCDF-IOAPI</formats>
        </supportedFormats>
        <supportedInterpolations>
            <interpolationMethod>none</interpolationMethod>
        </supportedInterpolations>
    </CoverageOffering>
';
    }
  }

  print "\n</CoverageDescription>\n";
}



# Parse URL parameters into variables.

sub parse_url {
  use CGI qw/ untaint /;     # Load Safe untainting CGI routines.
  $CGI::DISABLE_UPLOADS = 1; # Disable uploads.
  $CGI::POST_MAX = 1024;     # Limit posts to 1024 bytes.
  my $query = new CGI;       # Parse QUERY_STRING.
  %ENV = ();                 # Unset all environment variables.
  my @names = $query->param; # Extract names of parameters.
  my $count = @names;
  my $result = 0;
  debug( "@names\n$count" );

  for ( my $parameter = 0; $parameter < $count; ++$parameter) {
    $_ = $names[ $parameter ];                # $_ is tainted.
    s/[^A-Za-z1]/_/go;                        # Untaint $_.
    my $option = $_;                          # $option is untainted.
    $_ = $query->param( $option );            # $_ is tainted.
    s/[^\w\-.,:\/]/_/go;                      # Untaint $_.
    my $value = $_;                           # $value is untainted.
    my $lowercase_option = lc( $option );
    my $lowercase_value  = lc( $value );
    debug( "$lowercase_option $lowercase_value" );

    if ( $parsers{ $lowercase_option } ) {
      $result = $parsers{ $lowercase_option }->( $lowercase_value );
    } else {
      print STDERR "\nInvalid option: '$option'\n";
      $result = 0;
    }

    if ( ! $result ) {
      $parameter = $count; # Finish looping.
    }
  }

  $result = $result && required_options_specified();
  return $result;
}



# Parse service option.

sub parse_service_option {
  my $value = shift;
  my $result = parse_option( $service, $value, 'SERVICE', 'wcs' );
  return $result;
}



# Parse version option.

sub parse_version_option {
  my $value = shift;
  my $result = parse_option( $version, $value, 'VERSION', '1.0.0' );
  return $result;
}



# Parse request option.

sub parse_request_option {
  my $value = shift;
  my $result = parse_option( $request, $value, 'REQUEST',
                             'getcoverage getcapabilities describecoverage' );
  return $result;
}



# Parse coverage option.

sub parse_coverage_option {
  my $value = shift;
  my $result = 0;

  if ( $variable ne '' ) {
    print STDERR "\nRedundant COVERAGE option: '$value'\n";
  } else {
    my $count = @variables;

    for ( my $index = 0; $index < $count; ++$index ) {

      if ( $value eq $variables[ $index ] ) {
        $variable = $value;
        $variable_id = $index;
        $result = 1;
        $index = $count;
      }
    }
  }

  return $result;
}



# Parse format option:

sub parse_format_option {
  my $value = shift;
  my $result = parse_option( $format, $value, 'FORMAT',
                             'xdr ascii netcdf-coards netcdf-ioapi mcmc' );
  return $result;
}



# Parse time option.

sub parse_time_option {
  my $value = shift;
  my $result = 0;

  if ( $time ne '' ) {
    print STDERR "\nRedundant TIME option: '$value'\n";
  } else {
    $time = $value;
    my $is_valid = is_valid_time( $time );

    if ( ! $is_valid ) {
      print STDERR "\nInvalid TIME option: '$value'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse bbox option.

sub parse_bbox_option {
  my $value = shift;
  my $result = 0;

  if ( $bbox ne '' ) {
    print STDERR "\nRedundant BBOX option: '$value'\n";
  } else {
    $bbox = $value;
    my @bounds = split( /,/, $bbox );
    my $bounds_count = @bounds;

    if ( $bounds_count != 4 && $bounds_count != 6 ) {
      print STDERR "\nInvalid bbox option: '$value'\n";
    } elsif ( ! in_range( $bounds[ 0 ], -180.0, 180.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 0 ]'\n";
    } elsif ( ! in_range( $bounds[ 1 ], -90.0, 90.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 1 ]'\n";
    } elsif ( ! in_range( $bounds[ 2 ], $bounds[ 0 ], 180.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 2 ]'\n";
    } elsif ( ! in_range( $bounds[ 3 ], $bounds[ 1 ], 90.0 ) ) {
      print STDERR "\nInvalid bbox option: '$bounds[ 3 ]'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse compress option.

sub parse_compress_option {
  my $value = shift;
  my $result = 0;

  if ( $compress ne '' ) {
    print STDERR "\nRedundant COMPRESS option: '$value'\n";
  } else {
    $compress = $value;
    my $is_valid = $compress == 0 || $compress == 1;

    if ( ! $is_valid ) {
      print STDERR "\nInvalid COMPRESS option: '$value'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse regrid option:

sub parse_regrid_option {
  my $value = shift;
  my $result = parse_option( $regrid, $value, 'REGRID',
                             'nearest mean weighted' );
  return $result;
}



# Parse regrid_aggregate option:

sub parse_regrid_aggregate_option {
  my $value = shift;
  my $result = parse_option( $regrid_aggregate, $value, 'REGRID_AGGREGATE',
                             'none all daily' );
  return $result;
}



# Parse lambert option.

sub parse_lambert_option {
  my $value = shift;
  my $result = 0;

  if ( $lambert ne '' ) {
    print STDERR "\nRedundant LAMBERT option: '$value'\n";
  } else {
    $lambert = $value;
    my @values = split( /,/, $value );
    my $count = @values;

    if ( $count != 4 ) {
      print STDERR "\nInvalid LAMBERT option: '$value'\n";
    } elsif ( ! in_range( $values[ 0 ], -89.0, 89.0 ) ) {
      print STDERR "\nInvalid LAMBERT option: '$values[ 0 ]'\n";
    } elsif ( ! in_range( $values[ 1 ], -89.0, 89.0 ) ) {
      print STDERR "\nInvalid LAMBERT option: '$values[ 1 ]'\n";
    } elsif ( ! in_range( $values[ 2 ], -180.0, 180.0 ) ) {
      print STDERR "\nInvalid LAMBERT option: '$values[ 2 ]'\n";
    } elsif ( ! in_range( $values[ 3 ], -89.0, 89.0 ) ) {
      print STDERR "\nInvalid LAMBERT option: '$values[ 3 ]'\n";
    } elsif ( $values[ 0 ] > $values[ 1 ] ) {
      print STDERR "\nInvalid LAMBERT option: '$values[ 1 ]'\n";
    } elsif ( $values[ 0 ] > 0.0 && $values[ 1 ] < 0.0 ) {
      print STDERR "\nInvalid LAMBERT option: '$values[ 1 ]'\n";
    } elsif ( $values[ 0 ] < 0.0 && $values[ 1 ] > 0.0 ) {
      print STDERR "\nInvalid LAMBERT option: '$values[ 1 ]'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse stereographic option.

sub parse_stereographic_option {
  my $value = shift;
  my $result = 0;

  if ( $stereographic ne '' ) {
    print STDERR "\nRedundant STEREOGRAPHIC option: '$value'\n";
  } else {
    $stereographic = $value;
    my @values = split( /,/, $value );
    my $count = @values;

    if ( $count != 3 ) {
      print STDERR "\nInvalid STEREOGRAPHIC option: '$value'\n";
    } elsif ( ! in_range( $values[ 0 ], -180.0, 180.0 ) ) {
      print STDERR "\nInvalid STEREOGRAPHIC option: '$values[ 0 ]'\n";
    } elsif ( ! in_range( $values[ 1 ], -90.0, 90.0 ) ) {
      print STDERR "\nInvalid STEREOGRAPHIC option: '$values[ 1 ]'\n";
    } elsif ( ! in_range( $values[ 2 ], -90.0, 90.0 ) ) {
      print STDERR "\nInvalid STEREOGRAPHIC option: '$values[ 2 ]'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse mercator option.

sub parse_mercator_option {
  my $value = shift;
  my $result = 0;

  if ( $mercator ne '' ) {
    print STDERR "\nRedundant MERCATOR option: '$value'\n";
  } else {
    $mercator = $value;
    my @values = split( /,/, $value );
    my $count = @values;

    if ( $count != 1 ) {
      print STDERR "\nInvalid MERCATOR option: '$value'\n";
    } elsif ( ! in_range( $values[ 0 ], -180.0, 180.0 ) ) {
      print STDERR "\nInvalid MERCATOR option: '$values[ 0 ]'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse lonlat option.

sub parse_lonlat_option {
  my $value = shift;
  my $result = 0;

  if ( $lonlat ne '' ) {
    print STDERR "\nRedundant LONLAT option: '$value'\n";
  } else {
    $lonlat = 1;
    $result = 1;
  }

  return $result;
}



# Parse ellipsoid option.

sub parse_ellipsoid_option {
  my $value = shift;
  my $result = 0;

  if ( $ellipsoid ne '' ) {
    print STDERR "\nRedundant ELLIPSOID option: '$value'\n";
  } else {
    $ellipsoid = $value;
    my @values = split( /,/, $value );
    my $count = @values;

    if ( $count != 1 && $count != 2 ) {
      print STDERR "\nInvalid ELLIPSOID option: '$value'\n";
    } elsif ( ! in_range( $values[ 0 ], 1.0, 1e10 ) ) {
      print STDERR "\nInvalid ELLIPSOID option: '$values[ 0 ]'\n";
    } elsif ( $count == 2 ) {

      if ( ! in_range( $values[ 1 ], $values[ 0 ], 1e10 ) ) {
        print STDERR "\nInvalid ELLIPSOID option: '$values[ 1 ]'\n";
      } else {
        $result = 1;
      }
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse grid option.

sub parse_grid_option {
  my $value = shift;
  my $result = 0;

  if ( $grid ne '' ) {
    print STDERR "\nRedundant GRID option: '$value'\n";
  } else {
    $grid = $value;
    my @values = split( /,/, $value );
    my $count = @values;

    if ( $count != 6 ) {
      print STDERR "\nInvalid GRID option: '$value'\n";
    } elsif ( $values[ 0 ] < 1 ) {
      print STDERR "\nInvalid GRID option: '$values[ 0 ]'\n";
    } elsif ( $values[ 1 ] < 1 ) {
      print STDERR "\nInvalid GRID option: '$values[ 1 ]'\n";
    } elsif ( ! in_range( $values[ 2 ], -1e10, 1e10 ) ) {
      print STDERR "\nInvalid GRID option: '$values[ 2 ]'\n";
    } elsif ( ! in_range( $values[ 3 ], -1e10, 1e10 ) ) {
      print STDERR "\nInvalid GRID option: '$values[ 3 ]'\n";
    } elsif ( ! in_range( $values[ 4 ], 0.01, 1e10 ) ) {
      print STDERR "\nInvalid GRID option: '$values[ 4 ]'\n";
    } elsif ( ! in_range( $values[ 5 ], 0.01, 1e10 ) ) {
      print STDERR "\nInvalid GRID option: '$values[ 5 ]'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse levels option.

sub parse_levels_option {
  my $value = shift;
  my $result = 0;

  if ( $levels ne '' ) {
    print STDERR "\nRedundant LEVELS option: '$value'\n";
  } else {
    $levels = $value;
    my @values = split( /,/, $value );
    my $count = @values;

    if ( $count != 3 + $values[ 0 ] + 1 + 5 ) {
      print STDERR "\nInvalid LEVELS option: '$value'\n";
    } elsif ( ! in_range( $values[ 0 ], 1, 100 ) ) {
      print STDERR "\nInvalid LEVELS option: '$values[ 0 ]'\n";
    } elsif ( ! in_range( $values[ 1 ], 1, 7 ) ) {
      print STDERR "\nInvalid LEVELS option: '$values[ 1 ]'\n";
    } elsif ( ! in_range( $values[ 2 ], 0.0, 1e8 ) ) {
      print STDERR "\nInvalid LEVELS option: '$values[ 2 ]'\n";
    } else {

      # Ensure level values are ordered decreasing if sigma-p else increasing:

      my $end = $count - 5;
      my $minimum = 0.0;
      my $maximum = $lonlat ne '' ? 100000.0 : 1.0;
      my $ok = 0;

      for ( my $index = 3; $index < $end; ++$index ) {
        my $level_value = $values[ $index ];
        $ok = in_range( $level_value, $minimum, $maximum );

        if ( ! $ok ) {
          print STDERR "\nInvalid LEVELS option: '$values[ $index ]'\n";
          $index = $count;
        } elsif ( $lonlat ne '' ) {
          $minimum = $level_value;
        } else {
          $maximum = $level_value;
        }
      }

      # Check last parameter constants:

      if ( $ok == 1 ) {
        my $index = $count - 5;

        if ( ! in_range( $values[ $index ], 0.01, 1e2 ) ) {
          print STDERR "\nInvalid LEVELS option: '$values[ $index ]'\n";
        } elsif ( ! in_range( $values[ $index + 1 ], 0.01, 1e4 ) ) {
          print STDERR "\nInvalid LEVELS option: '$values[ $index + 1 ]'\n";
        } elsif ( ! in_range( $values[ $index + 2 ], 0.01, 1e4 ) ) {
          print STDERR "\nInvalid LEVELS option: '$values[ $index + 2 ]'\n";
        } elsif ( ! in_range( $values[ $index + 3 ], 0.01, 1e4 ) ) {
          print STDERR "\nInvalid LEVELS option: '$values[ $index + 3 ]'\n";
        } elsif ( ! in_range( $values[ $index + 4 ], 0.01, 1e6 ) ) {
          print STDERR "\nInvalid LEVELS option: '$values[ $index + 4 ]'\n";
        } else {
          $result = 1;
        }
      }
    }
  }

  return $result;
}



# Parse aod_range option.

sub parse_aod_range_option {
  my $value = shift;
  my $result = parse_range_option( $aod_range, $value, 'AOD_RANGE' );
  return $result;
}



# Parse std_range option.

sub parse_std_range_option {
  my $value = shift;
  my $result = parse_range_option( $std_range, $value, 'STD_RANGE' );
  return $result;
}



# Parse cld_range option.

sub parse_cld_range_option {
  my $value = shift;
  my $result = parse_range_option( $cld_range, $value, 'CLD_RANGE' );
  return $result;
}



# Parse cls_range option.

sub parse_cls_range_option {
  my $value = shift;
  my $result = parse_range_option( $cls_range, $value, 'CLS_RANGE' );
  return $result;
}



# Parse sfc_range option.

sub parse_sfc_range_option {
  my $value = shift;
  my $result = parse_range_option( $sfc_range, $value, 'SFC_RANGE' );
  return $result;
}



# Parse ch1_range option.

sub parse_ch1_range_option {
  my $value = shift;
  my $result = parse_range_option( $ch1_range, $value, 'CH1_RANGE' );
  return $result;
}



# Parse sig_range option.

sub parse_sig_range_option {
  my $value = shift;
  my $result = parse_range_option( $sig_range, $value, 'SIG_RANGE' );
  return $result;
}



# Parse mos_range option.

sub parse_mos_range_option {
  my $value = shift;
  my $result = parse_range_option( $mos_range, $value, 'MOS_RANGE' );
  return $result;
}



# Parse sca_range option.

sub parse_sca_range_option {
  my $value = shift;
  my $result = parse_range_option( $sca_range, $value, 'SCA_RANGE' );
  return $result;
}



# Parse corners option:

sub parse_corners_option {
  my $value = shift;
  my $result = 0;

  if ( $corners ne '' ) {
    print STDERR "\nRedundant CORNERS option: '$value'\n";
  } else {
    $corners = $value;
    my $is_valid = $corners == 0 || $corners == 1;

    if ( ! $is_valid ) {
      print STDERR "\nInvalid CORNERS option: '$value'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Parse offset option:

sub parse_offset_option {
  my $value = shift;
  my $result = 0;

  if ( $offset ne '' ) {
    print STDERR "\nRedundant OFFSET option: '$value'\n";
  } else {
    $offset = $value;
    my $is_valid = $offset == 0 || $offset == 1;

    if ( ! $is_valid ) {
      print STDERR "\nInvalid OFFSET option: '$value'\n";
    } else {
      $result = 1;
    }
  }

  return $result;
}



# Check that all required 'options' have been specified:

sub required_options_specified {
  my $result = 0;

  if ( $service eq '' ) {
    print STDERR "\nMissing option: 'SERVICE'\n";
  } elsif ( $version eq '' ) {
    print STDERR "\nMissing option: 'VERSION'\n";
  } elsif ( $request eq '' ) {
    print STDERR "\nMissing option: 'REQUEST'\n";
  } elsif ( $request eq 'getcoverage' ) {

    if ( $variable eq '' ) {
      print STDERR "\nMissing option: 'COVERAGE'\n";
    } elsif ( $format eq '' ) {
      print STDERR "\nMissing option: 'FORMAT'\n";
    } elsif ( $time eq '' ) {
      print STDERR "\nMissing option: 'TIME'\n";
    } elsif ( $bbox eq '' ) {
      print STDERR "\nMissing option: 'BBOX'\n";
    } else {
      my $regrid_count = 0;
      $regrid_count += $regrid ne '';
      $regrid_count += $ellipsoid ne '';
      $regrid_count += $grid ne '';
      my $projection_count = 0;
      $projection_count += $lambert ne '';
      $projection_count += $stereographic ne '';
      $projection_count += $mercator ne '';
      $projection_count += $lonlat ne '';        

      $result =
        $regrid_count == 0 && $projection_count == 0 ||
        $regrid_count == 3 && $projection_count == 1;

      if ( ! $result ) {
        print STDERR "\nInvalid options: 'REGRID/";
        print STDERR "LAMBERT/STEREOGRAPHIC/MERCATOR/LONLAT/";
        print STDERR "GRID/ELLIPSOID'\n";
      }
    }
  } else {
    $result = 1;
  }

  return $result;
}



# Compute starting_timestamp and hours.
# inputs:  $time = '2001-08-26t00:00:00z/2001-08-30t23:59:59z'
# outputs: $starting_timestamp = 2005082600
#          $hours = 120

sub compute_time_range {
  my $yyyy1 = substr( $time, 0, 4 );
  my $mm1   = substr( $time, 5, 2 );
  my $dd1   = substr( $time, 8, 2 );
  my $hh1   = substr( $time, 11, 2 );
  my $i     = index( $time, '/' );

  $starting_timestamp = integer_timestamp( $yyyy1, $mm1, $dd1, $hh1 );
  $ending_timestamp   = $starting_timestamp;
  $hours = 1;

  if ( $i != -1 ) {
    ++$i;
    my $yyyy2 = substr( $time, $i + 0, 4 );
    my $mm2   = substr( $time, $i + 5, 2 );
    my $dd2   = substr( $time, $i + 8, 2 );
    my $hh2   = substr( $time, $i + 11, 2 );
    my $yyyy  = $yyyy1;
    my $mm    = $mm1;
    my $dd    = $dd1;
    my $hh    = $hh1;
    $ending_timestamp = integer_timestamp( $yyyy2, $mm2, $dd2, $hh2 );

    while ( integer_timestamp( $yyyy, $mm, $dd, $hh ) != $ending_timestamp ) {
      increment_timestamp( $yyyy, $mm, $dd, $hh );
      ++$hours;
    }
  }
}



# Construct subsetter command.

sub construct_command {
  my $my_coverage = $convert_variables[ $variable_id ];
  my $my_compress = ( $compress ne '' ? "&COMPRESS=$compress" : '' );
  $command =
    "$wcs_command '$rsigserver_path" .
    "SERVICE=$service&VERSION=$version&REQUEST=GetCoverage" .
    "&TIME=$time&BBOX=$bbox&COVERAGE=$my_coverage&FORMAT=$format$my_compress'";
}



############################### HELPER ROUTINES ##############################



# debug( message );

sub debug {
  my $message = shift;

  if ( $debugging ) {
    print STDERR "\n$message\n";
####print STDOUT "\n$message\n";
  }
}



# Execute command and echo its output to STDOUT. E.g., execute_command( 'ls' );

sub execute_command {
  my $command = shift;
  my $result = 0;
  my $the_pipe = 0;

  # Untaint command (match expression is arbitrary as far as -T is concerned):

  if ( $command =~ m#^(/[\w-]+/[\w_ -/.:,'?&=]+)$# ) {
    $command = $1; # Re-assign first match, which is enough to satisfy -T.
    debug( "$0 executing command = $command" );
    %ENV = (); # Unset all environment variables prior to popen.
    # Complicated, supposedly safer way to open a readable pipe to command:
    my $pid = open( the_pipe, "-|" );

    if ( ! defined( $pid ) ) {
      die "Couldn't open pipe to subprocess";
    } elsif ( $pid ) { # Parent process.

      while ( <the_pipe> ) {
        print;
      }

      close( the_pipe ) or die $!;
      $result = ! $?;
    } else { # Child process.
      exec( $command ) or die "can't exec program: $!";
    }
  } else {
    print STDERR "\n$0: '$command' contains invalid characters.\n";
  }

  return $result;
}



# my $result = parse_option( $option, $value, $option_name, $valid_values );
# my $result = parse_option( $variable, $value, 'COVERAGE', 'ozone pm25' );

sub parse_option {
  my ( $option, $value, $option_name, $valid_values ) = @_;
  my $result = 0;

  if ( $option ne '' ) {
    print STDERR "\nRedundant $option_name option: '$value'\n";
  } else {
    $result = index( " $valid_values ", " $value " ) != -1;

    if ( $result ) {
      $_[ 0 ] = $value;
    } else {
      print STDERR "\nInvalid $option_name option: '$value'\n";
    }
  }

  return $result;
}



# my $result = parse_range_ption( $option, $value, $option_name ) ;
# my $result = parse_range_option( $aod_range, $value, 'AOD_RANGE' );

sub parse_range_option {
  my ( $option, $value, $option_name ) = @_;
  my $result = 0;
  my @values = split( /,/, $value );
  my $count = @values;

  if ( $option ne '' ) {
    print STDERR "\nRedundant $option_name option: '$value'\n";
  } elsif ( $count != 2 ) {
    print STDERR "\nRedundant $option_name option: '$value'\n";
  } else {
    $_[ 0 ] = $value;
    $result = 1;
  }

  return $result;
}



# my $ok = in_range( $value, $minimum, $maximum );

sub in_range {
  my ( $value, $minimum, $maximum ) = @_;
  my $result = $value >= $minimum && $value <= $maximum;
  return $result;
}



# my $is_valid = is_valid_time( '2001-08-26t20:00:00z/2001-08-27t23:59:59z' );

sub is_valid_time {
  my $time = shift;
  my $result = 0;
  my $length = length( $time );

  if ( $length == 41 ) {
    $result = is_valid_time( substr( $time, 0, 20 ) );
    $result = $result && substr( $time, 20, 1 ) eq '/';
    $result = $result && is_valid_time( substr( $time, 21, 20 ) );
    $result = $result && substr( $time, 0, 20 ) le substr( $time, 21, 20 );
  } elsif ( $length == 20 ) {
    my $year   = substr( $time, 0, 4 );
    my $month  = substr( $time, 5, 2 );
    my $day    = substr( $time, 8, 2 );
    my $hour   = substr( $time, 11, 2 );
    my $minute = substr( $time, 14, 2 );
    my $second = substr( $time, 17, 2 );
    $result = in_range( $year, 1900, 3000 );
    $result = $result && in_range( $month, 1, 12 );
    $result = $result && in_range( $day, 1, days_in_month( $year, $month ) );
    $result = $result && in_range( $hour, 0, 23 );
    $result = $result && in_range( $minute, 0, 59 );
    $result = $result && in_range( $second, 0, 59 );
    $result = $result && substr( $time, 4, 1 ) eq '-';
    $result = $result && substr( $time, 7, 1 ) eq '-';
    $result = $result && substr( $time, 10, 1 ) eq 't';
    $result = $result && substr( $time, 13, 1 ) eq ':';
    $result = $result && substr( $time, 16, 1 ) eq ':';
    $result = $result && substr( $time, 19, 1 ) eq 'z';
  }

  return $result;
}



# increment_timestamp( $yyyy, $mm, $dd, $hh );

sub increment_timestamp {
  my ( $yyyy, $mm, $dd, $hh ) = @_;
  my $hours_per_day   = 23;
  my $months_per_year = 12;
  my $days_this_month = days_in_month( $yyyy, $mm );
  ++$hh;

  if ( $hh > $hours_per_day ) {
    $hh = 0;
    ++$dd;

    if ( $dd > $days_this_month ) {
      $dd = 1;
      ++$mm;

      if ( $mm > $months_per_year ) {
        $mm = 1;
        ++$yyyy;
      }
    }
  }

  $_[ 0 ] = $yyyy;
  $_[ 1 ] = $mm;
  $_[ 2 ] = $dd;
  $_[ 3 ] = $hh;
}



# my $yyyymmddhh = integer_timestamp( $yyyy, $mm, $dd, $hh );

sub integer_timestamp {
  my ( $yyyy, $mm, $dd, $hh ) = @_;
  my $result = int( $yyyy * 1000000 + $mm * 10000 + $dd * 100 + $hh );
  return $result;
}



# my $leap = is_leap_year( $year );

sub is_leap_year {
  my $year = shift;
  my $result = $year % 4 == 0 && ( $year % 100 != 0 || $year % 400 == 0 );
  return $result;
}



# my $days = days_in_month( $year, $month );

sub days_in_month {
  my $year  = shift;
  my $month = shift;

  # 30 days hath September, April, June and November...

  my @days_per_month = ( 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 );
  my $result = $days_per_month[ $month - 1 ];

  if ( $month == 2 ) {

    if ( is_leap_year( $year ) ) {
      ++$result;
    }
  }

  return $result;
}




