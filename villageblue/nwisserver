#!/usr/bin/perl -wT

##############################################################################
# PURPOSE: nwisserver - Serve USGS NWIS requests.
#
# NOTES:   Used by Village Blue application.
#          Example usage:
#
#          wget -q -T 0 -O - 'https://ofmpub.epa.gov/rsig/nwisserver?\
#             SERVICE=NWIS&REQUEST=download&SITEID=01480065
#                                          &PARAMS=00065,00010,00095,00400,00300
#                                          &PERIOD=P120D'
#
#
# HISTORY: 2015-04-11 Matt Freeman
#
# STATUS:  reviewed tested
##############################################################################


use strict;
package main;
$| = 1; # Turn off output buffering so messages appear in correct order.
alarm( 3600 ); # Kill process after 1 hour. Legitimate usage could be an hour!
# Restrict PATH and ENV. (But before popen, ENV is cleared!)
delete @ENV{ 'PATH', 'IFS', 'CDPATH', 'ENV', 'BASH_ENV' };


############################## TUNABLE CONSTANTS #############################


my $debugging = 0; # 1 = print debug messages to STDERR logs/error_log.


# Downloader program:

my $downloader = '/rsig/villageblue/nwis_download';

# Server where this program is installed:

my $server_path = 'https://YOUR_WEBSERVER_HOST/cgi-bin';

# Query string parsing routine dispatch table:

my %parsers = (
  'service'    => \&parse_service_option,
  'request'    => \&parse_request_option,
  'siteid'     => \&parse_siteid_option,
  'params'     => \&parse_params_option,
  'period'     => \&parse_period_option, # period is optional
  'format'     => \&parse_format_option  # format is optional  
);

# Full URL path to this program:

my @pathed_program_parts = split( /\//, $0 );
my $program_name = $pathed_program_parts[ @pathed_program_parts - 1 ];
my $program = "$server_path/$program_name";

    
################################## VARIABLES #################################

# Parsed from the URL query string:

my $service  = ''; # nwis.
my $request  = ''; # download.
my $siteid   = '';
my $params   = '';
my $period   = '';
my $format   = '';

################################## ROUTINES ##################################


main();


sub main {
  my $result = 0;
  print "Content-type: text/plain; charset=iso-8859-1\n\n"; # Read by httpd.

  if ( parse_url() ) {

      if ($format eq '') {
          $format = 'json' # default to send to the download program
      }

    if ( $request eq 'download' ) {
      my $download_command = "$downloader $siteid $params $format $period";
      $result = execute_command( $download_command );
    }
  }

  $result = 1 - $result; # UNIX: zero is success, non-zero is failure.
  debug( "exit result = $result" );
  exit $result;
}



# Parse URL parameters into variables.

sub parse_url {
  use CGI qw/ untaint /;     # Load Safe untainting CGI routines.
  $CGI::DISABLE_UPLOADS = 1; # Disable uploads.
  $CGI::POST_MAX = 2048;     # Limit posts to 2048 bytes.
  my $query = new CGI;       # Parse QUERY_STRING.
  %ENV = ();                 # Unset all environment variables.
  my @names = $query->param; # Extract names of parameters.
  my $count = @names;
  my $result = 0;
  debug( "$program_name @names ($count)" );

  for ( my $parameter = 0; $parameter < $count; ++$parameter) {
    $_ = $names[ $parameter ];                # $_ is tainted.
    s/[^A-Za-z]/_/go;                         # Untaint $_.
    my $option = $_;                          # $option is untainted.
    $_ = $query->param( $option );            # $_ is tainted.
    s/[^\(\)\w\.#@,-]/_/go;                         # Untaint $_.
    my $value = $_;                           # $value is untainted.
    my $lowercase_option = lc( $option );
    my $lowercase_value  = lc( $value );
    debug( "$lowercase_option $lowercase_value" );

    if ( $parsers{ $lowercase_option } ) {
      $result = $parsers{ $lowercase_option }->( $lowercase_value );
    } else {
      print STDERR "\nInvalid option: '$option'\n";
      $result = 0;
    }

    if ( ! $result ) {
      $parameter = $count; # Finish looping.
    }
  }

  $result = $result && required_options_specified();
  return $result;
}



# Parse service option.

sub parse_service_option {
  my $value = shift;
  my $result = parse_option( $service, $value, 'SERVICE', 'nwis' );
  return $result;
}



# Parse request option.

sub parse_request_option {
  my $value = shift;
  my $result = parse_option( $request, $value, 'REQUEST', 'download' );
  return $result;
}


# Parse siteid option.

sub parse_siteid_option {
 
  my $value = shift;
  my $result = 0;

  if ( $siteid ne '' ) {
    print STDERR "\nRedundant option: 'SITEID'\n";
  } elsif ( $value =~ m#^([\(\)\w\.\#,-_]+)$# ) {
    $siteid = $1; # Re-assign first match, which is enough to satisfy -T.
    $result = 1;
  }

  return $result;
}

# Parse period option.

sub parse_period_option {
 
  my $value = shift;
  my $result = 0;

  if ( $period ne '' ) {
    print STDERR "\nRedundant option: 'PERIOD'\n";
  } elsif ( $value =~ m#^([\(\)\w\.\#,-_]+)$# ) {
    $period = $1; # Re-assign first match, which is enough to satisfy -T.
    $result = 1;
  }

  return $result;
}

# Parse format option.

sub parse_format_option {
 
  my $value = shift;
  my $result = 0;

  if ( $format ne '' ) {
    print STDERR "\nRedundant option: 'FORMAT'\n";
  } elsif ( $value =~ m#^([\(\)\w\.\#,-_]+)$# ) {
    $format = $1; # Re-assign first match, which is enough to satisfy -T.
    $result = 1;
  }

  return $result;
}


# Parse params option.

sub parse_params_option {
 
  my $value = shift;
  my $result = 0;

  if ( $params ne '' ) {
    print STDERR "\nRedundant option: 'PARAMS'\n";
  } elsif ( $value =~ m#^([\(\)\w\.\#,-_]+)$# ) {
    $params = $1; # Re-assign first match, which is enough to satisfy -T.
    $result = 1;
  }

  return $result;
}


# Check that all required 'options' have been specified:

sub required_options_specified {
  my $result = 0;

  if ( $request eq '' ) {
    print STDERR "\nMissing option: 'REQUEST'\n";
  } elsif ( $request eq 'download' ) {

    if ( $siteid eq '' ) {
      print STDERR "\nMissing option: 'SITEID'\n";
    } elsif ( $params eq '' ) {
      print STDERR "\nMissing option: 'PARAMS'\n";
    } else {
      $result = 1;
    }
  } else {
    $result = 1;
  }

  debug( "required_options_specified result = $result, siteid = $siteid, params = $params" );
  return $result;
}



############################### HELPER ROUTINES ##############################



# debug( message );

sub debug {
  my $message = shift;

  if ( $debugging ) {
    print STDERR "\n$message\n";
####print STDOUT "\n$message\n";
  }
}



# Execute command and echo its output to STDOUT. E.g., execute_command( 'ls' );

sub execute_command {
  my $command = shift;
  my $result = 0;
  my $the_pipe = 0;

  # Untaint command (match expression is arbitrary as far as -T is concerned):

  if ( $command =~ m#^(/[\w-]+/[\w -/\.@\#,]+)$# ) {
    $command = $1; # Re-assign first match, which is enough to satisfy -T.
    debug( "$0 executing command = $command" );
    %ENV = (); # Unset all environment variables prior to popen.
    # Complicated, supposedly safer way to open a readable pipe to command:
    my $pid = open( the_pipe, "-|" );

    if ( ! defined( $pid ) ) {
      die "Couldn't open pipe to subprocess";
    } elsif ( $pid ) { # Parent process.

      while ( <the_pipe> ) {
        print;
      }

      close( the_pipe ) or die $!;
      $result = ! $?;
    } else { # Child process.
      exec( $command ) or die "can't exec program: $!";
    }
  } else {
    print STDERR "\n$0: '$command' contains invalid characters.\n";
  }

  return $result;
}



# my $result = parse_option( $option, $value, $option_name, $valid_values );
# my $result = parse_option( $variable, $value, 'SERVICE', 'nwis' );

sub parse_option {
  my ( $option, $value, $option_name, $valid_values ) = @_;
  my $result = 0;

  if ( $option ne '' ) {
    print STDERR "\nRedundant $option_name option: '$value'\n";
  } else {
    $result = index( " $valid_values ", " $value " ) != -1;

    if ( $result ) {
      $_[ 0 ] = $value;
    } else {
      print STDERR "\nInvalid $option_name option: '$value'\n";
    }
  }

  return $result;
}



